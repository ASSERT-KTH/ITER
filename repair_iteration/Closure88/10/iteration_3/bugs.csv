bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
2	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
3	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
4	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
5	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling);  [CE]  cannot  find  symbol  i  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	52	None	replace
6	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
7	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
8	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  sibling);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
9	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness,  variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
10	[BUG]  [BUGGY]  VariableLiveness  state  =  variable.isVariableStillLiveWithinExpression(sibling,  liveness);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  variable.isVariableStillLiveWithinExpression(sibling,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  variable.isVariableStillLiveWithinExpression(sibling,  liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
11	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
12	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
13	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(variable,  liveness);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(variable,  liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
14	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable,  sibling);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable,  sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
15	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v,  variable);  [CE]  cannot  find  symbol  v  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	85	None	replace
16	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  null);  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  module	82	None	replace
17	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  variable,  null);  [CE]  cannot  find  symbol  testNode  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  testNode	82	None	replace
18	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	82	None	replace
19	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
20	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	53	None	replace
21	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variables,  sibling);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variables,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variables,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
22	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
23	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
24	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
25	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	8	None	replace
26	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	8	None	replace
27	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	8	None	replace
28	[BUG]  [BUGGY]  Node  sibling  =  sibling.getFirstChild();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  sibling.getFirstChild();	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	13	None	replace
29	[BUG]  [BUGGY]  Node  state  =  n.getLastChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  n.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  n.getLastChild();	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	13	None	replace
30	[BUG]  [BUGGY]  Node  sibling  =  n.getLastChild();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  n.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  n.getLastChild();	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	13	None	replace
31	[BUG]  [BUGGY]  Node  sibling  =  sibling.getLastChild();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  sibling.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  sibling.getLastChild();	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	13	None	replace
32	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	64	62	replace
33	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	64	62	replace
34	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
35	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
36	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  n);  [CE]  cannot  find  symbol  i  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  i	64	None	replace
37	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
38	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
39	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  null);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
40	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  true);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  true);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
41	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
42	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  false);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  false);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  false);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
43	[BUG]  [BUGGY]  Predicate  state  =(Predicate)sibling.getNext();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)sibling.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)sibling.getNext();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
44	[BUG]  [BUGGY]  Predicate  state  =(Predicate)sibling.getParent();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)sibling.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)sibling.getParent();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
45	[BUG]  [BUGGY]  Predicate  state  =(Predicate)n.getNext();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)n.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)n.getNext();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
46	[BUG]  [BUGGY]  Predicate  state  =(Predicate)n.getLastChild();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)n.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)n.getLastChild();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
47	[BUG]  [BUGGY]  Predicate  state  =(Predicate)n.getFirstChild();  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)n.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)n.getFirstChild();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
48	[BUG]  [BUGGY]  Predicate  state  =(Predicate)n.getAncestor(1);  [CE]  incomparable  types:  Predicate  and  VariableLiveness  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)n.getAncestor(1);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)n.getAncestor(1);	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  incomparable  types:  Predicate  and  VariableLiveness	15	None	replace
49	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(cfgNode,  n,  exprRoot);  [CE]  cannot  find  symbol  cfgNode  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(cfgNode,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(cfgNode,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	44	None	replace
50	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	44	None	replace
51	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	44	None	replace
52	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);  [CE]  cannot  find  symbol  i  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	44	None	replace
53	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  sibling);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  	1	None	replace
54	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable,  sibling);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	1	None	replace
55	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  variable,  sibling);  [CE]  cannot  find  symbol  cfgNode  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	1	None	replace
56	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
57	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
58	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
59	[BUG]  [BUGGY]  VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  parent  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  parent	84	None	replace
60	[BUG]  [BUGGY]  VariableLiveness  state  =  mod.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  mod  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  mod.isVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  mod.isVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  mod	84	None	replace
61	[BUG]  [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  child  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  child	84	None	replace
62	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(vio,  sibling,  exprRoot);  [CE]  cannot  find  symbol  vio  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(vio,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(vio,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(label,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  vio	48	None	replace
63	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
64	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
65	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
66	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
67	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
68	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	22	None	replace
69	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  sibling);  [CE]  cannot  find  symbol  d  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  d	22	None	replace
70	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  dim);  [CE]  cannot  find  symbol  dim  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  dim);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  dim);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dim	22	None	replace
71	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DESC);  [CE]  cannot  find  symbol  DESC  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DESC);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DESC);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  DESC	22	None	replace
72	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
74	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
75	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  test);  [CE]  cannot  find  symbol  test  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  test);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variable,  test);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  test	25	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
80	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
81	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  test);  [CE]  cannot  find  symbol  test  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  test);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  test);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  test	27	None	replace
82	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  null);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	27	None	replace
83	[BUG]  [BUGGY]  State  state  =  sibling.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  sibling.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
84	[BUG]  [BUGGY]  State  state  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  n.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  n.getLastChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
85	[BUG]  [BUGGY]  State  state  =  exprRoot.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  exprRoot.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  exprRoot.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
86	[BUG]  [BUGGY]  State  state  =  sibling.getLastChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  sibling.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  sibling.getLastChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
87	[BUG]  [BUGGY]  State  state  =  sel.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  sel.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  sel.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
88	[BUG]  [BUGGY]  State  state  =  delegate.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  delegate.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  delegate.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
89	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	18	None	replace
90	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	18	None	replace
91	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	38	None	replace
92	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	38	None	replace
93	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  sibling,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	38	None	replace
94	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  sibling.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  sibling.getNext();	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	14	None	replace
95	[BUG]  [BUGGY]  Node  state  =  sibling.getNext(),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getNext(),  variable;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getNext(),  variable;	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	14	None	replace
96	[BUG]  [BUGGY]  Node  sibling  =  n.getNext();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  n.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  n.getNext();	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	14	None	replace
97	[BUG]  [BUGGY]  Node  sibling  =  sibling.getParent();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  sibling.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  sibling.getParent();	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	14	None	replace
98	[BUG]  [BUGGY]  Node  sibling  =  sibling.getNext(),  variable;  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  sibling.getNext(),  variable;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  sibling.getNext(),  variable;	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	14	None	replace
99	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(v,    sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
100	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAYBE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	81	None	replace
101	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MayBE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	81	None	replace
102	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVED);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVED	81	None	replace
103	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJORBE_LIVE);  [CE]  cannot  find  symbol  MAJORBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJORBE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJORBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAJORBE_LIVE	81	None	replace
104	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_SIZE);  [CE]  cannot  find  symbol  VARIABLE_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_SIZE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_SIZE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_SIZE	81	None	replace
105	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_SIZE);  [CE]  cannot  find  symbol  MOVE_SIZE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_SIZE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_SIZE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SIZE	81	None	replace
106	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	89	None	replace
107	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  test,  variable,  sibling);  [CE]  cannot  find  symbol  test  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  test,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  test,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  test	89	None	replace
108	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  n);  [CE]  cannot  find  symbol  test  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  test	89	None	replace
109	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
110	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
111	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
112	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILLIS);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILLIS);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	74	None	replace
113	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  SHORT);  [CE]  cannot  find  symbol  SHORT  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  SHORT);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  SHORT);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  SHORT	74	None	replace
114	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  KILL);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  KILL	74	None	replace
115	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MISSING);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MISSING	74	None	replace
116	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	71	None	replace
117	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  sibling);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  sibling);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
118	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
119	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
120	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n.getParent());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n.getParent());  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n.getParent());	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
121	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
122	[BUG]  [BUGGY]  n  =  sibling.getParent();  [CE]  cannot  find  symbol  state  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  sibling.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getParent();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
123	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  [CE]  cannot  find  symbol  state  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  sibling.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getLastChild();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
124	[BUG]  [BUGGY]  n  =  exprRoot.getNext();  [CE]  cannot  find  symbol  state  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  exprRoot.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  exprRoot.getNext();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
125	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  [CE]  cannot  find  symbol  state  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getFirstChild();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
126	[BUG]  [BUGGY]  n  =  sibling.getPrevious();  [CE]  cannot  find  symbol  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  sibling.getPrevious();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getPrevious();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
127	[BUG]  [BUGGY]  n  =  sibling.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  sibling.getNext()  +  1;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  sibling.getNext()  +  1;	  n    =    sibling.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	17	None	replace
128	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
129	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
130	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(variable);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.getVariableStillLiveWithinExpression(variable);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
131	[BUG]  [BUGGY]  VariableLiveness  state  =  parent.getVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  parent  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  parent.getVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  parent.getVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  parent	69	None	replace
132	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(variable);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.getVariableStillLiveWithinExpression(variable);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
133	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(live);  [CE]  cannot  find  symbol  live  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(live);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.getVariableStillLiveWithinExpression(live);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  live	69	None	replace
134	[BUG]  [BUGGY]  VariableLiveness  state  =  mod.getVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  mod  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  mod.getVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  mod.getVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  mod	69	None	replace
135	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR_LIVE);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    n);    	non-compiled	[CE]  cannot  find  symbol  	72	None	replace
136	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
137	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
138	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
139	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
140	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  n,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
141	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
142	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
143	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
144	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	10	None	replace
145	[BUG]  [BUGGY]  Predicate  state  =  sibling.getFirstChild();  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =  sibling.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	16	None	replace
146	[BUG]  [BUGGY]  Predicate  state  =  n.getLastChild();  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =  n.getLastChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =  n.getLastChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	16	None	replace
147	[BUG]  [BUGGY]  Predicate  sibling  =  n.getFirstChild();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  sibling  =  n.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  sibling  =  n.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	16	None	replace
148	[BUG]  [BUGGY]  Predicate  state  =  exprRoot.getFirstChild();  [CE]  incompatible  types  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =  exprRoot.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =  exprRoot.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	16	None	replace
149	[BUG]  [BUGGY]  Predicate  state  =  n.getFirstChild().getNext();  [CE]  incompatible  types  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =  n.getFirstChild().getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =  n.getFirstChild().getNext();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	16	None	replace
150	[BUG]  [BUGGY]  Predicate  status  =  sibling.getFirstChild();  [CE]  incompatible  types  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  status  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  status  =  sibling.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	16	None	replace
151	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	79	None	replace
152	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variables);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	79	None	replace
153	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    test);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	29	None	replace
154	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MULTIPLE_LIVE);  [CE]  cannot  find  symbol  MULTIPLE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MULTIPLE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MULTIPLE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    test);    	non-compiled	[CE]  cannot  find  symbol  MULTIPLE_LIVE	29	None	replace
155	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    test);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	29	None	replace
156	[BUG]  [BUGGY]  Node  state  =  exprRoot.getFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  exprRoot.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  exprRoot.getFirstChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	12	None	replace
157	[BUG]  [BUGGY]  Node  sibling  =  n.getFirstChild();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  sibling  =  n.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  sibling  =  n.getFirstChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	12	None	replace
158	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
159	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
160	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
161	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
162	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
163	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	55	None	replace
164	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
165	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(liveness,  exprRoot);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(liveness,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(liveness,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
166	[BUG]  [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(n,  liveness);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(n,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(n,  liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
167	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(n,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(n,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
168	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
169	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(variable,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(variable,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
170	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(v,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(v,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(v,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	86	None	replace
171	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(sibling,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
172	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling;	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
173	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(),  sibling);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis();    	non-compiled	[CE]  ';'  expected	67	None	replace
174	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(variable);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
175	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
176	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  module);  [CE]  cannot  find  symbol  module  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  module);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  module);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    n);    	non-compiled	[CE]  cannot  find  symbol  module	87	None	replace
177	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  n);  [CE]  cannot  find  symbol  testNode  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    n);    	non-compiled	[CE]  cannot  find  symbol  testNode	87	None	replace
178	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR);  [CE]  cannot  find  symbol  HOUR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  HOUR	73	None	replace
179	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  exprRoot,  variable);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
180	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  VARIABLE_SIZE,  variable);  [CE]  cannot  find  symbol  VARIABLE_SIZE  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  VARIABLE_SIZE,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(n,  VARIABLE_SIZE,  variable);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_SIZE	70	None	replace
181	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
182	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
183	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  n,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	40	None	replace
184	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
185	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
186	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
187	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variables);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	37	None	replace
188	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  null,  exprRoot);  [CE]  cannot  find  symbol  i  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
189	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  null,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	37	None	replace
190	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  false);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  false);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  false);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
191	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
192	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
193	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
194	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  false);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  false);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  false);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  cannot  find  symbol  	75	None	replace
195	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
196	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
197	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null,  exprRoot,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
198	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null,  liveness);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  	83	None	replace
199	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
200	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  exprRoot);  [CE]  cannot  find  symbol  testNode  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testNode,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  testNode	76	None	replace
201	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable);  [CE]  cannot  find  symbol  module  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  module	76	None	replace
202	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
203	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
204	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
205	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    null);    	non-compiled	[CE]  cannot  find  symbol  	35	None	replace
206	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    null);    	non-compiled	[CE]  cannot  find  symbol  	35	None	replace
207	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	35	None	replace
208	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
209	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  n);  [CE]  cannot  find  symbol  i  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    n);    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
210	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	31	None	replace
211	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test);  [CE]  cannot  find  symbol  test  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  test	31	None	replace
212	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
213	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  exprRoot,  sibling);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	6	None	replace
214	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
215	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  exprRoot,  variable,  sibling);  [CE]  cannot  find  symbol  cfgNode  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(exprRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	56	None	replace
216	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  sibling);  [CE]  cannot  find  symbol  desc  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(exprRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  desc	56	None	replace
217	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
218	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	62	None	replace
219	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	62	None	replace
220	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
221	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
222	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  null);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
223	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  variable);  [CE]  cannot  find  symbol  label  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	80	None	replace
224	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	80	None	replace
225	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	49	None	replace
226	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  null);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  null);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	49	None	replace
227	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
228	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
229	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variables);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
230	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);  [CE]  cannot  find  symbol  v  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  v	46	None	replace
231	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variables);  [CE]  cannot  find  symbol  v  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  v	46	None	replace
232	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  exprRoot,  variable);  [CE]  cannot  find  symbol  i  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	43	None	replace
233	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	43	None	replace
234	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJBE_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VAR_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	30	None	replace
235	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DOUBLE);  [CE]  cannot  find  symbol  DOUBLE  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DOUBLE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DOUBLE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VAR_LIVE);    	non-compiled	[CE]  cannot  find  symbol  DOUBLE	30	None	replace
236	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
237	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable);  [CE]  cannot  find  symbol  v  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	5	None	replace
238	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  sibling);  [CE]  cannot  find  symbol  cfgNode  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(cfgNode,  n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	non-compiled	[CE]  cannot  find  symbol  cfgNode	7	None	replace
239	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling);  [CE]  cannot  find  symbol  label  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	non-compiled	[CE]  cannot  find  symbol  label	7	None	replace
240	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
241	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  n);  [CE]  cannot  find  symbol  i  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
242	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	24	None	replace
243	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  parent);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	24	None	replace
244	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  null);  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  null);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    exprRoot);    	non-compiled	[CE]  incompatible  types	45	None	replace
245	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	60	None	replace
246	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	60	None	replace
247	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	60	None	replace
248	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot,  variable);  [CE]  cannot  find  symbol  label  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  label	60	None	replace
249	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	34	None	replace
250	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot,  null);  [CE]  cannot  find  symbol  i  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  variable,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    null);    	non-compiled	[CE]  cannot  find  symbol  i	34	None	replace
251	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE,  liveness);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	28	None	replace
252	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  N);  [CE]  cannot  find  symbol  N  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  N);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  N);	  VariableLiveness    state    =    isVariableReadBeforeKill(v,    sibling,    n);    	non-compiled	[CE]  cannot  find  symbol  N	65	None	replace
253	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  VAR_LIVE,  n);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  VAR_LIVE,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  VAR_LIVE,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(v,    sibling,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	65	None	replace
254	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  variable);  [CE]  cannot  find  symbol  i  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(i,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
255	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
256	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
257	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  null,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
258	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  null,  variable);  [CE]  cannot  find  symbol  module  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  null,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    null,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	61	None	replace
259	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  module,  variable,  sibling);  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  module,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  module,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  module	88	None	replace
260	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  n);  [CE]  cannot  find  symbol  module  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  module	88	None	replace
261	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MILL	74	None	replace
262	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR_LIVE);  [CE]  cannot  find  symbol  HOUR_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HOUR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VARIABLE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HOUR_LIVE	81	None	replace
263	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	23	None	replace
264	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  exprRoot);  [CE]  cannot  find  symbol  liber  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  liber	23	None	replace
265	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  exprRoot,  sibling,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
266	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  null,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
267	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
268	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysisWithinExpression();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysisWithinExpression();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysisWithinExpression();	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
269	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  getLiveVariablesAnalysis(sibling,  variable);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
270	[BUG]  [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  exprRoot);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
271	[BUG]  [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  exprRoot.isVariableStillLiveWithinExpression(liveness,  n);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
272	[BUG]  [BUGGY]  PredicatesAnalysis  state  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  PredicatesAnalysis  state  =  n.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	PredicatesAnalysis  state  =  n.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
273	[BUG]  [BUGGY]  PredicatesAssignment  state  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  PredicatesAssignment  state  =  n.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	PredicatesAssignment  state  =  n.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
274	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(visibility,  sibling,  exprRoot);  [CE]  cannot  find  symbol  visibility  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(visibility,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(visibility,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(label,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  visibility	48	None	replace
275	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  out);  [CE]  cannot  find  symbol  out  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  out);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  out);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  out	49	None	replace
276	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  dev);  [CE]  cannot  find  symbol  dev  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  dev);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  dev);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dev	9	None	replace
277	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  new  VariableLiveness(variable));  [CE]  enum  types  may  not  be  instantiated  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  new  VariableLiveness(variable));  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  new  VariableLiveness(variable));	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  enum  types  may  not  be  instantiated	9	None	replace
278	[BUG]  [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  child  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	85	None	replace
279	[BUG]  [BUGGY]  VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  parent  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  parent.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	85	None	replace
280	[BUG]  [BUGGY]  VariableLiveness  state  =  module.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  module  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  module.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  module.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	85	None	replace
281	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  SHORT);  [CE]  cannot  find  symbol  SHORT  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  SHORT);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  SHORT);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  SHORT	58	None	replace
282	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  true);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable,  true);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	58	None	replace
283	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
284	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	39	None	replace
285	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  SHORT);  [CE]  cannot  find  symbol  SHORT  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  SHORT);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  SHORT);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  SHORT	39	None	replace
286	[BUG]  [BUGGY]  State  state  =  n,  sibling.getFirstChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  n,  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  n,  sibling.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	68	None	replace
287	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  liveness);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	42	None	replace
288	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	80	None	replace
289	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  sibling,  variable);  [CE]  cannot  find  symbol  dialog  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  dialog	5	None	replace
290	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
291	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  variable,  sibling);  [CE]  cannot  find  symbol  dibling  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(i,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  dibling	54	None	replace
292	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  cannot  find  symbol  state  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  n  =  n.getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	n  =  n.getNext();	  n    =    sibling.getNext();    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
293	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  variable);  [CE]  cannot  find  symbol  v  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	51	None	replace
294	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
295	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  exprRoot,  variable);  [CE]  cannot  find  symbol  v  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  v	4	None	replace
296	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  variable,  null);  [CE]  cannot  find  symbol  exrRoot  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  exrRoot	82	None	replace
297	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null);  [CE]  cannot  find  symbol  testRoot  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  testRoot	82	None	replace
298	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  variable,  sibling);  [CE]  cannot  find  symbol  label  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  n,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  label	1	None	replace
299	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  n);  [CE]  cannot  find  symbol  exrRoot  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exrRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    n);    	non-compiled	[CE]  cannot  find  symbol  exrRoot	87	None	replace
300	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
301	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
302	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
303	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  null,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	37	None	replace
304	[BUG]  [BUGGY]  VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  siblings  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  siblings	84	None	replace
305	[BUG]  [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  child  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  child.isVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  child	84	None	replace
306	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
307	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	59	None	replace
308	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variables,  exprRoot,  sibling,  null);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variables,  exprRoot,  sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variables,  exprRoot,  sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    null);    	non-compiled	[CE]  cannot  find  symbol  	35	None	replace
309	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    null);    	non-compiled	[CE]  cannot  find  symbol  	35	None	replace
310	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  sibling,  variable);  [CE]  cannot  find  symbol  desc  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(desc,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(desc,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  desc	57	None	replace
311	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  variable);  [CE]  cannot  find  symbol  viable  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(v,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  viable	63	None	replace
312	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  testNode,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  testNode  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  testNode,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  testNode,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  testNode	18	None	replace
313	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  liber  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(liber,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  liber	18	None	replace
314	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	71	None	replace
315	[BUG]  [BUGGY]  Node  state  =  sibling.getLastChild(),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getLastChild(),  variable;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getLastChild(),  variable;	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	13	None	replace
316	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	31	None	replace
317	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	31	None	replace
318	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module);  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  module	76	None	replace
319	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  n,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	44	None	replace
320	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  exprRoot);  [CE]  cannot  find  symbol  v  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  v	44	None	replace
321	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exrRoot,  variable);  [CE]  cannot  find  symbol  exrRoot  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exrRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exrRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    module,    variable);    	non-compiled	[CE]  cannot  find  symbol  exrRoot	77	None	replace
322	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot);  [CE]  cannot  find  symbol  module  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    module,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	77	None	replace
323	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test,  sibling);  [CE]  cannot  find  symbol  test  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  test,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  test	26	None	replace
324	[BUG]  [BUGGY]  Predicate  state  =(Predicate)state.getParent();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  state  =(Predicate)state.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  state  =(Predicate)state.getParent();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
325	[BUG]  [BUGGY]  Node  state  =  n.getFirstChild().getNext();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  n.getFirstChild().getNext();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  n.getFirstChild().getNext();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	12	None	replace
326	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  n,  exprRoot);  [CE]  cannot  find  symbol  dibling  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(dibling,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  dibling	43	None	replace
327	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variables,  exprRoot);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variables,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variables,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	62	None	replace
328	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  variable);  [CE]  cannot  find  symbol  test  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  test	89	None	replace
329	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    test,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	89	None	replace
330	[BUG]  [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  siblings  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  siblings	69	None	replace
331	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getVariableStillLiveWithinExpression(liveness);  [CE]  cannot  find  symbol  child  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  child.getVariableStillLiveWithinExpression(liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  child.getVariableStillLiveWithinExpression(liveness);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  child	69	None	replace
332	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
333	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  variable,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
334	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
335	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sourceFile,  n);  [CE]  cannot  find  symbol  sourceFile  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sourceFile,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  sourceFile,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	24	None	replace
336	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	24	None	replace
337	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variables,  exprRoot);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variables,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variables,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	55	None	replace
338	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variables,  sibling);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variables,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  exprRoot,  variables,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	55	None	replace
339	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable);  [CE]  cannot  find  symbol  v2  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(v2,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  v2	46	None	replace
340	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(v,    sibling,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	65	None	replace
341	[BUG]  [BUGGY]  Node  state  =  sibling.getFirstChild(),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getFirstChild(),  variable;  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getFirstChild(),  variable;	  Node    state    =    sibling.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	11	None	replace
342	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    n);    	non-compiled	[CE]  cannot  find  symbol  	72	None	replace
343	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
344	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
345	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  exprRoot);  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  test,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  test	19	None	replace
346	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  exprRoot,  sibling);  [CE]  cannot  find  symbol  label  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(exprRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  label	56	None	replace
347	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot,  n);  [CE]  cannot  find  symbol  v  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    n);    	non-compiled	[CE]  cannot  find  symbol  v	3	None	replace
348	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  n);  [CE]  cannot  find  symbol  label  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  exprRoot,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    n);    	non-compiled	[CE]  cannot  find  symbol  label	3	None	replace
349	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  true,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
350	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  exprRoot,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
351	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variable,  n,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	45	None	replace
352	[BUG]  [BUGGY]  Node  state  =  sibling.getNext()  &&  variable.equals(sibling.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getNext()  &&  variable.equals(sibling.getString());  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getNext()  &&  variable.equals(sibling.getString());	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	14	None	replace
353	[BUG]  [BUGGY]  Node  state  =  sibling.getNext()  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getNext()  &&  variable.equals(n.getString());  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getNext()  &&  variable.equals(n.getString());	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	14	None	replace
354	[BUG]  [BUGGY]  Node  state  =  sibling.getParent();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.getParent();	  Node    state    =    sibling.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	14	None	replace
355	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	79	None	replace
356	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(declaration,  sibling,  variable);  [CE]  cannot  find  symbol  declaration  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(declaration,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(declaration,  sibling,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  declaration	52	None	replace
357	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dividual,  sibling,  variable);  [CE]  cannot  find  symbol  dividual  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dividual,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dividual,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dividual	22	None	replace
358	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  variable,  sibling);  [CE]  cannot  find  symbol  dialog  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dialog	22	None	replace
359	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	37	None	replace
360	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable,  VAR);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	42	None	replace
361	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	24	None	replace
362	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test,  variable,  n);  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  test,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  test	24	None	replace
363	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	24	None	replace
364	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DEAD);  [CE]  cannot  find  symbol  DEAD  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DEAD);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  DEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(desc,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  DEAD	57	None	replace
365	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  def);  [CE]  cannot  find  symbol  def  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  def);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  def);	  VariableLiveness    state    =    isVariableReadBeforeKill(desc,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  def	57	None	replace
366	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(v,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	47	None	replace
367	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable,  null);  [CE]  cannot  find  symbol  module  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  module	82	None	replace
368	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null,  exprRoot);  [CE]  cannot  find  symbol  module  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    module,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  module	82	None	replace
369	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  expr);  [CE]  cannot  find  symbol  expr  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  expr);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  expr);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  expr	8	None	replace
370	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  test);  [CE]  cannot  find  symbol  test  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  test);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  test);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  test	8	None	replace
371	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(via,  sibling,  variable);  [CE]  cannot  find  symbol  via  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(via,  sibling,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(via,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  via	5	None	replace
372	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live);  [CE]  cannot  find  symbol  live  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  live	84	None	replace
373	[BUG]  [BUGGY]  VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  siblings  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  siblings.isVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  siblings	84	None	replace
374	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  state);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  exprRoot,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
375	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
376	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	78	None	replace
377	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  test,  liveness);  [CE]  cannot  find  symbol  test  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  test,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  test,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    sibling,    variable,    exprRoot,    liveness);    	non-compiled	[CE]  cannot  find  symbol  test	78	None	replace
378	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  VAR);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  null,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VAR	27	None	replace
379	[BUG]  [BUGGY]  Node  state  =  Sibling.getFirstChild();  [CE]  cannot  find  symbol  Sibling  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  Sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  Sibling.getFirstChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  Sibling	12	None	replace
380	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  null,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  null,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  null,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
381	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot,  variable);  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	51	None	replace
382	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variables,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
383	[BUG]  [BUGGY]  Node  state  =  sibling.removeFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Node  state  =  sibling.removeFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Node  state  =  sibling.removeFirstChild();	  Node    state    =    sibling.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	13	None	replace
384	[BUG]  [BUGGY]  Predicate  sibling  =(Predicate)n.getParent();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicate  sibling  =(Predicate)n.getParent();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicate  sibling  =(Predicate)n.getParent();	  Predicate    state    =(Predicate)n.getParent();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	15	None	replace
385	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  findLiveVariablesAnalysis(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  LiveVariablesAnalysis  liveness  =  findLiveVariablesAnalysis(n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	LiveVariablesAnalysis  liveness  =  findLiveVariablesAnalysis(n,  exprRoot,  variable);	  LiveVariablesAnalysis    liveness    =    getLiveVariablesAnalysis(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
386	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	38	None	replace
387	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	38	None	replace
388	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  writer);  [CE]  cannot  find  symbol  writer  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  writer);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable,  writer);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(v,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  writer	63	None	replace
389	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  variables,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    n);    	non-compiled	[CE]  cannot  find  symbol  	72	None	replace
390	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DUP,  n);  [CE]  cannot  find  symbol  DUP  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DUP,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  DUP,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variables,    n);    	non-compiled	[CE]  cannot  find  symbol  DUP	72	None	replace
391	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  true);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  n,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	75	None	replace
392	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	60	None	replace
393	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  sibling);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	60	None	replace
394	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  VAR,  variable);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  VAR,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  n,  VAR,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(label,    n,    sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	60	None	replace
395	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  variable,  sibling);  [CE]  cannot  find  symbol  dialog  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dialog	1	None	replace
396	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  writer);  [CE]  cannot  find  symbol  writer  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  writer);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  writer);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  writer	45	None	replace
397	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  label  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(label,  sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  label	50	None	replace
398	[BUG]  [BUGGY]  PredicatesAssignment  state  =  sibling.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  PredicatesAssignment  state  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	PredicatesAssignment  state  =  sibling.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
399	[BUG]  [BUGGY]  Predicates.checkState(sibling.getFirstChild()  ==  null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicates.checkState(sibling.getFirstChild()  ==  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicates.checkState(sibling.getFirstChild()  ==  null);	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
400	[BUG]  [BUGGY]  Predicates.checkState(sibling.getFirstChild()!=  null);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  Predicates.checkState(sibling.getFirstChild()!=  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	Predicates.checkState(sibling.getFirstChild()!=  null);	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
401	[BUG]  [BUGGY]  PredicatesAnalysis  state  =  sibling.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  PredicatesAnalysis  state  =  sibling.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	PredicatesAnalysis  state  =  sibling.getFirstChild();	  Predicate    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
402	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
403	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null,  liveness);  [CE]  cannot  find  symbol  testRoot  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  testRoot,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  testRoot	83	None	replace
404	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  sibling);  [CE]  cannot  find  symbol  dialog  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  n,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dialog	7	None	replace
405	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	compilable	  [FE]  RuntimeException  	7	61	replace
406	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling);    	compilable	  [FE]  RuntimeException  	7	61	replace
407	[BUG]  [BUGGY]  State  state  =  sep.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  sep.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  sep.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
408	[BUG]  [BUGGY]  State  state  =  SHORT.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  State  state  =  SHORT.getFirstChild();  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	State  state  =  SHORT.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
409	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  variable);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	46	None	replace
410	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variables);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  n,  exprRoot,  variables);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    exprRoot,    variables);    	non-compiled	[CE]  cannot  find  symbol  	46	None	replace
411	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  test,  variable);  [CE]  cannot  find  symbol  test  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  test,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  test,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    module,    variable);    	non-compiled	[CE]  cannot  find  symbol  test	77	None	replace
412	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  variable,  sibling);  [CE]  cannot  find  symbol  i  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(i,  variable,  sibling);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  i	52	None	replace
413	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    test);    	non-compiled	[CE]  cannot  find  symbol  HEAD	29	None	replace
414	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  RETURN);  [CE]  cannot  find  symbol  RETURN  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  RETURN);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  RETURN);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    test);    	non-compiled	[CE]  cannot  find  symbol  RETURN	29	None	replace
415	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  STILL_LIVE);  [CE]  cannot  find  symbol  STILL_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  STILL_LIVE);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  STILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  STILL_LIVE	74	None	replace
416	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
417	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
418	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	36	None	replace
419	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  exprRoot,  sibling);  [CE]  cannot  find  symbol  dialog  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dialog,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dialog	22	None	replace
420	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dib,  exprRoot,  sibling);  [CE]  cannot  find  symbol  dib  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(dib,  exprRoot,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(dib,  exprRoot,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(descrRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  dib	22	None	replace
421	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  READ);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VAR_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	30	None	replace
422	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_DEAD);  [CE]  cannot  find  symbol  VAR_DEAD  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_DEAD);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR_DEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    VAR_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_DEAD	30	None	replace
423	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  module,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  module,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	39	None	replace
424	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  test,  variable);  [CE]  cannot  find  symbol  test  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  test,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  test,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  cannot  find  symbol  test	39	None	replace
425	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  switch(variable));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  switch(variable));  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  exprRoot,  switch(variable));	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
426	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variables,  exprRoot);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variables,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variables,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	59	None	replace
427	[BUG]  [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(live);  [CE]  cannot  find  symbol  live  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(live);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(live);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  live	69	None	replace
428	[BUG]  [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(sibling);  [CE]  cannot  find  symbol  siblings  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  siblings.getVariableStillLiveWithinExpression(sibling);	  VariableLiveness    state    =    liveness.getVariableStillLiveWithinExpression(sibling);    	non-compiled	[CE]  cannot  find  symbol  siblings	69	None	replace
429	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  null,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	23	None	replace
430	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  exprRoot);  [CE]  cannot  find  symbol  module  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  module,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(i,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  module	19	None	replace
431	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
432	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  sibling,  variable,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	34	None	replace
433	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot,  null);  [CE]  cannot  find  symbol  label  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot,  null);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(label,  sibling,  variable,  exprRoot,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable,    exprRoot,    null);    	non-compiled	[CE]  cannot  find  symbol  label	34	None	replace
434	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  exprRoot);  [CE]  cannot  find  symbol  viable  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(viable,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(label,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  viable	48	None	replace
435	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variant,  sibling,  exprRoot);  [CE]  cannot  find  symbol  variant  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(variant,  sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(variant,  sibling,  exprRoot);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(label,    sibling,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  variant	48	None	replace
436	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  n);  [CE]  cannot  find  symbol  module  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  module,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    n);    	non-compiled	[CE]  cannot  find  symbol  module	3	None	replace
437	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
438	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  expr);  [CE]  cannot  find  symbol  expr  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  expr);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  expr);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  expr	9	None	replace
439	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exponent);  [CE]  cannot  find  symbol  exponent  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exponent);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  exponent);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  exponent	9	None	replace
440	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  variable,  sibling);  [CE]  cannot  find  symbol  d  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(d,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    exprRoot,    sibling);    	non-compiled	[CE]  cannot  find  symbol  d	6	None	replace
441	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD,  liveness);  [CE]  cannot  find  symbol  HEAD  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  HEAD,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    liveness);    	non-compiled	[CE]  cannot  find  symbol  HEAD	28	None	replace
442	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  liveness);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VARIABLE_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	28	None	replace
443	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR,  liveness);  [CE]  cannot  find  symbol  VAR  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR,  liveness);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable,  VAR,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    exprRoot,    variable,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR	28	None	replace
444	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  sibling,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  sibling,  exprRoot,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(n,    sibling,    exprRoot);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	43	None	replace
445	[BUG]  [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(live,  exprRoot);  [CE]  cannot  find  symbol  live  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(live,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  n.isVariableStillLiveWithinExpression(live,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  live	86	None	replace
446	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  liveness.isVariableStillLiveWithinExpression(sibling,  exprRoot);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
447	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  exprRoot);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  sibling,  variable,  exprRoot,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    sibling,    variable,    exprRoot);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
448	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  variable,  sibling);  [CE]  cannot  find  symbol  desc  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  variable,  sibling);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(desc,  exprRoot,  variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(exprRoot,    variable,    sibling);    	non-compiled	[CE]  cannot  find  symbol  desc	56	None	replace
449	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live,  variable);  [CE]  cannot  find  symbol  live  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(live,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  live	85	None	replace
450	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v2,  variable);  [CE]  cannot  find  symbol  v2  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v2,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(v2,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  v2	85	None	replace
451	[BUG]  [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(viod,  variable);  [CE]  cannot  find  symbol  viod  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(viod,  variable);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  sibling.isVariableStillLiveWithinExpression(viod,  variable);	  VariableLiveness    state    =    liveness.isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  viod	85	None	replace
452	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable,  n);  [CE]  cannot  find  symbol  module  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  module,  variable,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  module	53	None	replace
453	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {      [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  n);  [BUGGY]        if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	296	296	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variables,  n);	  VariableLiveness    state    =    isVariableStillLiveWithinExpression(sibling,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
