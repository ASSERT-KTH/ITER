bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1);    	non-compiled	[CE]  	19	None	replace
2	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1);	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1);    	non-compiled	[CE]  	19	None	replace
3	[BUG]  [BUGGY]  sumwq  +=  w;  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  +=  w;  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  +=  w;	  sumwq    +=    w    *    2;    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  sumwq  =  Math.max(sumw,  Math.abs(w));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  =  Math.max(sumw,  Math.abs(w));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  =  Math.max(sumw,  Math.abs(w));	  sumwq    =    Math.max(sumwq,    Math.abs(w));    	non-compiled	[CE]  	14	None	replace
5	[BUG]  [BUGGY]  sumwq  =  Math.max(sumw,  Math.abs(w  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  =  Math.max(sumw,  Math.abs(w  +  1));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  =  Math.max(sumw,  Math.abs(w  +  1));	  sumwq    =    Math.max(sumwq,    Math.abs(w));    	non-compiled	[CE]  	14	None	replace
6	[BUG]  [BUGGY]  sumw  +=  weights.getEntry(i,  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumw  +=  weights.getEntry(i,  1);  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumw  +=  weights.getEntry(i,  1);	  sumw    +=    weights.getEntry(i,    0);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  w)/  (dimension  *  1)));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  w)/  (dimension  *  1)));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  w)/  (dimension  *  1)));	  Math.max(0,    Math.sqrt((    sumwq    -    w)/    (dimension    +    1)));    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  *  w)/  (dimension  +  1)));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  *  w)/  (dimension  +  1)));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  *  w)/  (dimension  +  1)));	  Math.max(0,    Math.sqrt((    sumwq    -    w)/    (dimension    +    1)));    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  sumwq  +=  weights.getEntry(i,  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  +=  weights.getEntry(i,  1);  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  +=  weights.getEntry(i,  1);	  sumwq    +=    weights.getEntry(i,    0);    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));	  Math.max(0,    Math.sqrt((    w    *    w)/(dimension    +    w)));    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  w  *  w)/(sumwq  +  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  w  *  w)/(sumwq  +  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  w  *  w)/(sumwq  +  w)));	  Math.max(0,    Math.sqrt((    w    *    w)/(dimension    +    w)));    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  *  sumw)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  *  sumw)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  *  sumw)));	  double    wq    =    Math.max(0,    Math.sqrt((    w    -    w)/(dimension    *    w)));    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	double  wq  =  Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));	  double    wq    =    Math.max(0,    Math.sqrt((    w    -    w)/(dimension    *    w)));    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumw  -  w)/(dimension  *  w)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumw  -  w)/(dimension  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumw  -  w)/(dimension  *  w)));	  Math.max(0,    Math.sqrt((    w    -    w)/(dimension    *    w)));    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  sumw  =  Math.max(sumw,  Math.abs(w));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumw  =  Math.max(sumw,  Math.abs(w));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumw  =  Math.max(sumw,  Math.abs(w));	  if(sumwq    >    0)    {    sumw    =    Math.max(sumw,    Math.abs(w));    }    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  sumw  =  Math.min(sumw,  Math.abs(w));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumw  =  Math.min(sumw,  Math.abs(w));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumw  =  Math.min(sumw,  Math.abs(w));	  if(sumwq    >    0)    {    sumw    =    Math.max(sumw,    Math.abs(w));    }    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumw  -  w)/(sumwq  *  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumw  -  w)/(sumwq  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumw  -  w)/(sumwq  *  w)));	  Math.max(0,    Math.sqrt((    w    -    w)/(sumwq    +    w)));    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  w  -  w)/(sumwq  *  w)));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  w  -  w)/(sumwq  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  w  -  w)/(sumwq  *  w)));	  Math.max(0,    Math.sqrt((    w    -    w)/(sumwq    +    w)));    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(1,  Math.sqrt((  sumwq  -  wq))  *  Math.max(1,  Math.sqrt((  sumwq  -  wq))  -  1));	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1));    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(dimension  *  w)));	  double    wq    =    Math.max(0,    Math.sqrt((    w    *    w)/(dimension    +    w)));    	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(sumw  +  w)));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(sumw  +  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	double  wq  =  Math.max(0,  Math.sqrt((  w  *  w)/(sumw  +  w)));	  double    wq    =    Math.max(0,    Math.sqrt((    w    *    w)/(dimension    +    w)));    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  sumwq  +=  w  /  3;  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  +=  w  /  3;  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  +=  w  /  3;	  sumwq    +=    w    /    i;    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  sumwq  =  Math.max(sumwq,  Math.abs(w  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  =  Math.max(sumwq,  Math.abs(w  -  1));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  =  Math.max(sumwq,  Math.abs(w  -  1));	  sumwq    =    Math.max(sumwq,    Math.abs(w));    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  sumwq  =  Math.max(sumwq,  Math.abs(w  +  1));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  sumwq  =  Math.max(sumwq,  Math.abs(w  +  1));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  =  Math.max(sumwq,  Math.abs(w  +  1));	  sumwq    =    Math.max(sumwq,    Math.abs(w));    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  w  -  1)/(dimension  *  w)));	  Math.max(0,    Math.sqrt((    w    -    w)/(dimension    *    w)));    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  *  wq))*  Math.max(0,  Math.sqrt((  sumwq  -  wq))  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  *  wq))*  Math.max(0,  Math.sqrt((  sumwq  -  wq))  -  1);  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  *  wq))*  Math.max(0,  Math.sqrt((  sumwq  -  wq))  -  1);	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1);    	non-compiled	[CE]  	19	None	replace
27	[BUG]  [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  sumw  *  w)/(dimension  +  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  double  wq  =  Math.max(0,  Math.sqrt((  sumw  *  w)/(dimension  +  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	double  wq  =  Math.max(0,  Math.sqrt((  sumw  *  w)/(dimension  +  w)));	  double    wq    =    Math.max(0,    Math.sqrt((    w    *    w)/(dimension    +    w)));    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  Sumw  =  Math.max(sumw,  Math.abs(w));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Sumw  =  Math.max(sumw,  Math.abs(w));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Sumw  =  Math.max(sumw,  Math.abs(w));	  if(sumwq    >    0)    {    sumw    =    Math.max(sumw,    Math.abs(w));    }    	non-compiled	[CE]  	15	None	replace
29	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1);  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1);	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1);    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  1);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  1);  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  1);	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1);    	non-compiled	[CE]  	19	None	replace
31	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  wq))  *  Math.max(0,  Math.sqrt((  sumwq  /  wq))  -  1));	  Math.max(0,    Math.sqrt((    sumwq    -    wq))    *    Math.max(0,    Math.sqrt((    sumwq    -    wq))    -    1));    	non-compiled	[CE]  	18	None	replace
32	[BUG]  [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  w)/(sumwq  *  w)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(0,  Math.sqrt((  sumwq  -  w)/(sumwq  *  w)));  [BUGGY]      sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(0,  Math.sqrt((  sumwq  -  w)/(sumwq  *  w)));	  Math.max(0,    Math.sqrt((    w    -    w)/(sumwq    +    w)));    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  Math.max(sumw,  Math.abs(w));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]        mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;      [BUGGY]  Math.max(sumw,  Math.abs(w));  [BUGGY]      }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	Math.max(sumw,  Math.abs(w));	  if(sumwq    >    0)    {    sumw    =    Math.max(sumw,    Math.abs(w));    }    	non-compiled	[CE]  	15	None	replace
