bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sumwq  +=  w  /  w;  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]  sumwq  +=  w  /  w;  [BUGGY]  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  +=  w  /  w;	sumwq  +=  w  *  w;  	non-compiled	[CE]  	79	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    [BUGGY]  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	  	sumwq  +=  w  *  w;  	non-compiled	[CE]  	79	None	replace
3	[BUG]  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  sumwq  +=  w  *  w;  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  sumwq  +=  w  *  w;  [BUGGY]  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	    double  wq  =  weights.getEntry(i,  0);  sumwq  +=  w  *  w;		non-compiled	[CE]  	80	None	add
4	[BUG]  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  [BUGGY]  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	    double  wq  =  weights.getEntry(i,  0);		non-compiled	[CE]  	80	None	add
5	[BUG]  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  sumw  +=  w  *  w;  [CE]  [FE]        java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    double  wq  =  weights.getEntry(i,  0);  sumw  +=  w  *  w;  [BUGGY]  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	    double  wq  =  weights.getEntry(i,  0);  sumw  +=  w  *  w;		non-compiled	[CE]  	80	None	add
6	[BUG]  [BUGGY]    Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));  [BUGGY]  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	    Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));		non-compiled	[CE]  	80	None	add
7	[BUG]  [BUGGY]  sumwq  +=  w  *  i;  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]  sumwq  +=  w  *  i;  [BUGGY]  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	sumwq  +=  w  *  i;	sumwq  +=  w  *  w;  	non-compiled	[CE]  	79	None	replace
8	[BUG]  [BUGGY]    double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]    mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  [BUGGY]    double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));  [BUGGY]  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	596	596	1	replace	    double  wq  =  Math.max(0,  Math.sqrt((  w  -  w)/(dimension  +  w)));		non-compiled	[CE]  	80	None	add
