bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  cs  =  insigma.initialize(cc,  damps);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.initialize(cc,  damps);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.initialize(cc,  damps);	      cs    =    insigma.initialize(cc);    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  cs  =  insigma.initialize(ccov1);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.initialize(ccov1);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.initialize(ccov1);	      cs    =    insigma.initialize(cc);    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1,    ccov1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));	  ccovmu    =    Math.min(1,    ccov1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply(1.0);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply(1.0);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply(1.0);	      cs    =    insigma.scalarMultiply(insigma.scalarMultiply(1.0));    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply(1.0f);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply(1.0f);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply(1.0f);	      cs    =    insigma.scalarMultiply(insigma.scalarMultiply(1.0));    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1,  1  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    2.0    *    (dimension    -    2.0    +    1.    *    /    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    2.0    *    (dimension    -    2.0    +    1.    *    /    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations())));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations())));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations())));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations())));    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(mueff,  getMaxEvaluations())));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(mueff,  getMaxEvaluations())));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-2  +  Math.min(mueff,  getMaxEvaluations())));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations())));    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  cs  =  insigma.initializeCMA(cc,  damps);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.initializeCMA(cc,  damps);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.initializeCMA(cc,  damps);	      cs    =    insigma.initializeCMA(cc);    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  /  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1.    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  0.  *  (dimension  -  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  0.  *  (dimension  -  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  0.  *  (dimension  -  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1.    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply(1.0  /  sigma);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply(1.0  /  sigma);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply(1.0  /  sigma);	      cs    =    insigma.scalarMultiply(insigma.scalarMultiply(1.0));    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations())));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations())));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-6  +  Math.min(dimension,  getMaxEvaluations())));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations())));    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations())));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations())));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations())));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations())));    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));	  ccovmu    =    Math.min(1,    ccov1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.scalarMultiply((  e-2  +  Math.min(dimension,  getMaxEvaluations()  /  lambda)));	      cs    =    insigma.scalarMultiply((    e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda)))  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda)))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-2  +  Math.min(minimumIterations,  getMaxEvaluations()  /  lambda)))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  1.  *  (dimension  /  2.0  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1.    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  cs  =  insigma.initializeScalarMultiply(cc);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.initializeScalarMultiply(cc);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.initializeScalarMultiply(cc);	      cs    =    insigma.initializeCMA(cc);    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
38	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)))    	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.5  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));	  ccovmu    =    Math.min(1,    ccov1    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	13	None	replace
40	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.3  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.3  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1,  ccov1  *  (dimension  -  1.3  +  1.  *  mueff)/  ((  dimension  +  2.0)*  (dimension  +  1.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    1.    *    (dimension    -    2.0    +    1.    *    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  cs  =  insigma.initializeCMA(cc,  cs);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  insigma.initializeCMA(cc,  cs);  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  insigma.initializeCMA(cc,  cs);	      cs    =    insigma.initializeCMA(cc);    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(mueff  -  1,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]      cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);    [BUGGY]  ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));  [BUGGY]    ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	611	612	1	replace	ccovmu  =  Math.min(1  -  ccov1,  2.0  *  (dimension  /  2.0  +  1.  *  /  mueff)/  ((  dimension  +  2.0)*  (dimension  +  2.0)+  mueff));	  ccovmu    =    Math.min(1    -    ccov1,    2.0    *    (dimension    -    2.0    +    1.    *    /    mueff)/    ((    dimension    +    2.0)*    (dimension    +    2.0)+    mueff));    	non-compiled	[CE]  	6	None	replace
