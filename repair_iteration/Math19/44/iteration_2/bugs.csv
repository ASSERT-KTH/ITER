bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  0.5)/  (dimension  +  0.5))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  0.5)/  (dimension  +  0.5))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  0.5)/  (dimension  +  0.5))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	12	None	replace
3	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  -  1.));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  -  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  -  1.));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mieff  -  1.)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mieff  -  1.)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mieff  -  1.)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  1.5))  *  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  1.5))  *  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  1.5))  *  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  2.0)*  Math.max(1.0,  1.  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  2.0)*  Math.max(1.0,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  2.0)*  Math.max(1.0,  1.  -  dimension  /	  damps    =    (1.    *    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  cs)  *  Math.max(1.0,  1.  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  cs)  *  Math.max(1.0,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  *  cs)  *  Math.max(1.0,  1.  -  dimension  /	  damps    =    (1.    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    cs)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.)*    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0))  *  Math.max(1.0,  1.  -  dimension  /  (dimension  +  2.0)	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.)*    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  2.0)*  Math.max(1.0,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  2.0)*  Math.max(1.0,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  2.0)*  Math.max(1.0,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))-    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1  -  dimension)/  (dimension  +  1))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1  -  dimension)/  (dimension  +  1))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1  -  dimension)/  (dimension  +  1))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))-    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    cs)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    cs)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  2.0))-  1.));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  2.0))-  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  2.0))-  1.));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda))	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda))    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))-  1.));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))-  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.5)/  (dimension  +  1.))-  1.));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.))  -  1.)*  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-1  +  Math.min(maxIterations,  getMaxEvaluations	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-2  +  Math.min(maxIterations,  getMaxEvaluations	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.0)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))-    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))-    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.0  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.0  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  2.0)*  Math.max(0.3,  1.0  -  dimension  /	  damps    =    (1.    *    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  *  2.0)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    2.0)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	1	None	replace
41	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  *  Math.max(0.3,  1.  -  dimension  /  (dimension  +  2.0)));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)));    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(1.0,  1.0)*  Math.max(1.0,  1.0  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)));	      cs    =    Math.max(0,    Math.sqrt((    dimension    -    0.5)/    (dimension    +    0.5))    *    Math.max(1.0,    1.0)*    Math.max(1.0,    1.0    -    dimension    /    (1e-6    +    Math.min(maxIterations,    getMaxEvaluations()    /    lambda)));    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))-  1.));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))-  1.));  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))-  1.));	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.));    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  2.0))  *  cs)*  Math.max(0.3,  1.  -  dimension  /	  damps    =    (1.    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    *    cs)*    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0)  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0)  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0)	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.)*    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension  [BUGGY]    damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /    (dimension  +  1.))  -  1.))  *        Math.max(0.3,  1.  -  dimension  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  1.0))  -  1.)*  Math.max(0,  1.0  -  dimension  /  (dimension  +  2.0))  *  Math.max(0,  1.0  -  dimension  /  (dimension	      cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.)/    (dimension    +    1.))    -    1.)*    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0))    *    Math.max(0.3,    1.    -    dimension    /    (dimension    +    2.0)    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(0,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.3))  -  1.))  *  Math.max(0.3,  1.0  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);    [BUGGY]  damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /  [BUGGY]    (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	605	607	1	replace	damps  =  (1.  +  2.0  *  Math.max(1,  Math.sqrt((  dimension  -  1.)/  (dimension  +  1.0))-  1.))  *  Math.max(0.3,  1.0  -  dimension  /	  damps    =    (1.    +    2.0    *    Math.max(0,    Math.sqrt((    dimension    -    1.)/    (dimension    +    1.))    -    1.))    *    Math.max(0.3,    1.    -    dimension    /    	non-compiled	[CE]  	5	None	replace
