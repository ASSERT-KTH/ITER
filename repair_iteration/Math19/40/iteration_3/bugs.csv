bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  /  sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  /  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.0  /  sumwq);	  weights    =    sumwq.scalarMultiply(1.0    /    weights);    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  /  sumw);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  /  sumw);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.0  /  sumw);	  weights    =    sumwq.scalarMultiply(1.0    /    weights);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  sumw);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  sumw);	  sumw    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  Math.sqrt((  sumwq  /  1)).scalarAdd(sumw);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  /  1)).scalarAdd(sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  /  1)).scalarAdd(sumw);	  Math.sqrt((    sumwq    -    1)).scalarAdd(sumw);    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumw);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumw);	  Math.sqrt((    sumwq    -    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumwq);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumwq);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  -  1)).scalarMultiply(-1.).scalarAdd(sumwq);	  Math.sqrt((    sumwq    -    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));	  sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    2)).scalarAdd(logMu2));    	non-compiled	[CE]  	26	None	replace
8	[BUG]  [BUGGY]  Math.max(0.0,  Math.abs(sumwq  /  1));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.max(0.0,  Math.abs(sumwq  /  1));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.max(0.0,  Math.abs(sumwq  /  1));	  Math.max(0.0,    Math.abs(sumwq    -    1));    	non-compiled	[CE]  	17	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }	  }    	non-compiled	[CE]  	20	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  weights.length;  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  for(int  i  =  0;  i  <  weights.length;  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	for(int  i  =  0;  i  <  weights.length;  i++)  {  sumwq  +=  Math.max(0.0,  sumw);  }	  }    	non-compiled	[CE]  	20	None	replace
11	[BUG]  [BUGGY]  sumw  =  Math.min(0.0,  sumwq  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.min(0.0,  sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.min(0.0,  sumwq  -  1);	  sumw    =    Math.min(0.0,    sumwq);    	non-compiled	[CE]  	31	None	replace
12	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));	  sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  mutation  =  Math.abs(w);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  mutation  =  Math.abs(w);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	mutation  =  Math.abs(w);	  mutation    =    Math.abs(sumwq);    	non-compiled	[CE]  	23	None	replace
14	[BUG]  [BUGGY]  mutation  =  Math.abs(sumwq  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  mutation  =  Math.abs(sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	mutation  =  Math.abs(sumwq  -  1);	  mutation    =    Math.abs(sumwq);    	non-compiled	[CE]  	23	None	replace
15	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.  *  sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.  *  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.  *  sumwq);	  weights    =    sumwq.scalarMultiply(1.    *    weights);    	non-compiled	[CE]  	27	None	replace
16	[BUG]  [BUGGY]  sumw  =  Math.abs(sumwq  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.abs(sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.abs(sumwq  -  1);	  sumw    =    Math.abs(sumwq);    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(10.0  *  sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(10.0  *  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(10.0  *  sumwq);	  weights    =    weights.scalarMultiply(10.0    *    sumw);    	non-compiled	[CE]  	19	None	replace
18	[BUG]  [BUGGY]  Math  sumw  =  Math.max(0.0,  sumwq  /  2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math  sumw  =  Math.max(0.0,  sumwq  /  2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math  sumw  =  Math.max(0.0,  sumwq  /  2);	  Math    sumw    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	22	None	replace
19	[BUG]  [BUGGY]  Math  sumw  =  Math.max(0.0,  sumw);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math  sumw  =  Math.max(0.0,  sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math  sumw  =  Math.max(0.0,  sumw);	  Math    sumw    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  +  sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  +  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.0  +  sumwq);	  weights    =    sumwq.scalarMultiply(1.    +    sumwq);    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  bucket  =  Math.abs(sumwq  -  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.abs(sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.abs(sumwq  -  1);	  bucket    =    Math.abs(sumwq);    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  bucket  =  Math.abs(sumw);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.abs(sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.abs(sumw);	  bucket    =    Math.abs(sumwq);    	non-compiled	[CE]  	14	None	replace
23	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(0,  sumwq);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(0,  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(0,  sumwq);	  weights    =    weights.scalarMultiply(0.    +    sumw);    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(0,  w);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(0,  w);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(0,  w);	  weights    =    weights.scalarMultiply(0.    +    sumw);    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  +  w);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.0  +  w);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.0  +  w);	  weights    =    sumwq.scalarMultiply(1.    +    w);    	non-compiled	[CE]  	28	None	replace
26	[BUG]  [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));	  bucket    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));	  bucket    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1  +  weights);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1  +  weights);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1  +  weights);	  weights    =    weights.scalarMultiply(1    +    sumwq);    	non-compiled	[CE]  	25	None	replace
29	[BUG]  [BUGGY]  Sumw  =  Math.abs(sumw);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Sumw  =  Math.abs(sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Sumw  =  Math.abs(sumw);	  Sumw    =    Math.abs(sumwq);    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  Sumw  =  Math.abs(sumwq  -  1);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Sumw  =  Math.abs(sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Sumw  =  Math.abs(sumwq  -  1);	  Sumw    =    Math.abs(sumwq);    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  bucket  =  Math.max(0.0,  sumw);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.max(0.0,  sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.max(0.0,  sumw);	  bucket    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  /  sumwq);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  /  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(10.0  /  sumwq);	  weights    =    sumwq.scalarMultiply(10.0    /    weights);    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  /  sumw);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  /  sumw);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(10.0  /  sumw);	  weights    =    sumwq.scalarMultiply(10.0    /    weights);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  weights  =  sumw  *  weights.scalarMultiply(1.  /  sumwq);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumw  *  weights.scalarMultiply(1.  /  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumw  *  weights.scalarMultiply(1.  /  sumwq);	  weights    =    sumw    /    weights.scalarMultiply(1.    /    sumwq);    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  sumw  =  Math.abs(w);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.abs(w);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.abs(w);	  sumw    =    Math.abs(sumw);    	non-compiled	[CE]  	29	None	replace
36	[BUG]  [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));	  Sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	21	None	replace
37	[BUG]  [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));	  Sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	21	None	replace
38	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.  +  weights);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.  +  weights);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.  +  weights);	  weights    =    weights.scalarMultiply(1.    +    sumwq);    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarAdd(sumwq));	  Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	30	None	replace
40	[BUG]  [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.).scalarAdd(logMu2));	  Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	30	None	replace
41	[BUG]  [BUGGY]  Math.sqrt((  sumw  -  1)).scalarAdd(logMu2);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumw  -  1)).scalarAdd(logMu2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumw  -  1)).scalarAdd(logMu2);	  Math.sqrt((    sumwq    -    1)).scalarAdd(sumwq);    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(0.  +  sumwq);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(0.  +  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(0.  +  sumwq);	  weights    =    weights.scalarMultiply(0.    +    sumw);    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(0.0  /  weights);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(0.0  /  weights);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(0.0  /  weights);	  weights    =    sumwq.scalarMultiply(1.0    /    weights);    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  sumwq  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  sumwq  -  1);	  sumw    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  Math.sqrt((  sumwq  *  1)).scalarAdd(sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  *  1)).scalarAdd(sumwq);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  *  1)).scalarAdd(sumwq);	  Math.sqrt((    sumwq    -    1)).scalarAdd(sumwq);    	non-compiled	[CE]  	33	None	replace
46	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));	  sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	3	None	replace
47	[BUG]  [BUGGY]  if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.getEntryCount();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.getEntryCount();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.getEntryCount();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }	  }    	non-compiled	[CE]  	20	None	replace
48	[BUG]  [BUGGY]  if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	if(sumwq  >  0)  {  for(int  i  =  0;  i  <  weights.size();  i++)  {  sumwq  +=  Math.max(0.0,  sumwq);  }	  }    	non-compiled	[CE]  	20	None	replace
49	[BUG]  [BUGGY]  weights  =  sumw  /  weights.scalarMultiply(1.  +  sumwq);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumw  /  weights.scalarMultiply(1.  +  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumw  /  weights.scalarMultiply(1.  +  sumwq);	  weights    =    sumw    /    weights.scalarMultiply(1.    /    sumwq);    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarMultiply(-1.));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarMultiply(-1.));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarMultiply(-1.));	  sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    2)).scalarAdd(logMu2));    	non-compiled	[CE]  	26	None	replace
51	[BUG]  [BUGGY]  bucket  =  Math.max(0.0,  sumwq  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.max(0.0,  sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.max(0.0,  sumwq  -  1);	  bucket    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  Math  sumw  =  Math.max(0.0,  sumwq  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math  sumw  =  Math.max(0.0,  sumwq  -  1);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math  sumw  =  Math.max(0.0,  sumwq  -  1);	  Math    sumw    =    Math.max(0.0,    sumwq);    	non-compiled	[CE]  	22	None	replace
53	[BUG]  [BUGGY]  sumw  =  Math.max(sumwq,  sumw);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(sumwq,  sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(sumwq,  sumw);	  sumw    =    Math.abs(sumw);    	non-compiled	[CE]  	29	None	replace
54	[BUG]  [BUGGY]  Math.max(0.5,  Math.abs(sumwq)/  Math.abs(1.0));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.max(0.5,  Math.abs(sumwq)/  Math.abs(1.0));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.max(0.5,  Math.abs(sumwq)/  Math.abs(1.0));	  Math.max(1.0,    Math.abs(sumwq)/    Math.abs(1.0));    	non-compiled	[CE]  	32	None	replace
55	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(0  +  sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(0  +  sumwq);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(0  +  sumwq);	  weights    =    weights.scalarMultiply(1    +    sumwq);    	non-compiled	[CE]  	25	None	replace
56	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(1.  +  sumwq  -  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(1.  +  sumwq  -  1);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(1.  +  sumwq  -  1);	  weights    =    weights.scalarMultiply(1.    +    sumwq);    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  Math.sqrt((  sumwq  *  1)).scalarAdd(sumw);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  *  1)).scalarAdd(sumw);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  *  1)).scalarAdd(sumw);	  Math.sqrt((    sumwq    -    1)).scalarAdd(sumw);    	non-compiled	[CE]  	12	None	replace
58	[BUG]  [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));	  bucket    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));	  Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	30	None	replace
60	[BUG]  [BUGGY]  sumw  =  Math.abs(sumwq  /  2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.abs(sumwq  /  2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.abs(sumwq  /  2);	  sumw    =    Math.abs(sumwq);    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  bucket  =  Math.abs(sumwq  /  2);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  bucket  =  Math.abs(sumwq  /  2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	bucket  =  Math.abs(sumwq  /  2);	  bucket    =    Math.abs(sumwq);    	non-compiled	[CE]  	14	None	replace
62	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(1  +  sumwq  -  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(1  +  sumwq  -  1);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(1  +  sumwq  -  1);	  weights    =    weights.scalarMultiply(1    +    sumwq);    	non-compiled	[CE]  	25	None	replace
63	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  *  weights);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(10.0  *  weights);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(10.0  *  weights);	  weights    =    sumwq.scalarMultiply(10.0    /    weights);    	non-compiled	[CE]  	6	None	replace
64	[BUG]  [BUGGY]  Math.sqrt((  sumwq  /  1)).scalarAdd(sumwq);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  /  1)).scalarAdd(sumwq);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  /  1)).scalarAdd(sumwq);	  Math.sqrt((    sumwq    -    1)).scalarAdd(sumwq);    	non-compiled	[CE]  	33	None	replace
65	[BUG]  [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  2)).scalarAdd(sumwq));	  sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    2)).scalarAdd(logMu2));    	non-compiled	[CE]  	26	None	replace
66	[BUG]  [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Sumw  =  Math.max(0.0,  Math.sqrt((  weights.getEntry(i,  1)).scalarMultiply(-1.));	  Sumw    =    Math.max(0.0,    Math.sqrt((    weights.getEntry(i,    1)).scalarAdd(logMu2));    	non-compiled	[CE]  	21	None	replace
67	[BUG]  [BUGGY]  weights  =  weights.scalarMultiply(0,  0);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  weights.scalarMultiply(0,  0);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  weights.scalarMultiply(0,  0);	  weights    =    weights.scalarMultiply(0.    +    sumw);    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  cs  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  cs  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	cs  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);	  }    	non-compiled	[CE]  	20	None	replace
69	[BUG]  [BUGGY]  cs  =  log(sequence(1,  w,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  cs  =  log(sequence(1,  w,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	cs  =  log(sequence(1,  w,  1)).scalarMultiply(-1.).scalarAdd(logMu2);	  }    	non-compiled	[CE]  	20	None	replace
70	[BUG]  [BUGGY]  weights  =  sumwq.scalarMultiply(1.  +  w  *  w);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  weights  =  sumwq.scalarMultiply(1.  +  w  *  w);  [BUGGY]      mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	weights  =  sumwq.scalarMultiply(1.  +  w  *  w);	  weights    =    sumwq.scalarMultiply(1.    +    w);    	non-compiled	[CE]  	28	None	replace
71	[BUG]  [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-2.).scalarAdd(logMu2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination  logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }      [BUGGY]  Math.sqrt((  sumwq  -  1)).scalarMultiply(-2.).scalarAdd(logMu2);  [BUGGY]      weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  cc  =  (4.  +  mueff  /  dimension)  /  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	598	598	1	replace	Math.sqrt((  sumwq  -  1)).scalarMultiply(-2.).scalarAdd(logMu2);	  Math.sqrt((    sumwq    -    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	13	None	replace
