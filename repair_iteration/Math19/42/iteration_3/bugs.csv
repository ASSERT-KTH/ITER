bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc  =(mueff  *  w_i)/  (dimension  +  3.  *  mueff  /  dimension);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(mueff  *  w_i)/  (dimension  +  3.  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(mueff  *  w_i)/  (dimension  +  3.  *  mueff  /  dimension);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    3.    *    mueff    /    dimension);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);	  =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    -    1.0))    *    Math.max(0.0,    1.0);    	non-compiled	[CE]  	25	None	replace
3	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  sumwq,  x_i);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  sumwq,  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  sumwq,  x_i);	  cs    =    Math.min(mueff    -    w_i,    sumwq);    	non-compiled	[CE]  	27	None	replace
4	[BUG]  [BUGGY]  (dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  (dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	(dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  -  1.)/  (dimension  +  2.0))  -  1.));	  (dimension    +    3.    *    Math.max(0,    Math.sqrt((mueff    -    1.)/    (dimension    +    2.0)));    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));	  cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    *    1.0)));    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  cc  =(mueff  +  2.0)/  (dimension  +  2.0  *  mueff  /  w_i);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(mueff  +  2.0)/  (dimension  +  2.0  *  mueff  /  w_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(mueff  +  2.0)/  (dimension  +  2.0  *  mueff  /  w_i);	  cc    =(mueff    +    2.0)/    (dimension    +    2.0    *    mueff    /    x_i);    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  size);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  size);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  size);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	26	None	replace
8	[BUG]  [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  w_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  w_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =  (4  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  w_i);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    4    *    mueff    /    x_i);    	non-compiled	[CE]  	22	None	replace
9	[BUG]  [BUGGY]  cs  =  Math.min(mueff  /  wq,  0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  /  wq,  0);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  /  wq,  0);	  cs    =    Math.min(mueff    -    wq,    0);    	non-compiled	[CE]  	38	None	replace
10	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  sumwq,  0);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  sumwq,  0);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  sumwq,  0);	  cs    =    Math.min(mueff    -    wq,    0);    	non-compiled	[CE]  	38	None	replace
11	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  *  1.0)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  *  1.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  *  1.0)));	  =    Math.max(0,    Math.sqrt((    w    -    1.0)/    (dimension    +    1.0)));    	non-compiled	[CE]  	40	None	replace
12	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);	  cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    0.);    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  w_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  w_i);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  w_i);	  cc    =(.    +    mueff    /    dimension)    /    (dimension    +    3.    *    mueff    /    x_i);    	non-compiled	[CE]  	31	None	replace
14	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  0.);	  cs    =    Math.max(0,    Math.sqrt((    dimensions    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    0.);    	non-compiled	[CE]  	29	None	replace
15	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  *  1.0)));	  =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    +    1.0)));    	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  dimension);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(0  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  dimension);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    4    *    mueff    /    dimension);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  (dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  /  2.0)/  (dimension  +  2.0)));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  (dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  /  2.0)/  (dimension  +  2.0)));  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	(dimension  +  3.  *  Math.max(0,  Math.sqrt((  mueff  /  2.0)/  (dimension  +  2.0)));	  (dimension    +    3.    *    Math.max(0,    Math.sqrt((mueff    -    2.0)/    (dimension    +    2.0)));    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);	  =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    -    1.0))    *    Math.max(0.0,    0.);    	non-compiled	[CE]  	15	None	replace
19	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  2.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  -  2.0));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  2.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  -  2.0));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  2.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  -  2.0));	  cc    =(.    +    mueff    /    dimension)/    (dimension    +    1.0    *    Math.max(1,    Math.sqrt((    mueff    -    1.0))    -    1.0));    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.	  cs    =    Math.max(0,    Math.sqrt((    dimensions    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    	non-compiled	[CE]  	34	None	replace
21	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.	  cs    =    Math.max(0,    Math.sqrt((    dimensions    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    	non-compiled	[CE]  	34	None	replace
22	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.3,  0.);	  =    Math.max(0,    Math.sqrt((    w    -    1.0)/    (dimension    -    1.0))    *    Math.max(0.0,    0.);    	non-compiled	[CE]  	41	None	replace
23	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  *  1.0)));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  *  1.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  *  1.0)));	  cs    =    Math.max(0,    Math.sqrt((    dimensions    -    1.0)/    (dimension    +    1.0)));    	non-compiled	[CE]  	35	None	replace
24	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  2.0)/  (dimension  -  2.0)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  dimension  -  2.0)/  (dimension  -  2.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  dimension  -  2.0)/  (dimension  -  2.0)));	  =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    -    1.0)));    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  cs  =  Math.min(mueff  /  w_i);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  /  w_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  /  w_i);	  cs    =    Math.min(mueff    -    w_i);    	non-compiled	[CE]  	28	None	replace
26	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  sumwq);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  sumwq);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  sumwq);	  cs    =    Math.min(mueff    -    w_i);    	non-compiled	[CE]  	28	None	replace
27	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);	  cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.0,    0.);    	non-compiled	[CE]  	23	None	replace
28	[BUG]  [BUGGY]  cc  =(dimension  *  mueff  /  mueff)/(dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(dimension  *  mueff  /  mueff)/(dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(dimension  *  mueff  /  mueff)/(dimension  +  2.0  *  mueff  /  dimension);	  cc    =(0.    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	32	None	replace
29	[BUG]  [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);	  cc    =(0.    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	32	None	replace
30	[BUG]  [BUGGY]  cc  =  (10.0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =  (10.0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =  (10.0  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  dimension);	  cc    =    (1.    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  1.	  cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    	non-compiled	[CE]  	20	None	replace
32	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.5,  1.	  cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    1.    	non-compiled	[CE]  	20	None	replace
33	[BUG]  [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =  (4  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  cc  =(mueff  *  w_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(mueff  *  w_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(mueff  *  w_i)/  (dimension  +  2.0  *  mueff  /  dimension);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  x_i,  sumwq);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  x_i,  sumwq);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  x_i,  sumwq);	  cs    =    Math.min(mueff    -    w_i,    sumwq);    	non-compiled	[CE]  	27	None	replace
36	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  w_i,  x_i);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  w_i,  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  w_i,  x_i);	  cs    =    Math.min(mueff    -    w_i,    sumwq);    	non-compiled	[CE]  	27	None	replace
37	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  w_i  -  1.0)/  (dimension  -  1.0)));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  w_i  -  1.0)/  (dimension  -  1.0)));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  w_i  -  1.0)/  (dimension  -  1.0)));	  =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    -    1.0)));    	non-compiled	[CE]  	10	None	replace
38	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(0,  Math.sqrt((  mueff  -  1.0))  *  1.0));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(0,  Math.sqrt((  mueff  -  1.0))  *  1.0));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(0,  Math.sqrt((  mueff  -  1.0))  *  1.0));	  cc    =(.    +    mueff    /    dimension)/    (dimension    +    1.0    *    Math.max(0,    Math.sqrt((    mueff    -    1.0))    -    1.0));    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  x_i)/  (dimension  +  3.  *  mueff  /  x_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  x_i)/  (dimension  +  3.  *  mueff  /  x_i);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  x_i)/  (dimension  +  3.  *  mueff  /  x_i);	  cc    =(.    +    mueff    /    dimension)    /    (dimension    +    3.    *    mueff    /    x_i);    	non-compiled	[CE]  	31	None	replace
40	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  2.0));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  2.0));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  2.0));	  cc    =(.    +    mueff    /    dimension)/    (dimension    +    1.0    *    Math.max(1,    Math.sqrt((    mueff    -    1.0))    -    2.0));    	non-compiled	[CE]  	19	None	replace
41	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  1.0));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  1.0));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(1,  Math.sqrt((  mueff  -  1.0))  *  1.0));	  cc    =(.    +    mueff    /    dimension)/    (dimension    +    1.0    *    Math.max(1,    Math.sqrt((    mueff    -    1.0))    -    1.0));    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  cc  =  (1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =  (1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =  (1  *  mueff  /  dimension)/  (dimension  +  2.0  *  mueff  /  x_i);	  cc    =    (1.    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	24	None	replace
43	[BUG]  [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  =  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	=  Math.max(0,  Math.sqrt((  w  -  1.0)/  (dimension  -  1.0))  *  Math.max(0.0,  1.0);	  =    Math.max(0,    Math.sqrt((    w    -    1.0)/    (dimension    -    1.0))    *    Math.max(0.0,    0.);    	non-compiled	[CE]  	41	None	replace
44	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    1    *    mueff    /    dimension);    	non-compiled	[CE]  	37	None	replace
45	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  x_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  dimension)/  (dimension  +  4  *  mueff  /  x_i);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    4    *    mueff    /    dimension);    	non-compiled	[CE]  	1	None	replace
46	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  x_i);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  x_i);	  cs    =    Math.min(mueff    -    w_i);    	non-compiled	[CE]  	28	None	replace
47	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  x_i,  0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  x_i,  0);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  x_i,  0);	  cs    =    Math.min(mueff    -    wq,    0);    	non-compiled	[CE]  	38	None	replace
48	[BUG]  [BUGGY]  (dimension  +  4.  *  Math.max(0,  Math.sqrt((  mueff  -  2.0)/  (dimension  +  2.0)));  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  (dimension  +  4.  *  Math.max(0,  Math.sqrt((  mueff  -  2.0)/  (dimension  +  2.0)));  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	(dimension  +  4.  *  Math.max(0,  Math.sqrt((  mueff  -  2.0)/  (dimension  +  2.0)));	  (dimension    +    3.    *    Math.max(0,    Math.sqrt((mueff    -    2.0)/    (dimension    +    2.0)));    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  x_i);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =  (4  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =  (4  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  x_i);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    3.    *    mueff    /    dimension);    	non-compiled	[CE]  	13	None	replace
50	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  4  *  mueff  /  dimension);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  4  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  x_i)/  (dimension  +  4  *  mueff  /  dimension);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    4    *    mueff    /    dimension);    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  cc  =(dimension  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(dimension  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(dimension  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);	  cc    =(0.    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	32	None	replace
52	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  x_i)/  (dimension  +  2.0  *  mueff  /  dimension);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    2.0    *    mueff    /    dimension);    	non-compiled	[CE]  	26	None	replace
53	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimensions  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  0.);	  cs    =    Math.max(0,    Math.sqrt((    dimensions    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    0.);    	non-compiled	[CE]  	29	None	replace
54	[BUG]  [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(10.0,  Math.sqrt((  mueff  -  1.0))  -  2.0));  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(10.0,  Math.sqrt((  mueff  -  1.0))  -  2.0));  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(.  +  mueff  /  dimension)/  (dimension  +  1.0  *  Math.max(10.0,  Math.sqrt((  mueff  -  1.0))  -  2.0));	  cc    =(.    +    mueff    /    dimension)/    (dimension    +    1.0    *    Math.max(0,    Math.sqrt((    mueff    -    1.0))    -    2.0));    	non-compiled	[CE]  	18	None	replace
55	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  dimension);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  dimension)/  (dimension  +  3.  *  mueff  /  dimension);	  cc    =    (4    *    mueff    /    dimension)/    (dimension    +    3.    *    mueff    /    dimension);    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  0.);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  0.);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  dimension  -  1.0)/  (dimension  +  1.0))  *  Math.max(2.0,  0.);	  cs    =    Math.max(0,    Math.sqrt((    dimension    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.3,    0.);    	non-compiled	[CE]  	2	None	replace
57	[BUG]  [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0);  [BUGGY]      cc  =  (4.  +  mueff  /  dimension)  /    (dimension  +  4.  +  2.  *  mueff  /  dimension);  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.max(0,  Math.sqrt((  mueff  -  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0);	  cs    =    Math.max(0,    Math.sqrt((    mueff    -    1.0)/    (dimension    +    1.0))    *    Math.max(0.0,    0.);    	non-compiled	[CE]  	23	None	replace
58	[BUG]  [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  1  *  mueff  /  dimension);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(1  *  mueff  /  x_i)/  (dimension  +  1  *  mueff  /  dimension);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(1  *  mueff  /  x_i)/  (dimension  +  1  *  mueff  /  dimension);	  cc    =(1    *    mueff    /    dimension)/    (dimension    +    1    *    mueff    /    dimension);    	non-compiled	[CE]  	37	None	replace
59	[BUG]  [BUGGY]  cs  =  Math.min(mueff  -  1,  sumwq);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cs  =  Math.min(mueff  -  1,  sumwq);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cs  =  Math.min(mueff  -  1,  sumwq);	  cs    =    Math.min(mueff    -    w_i,    sumwq);    	non-compiled	[CE]  	27	None	replace
60	[BUG]  [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i        [BUGGY]  cc  =(0  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);  [BUGGY]      (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	602	603	1	replace	cc  =(0  *  mueff  /  dimension)/  (dimension  +  1  *  mueff  /  x_i);	  cc    =(0    *    mueff    /    dimension)/    (dimension    +    1    *    mueff    /    dimension);    	non-compiled	[CE]  	39	None	replace
