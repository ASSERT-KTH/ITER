bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!Double.isNaN(lB[i])||!Double.isInfinite(uB[i]))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if(!Double.isNaN(lB[i])||!Double.isInfinite(uB[i]))  {  [BUGGY]    Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	if(!Double.isNaN(lB[i])||!Double.isInfinite(uB[i]))  {	  if(Double.isNaN(lB[i])||    Double.isNaN(uB[i]))    {    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  lB[i]  =  uB[i].getFinite();  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB[i].getFinite();  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB[i].getFinite();	      lB[i]    =    lB[i].getFinite();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  lB[i]  =  uB[i].getStandardFitness();  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB[i].getStandardFitness();  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB[i].getStandardFitness();	      lB[i]    =    lB[i].getStandardFitness();    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  lB[i]  =  uB[i].getHeaderStructure();  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB[i].getHeaderStructure();  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB[i].getHeaderStructure();	      lB[i]    =    lB[i].getHeaderStructure();    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(true);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).setFiniteBounds(true);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)lB[i]).setFiniteBounds(true);	      ((    Double)lB[i]).setFiniteBounds(false);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  ((  Double)lB[i]).doubleValue()  +  1;  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).doubleValue()  +  1;  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)lB[i]).doubleValue()  +  1;	      ((    Double)lB[i]).doubleValue();    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(uB[i]);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).setFiniteBounds(uB[i]);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)lB[i]).setFiniteBounds(uB[i]);	      ((    Double)lB[i]).setFiniteBounds(hasInfiniteBounds);    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(generateStatistics);  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).setFiniteBounds(generateStatistics);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)lB[i]).setFiniteBounds(generateStatistics);	      ((    Double)lB[i]).setFiniteBounds(hasInfiniteBounds);    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  lB[i]  =  uB[i];  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB[i];  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB[i];	      lB[i]    =    lB.get(i);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  lB[i]  =  uB.get(i);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB.get(i);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB.get(i);	      lB[i]    =    lB.get(i);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  lB[i]  =  uB[i].get(i);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  uB[i].get(i);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  uB[i].get(i);	      lB[i]    =    lB.get(i);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  ((  Double)uB[i]).doubleValue();  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)uB[i]).doubleValue();  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)uB[i]).doubleValue();	      ((    Double)lB[i]).doubleValue();    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  ((  Double)uB[i]).setFiniteBounds(false);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)uB[i]).setFiniteBounds(false);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)uB[i]).setFiniteBounds(false);	      ((    Double)lB[i]).setFiniteBounds(false);    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  if  (Double.isNaN(lB[i])||  Double.isInfinite(uB[i])||  hasFiniteBounds)  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if  (Double.isNaN(lB[i])||  Double.isInfinite(uB[i])||  hasFiniteBounds)  {  [BUGGY]    Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	if  (Double.isNaN(lB[i])||  Double.isInfinite(uB[i])||  hasFiniteBounds)  {	  if    (Double.isNaN(lB[i])||    Double.isInfinite(uB[i]))    {    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  if(Double.isNaN(lB[i])&&  Double.isNaN(uB[i]))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if(Double.isNaN(lB[i])&&  Double.isNaN(uB[i]))  {  [BUGGY]    Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	if(Double.isNaN(lB[i])&&  Double.isNaN(uB[i]))  {	  if(Double.isNaN(lB[i])||    Double.isNaN(uB[i]))    {    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  ((  Double)lB[i]).setFitness(false);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  ((  Double)lB[i]).setFitness(false);  [BUGGY]    if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	((  Double)lB[i]).setFitness(false);	      ((    Double)lB[i]).setFiniteBounds(false);    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  if(!Double.isNaN(lB[i])&&!Double.isNaN(uB[i]))  {  [CE]  [FE]        java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  if(!Double.isNaN(lB[i])&&!Double.isNaN(uB[i]))  {  [BUGGY]    Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	if(!Double.isNaN(lB[i])&&!Double.isNaN(uB[i]))  {	  if(Double.isNaN(lB[i])||    Double.isNaN(uB[i]))    {    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  lB[i]  =  lB[i].getFitness();  [CE]  [FE]          java.lang.Exception:  Unexpected  exception    [CONTEXT]    if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {    [BUGGY]  lB[i]  =  lB[i].getFitness();  [BUGGY]    Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	522	523	1	replace	lB[i]  =  lB[i].getFitness();	      	non-compiled	[CE]  	2	None	replace
