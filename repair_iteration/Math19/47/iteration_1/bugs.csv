bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1)*  (dimension  +  1.5)/  3.);  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1)*  (dimension  +  1.5)/  3.);  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1)*  (dimension  +  1.5)/  3.);		non-compiled	[CE]  	96	None	add
2	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  1.5)/  3.);  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  1.5)/  3.);  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  1.5)/  3.);		non-compiled	[CE]  	96	None	add
3	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  2.0));  [CE]  [FE]        java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  2.0));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  (dimension  +  2.0));		non-compiled	[CE]  	96	None	add
4	[BUG]  [BUGGY]  ccov1Sep  =  Math.min(1,  ccovmu  *  (dimension  +  1.5)/  3.);  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccovmu  *  (dimension  +  1.5)/  3.);  [BUGGY]  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	ccov1Sep  =  Math.min(1,  ccovmu  *  (dimension  +  1.5)/  3.);	ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  	non-compiled	[CE]  	95	None	replace
5	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  2.0));  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  2.0));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  2.0)/  2.0));		non-compiled	[CE]  	96	None	add
6	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  2.0));  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  2.0));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  2.0));		non-compiled	[CE]  	96	None	add
7	[BUG]  [BUGGY]    cs  =  insigma.scalarMultiply(1.0);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  insigma.scalarMultiply(1.0);  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  insigma.scalarMultiply(1.0);		non-compiled	[CE]  	96	None	add
8	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0)));  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0)));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0)));		non-compiled	[CE]  	96	None	add
9	[BUG]  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0));  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	    cs  =  Math.max(0,  Math.sqrt((  ccov1  -  ccov1,  1.0)/  (dimension  +  1.0))  *  Math.max(0.0,  1.0));		non-compiled	[CE]  	96	None	add
10	[BUG]  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.3)/  3.);  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  (dimension  +  4.  +  2.  *  mueff  /  dimension);  cs  =  (mueff  +  2.)  /  (dimension  +  mueff  +  3.);  damps  =  (1.  +  2.  *  Math.max(0,  Math.sqrt((mueff  -  1.)  /  (dimension  +  1.))  -  1.))  *  Math.max(0.3,  1.  -  dimension  /  (1e-6  +  Math.min(maxIterations,  getMaxEvaluations()  /  lambda)))  +  cs;  //  minor  increment  ccov1  =  2.  /  ((dimension  +  1.3)  *  (dimension  +  1.3)  +  mueff);  ccovmu  =  Math.min(1  -  ccov1,  2.  *  (mueff  -  2.  +  1.  /  mueff)  /  ((dimension  +  2.)  *  (dimension  +  2.)  +  mueff));  [BUGGY]  ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.3)/  3.);  [BUGGY]  ccovmuSep  =  Math.min(1  -  ccov1,  ccovmu  *  (dimension  +  1.5)  /  3.);  chiN  =  Math.sqrt(dimension)  *  (1.  -  1.  /  (4.  *  dimension)  +  1  /  (21.  *  dimension  *  dimension));  xmean  =  MatrixUtils.createColumnRealMatrix(guess);  //  objective  diagD  =  insigma.scalarMultiply(1.  /  sigma);  diagC  =  square(diagD);  pc  =  zeros(dimension,  1);  //  evolution  paths  for  C  and  sigma  ps  =  zeros(dimension,  1);  //  B  defines  the  coordinate  system  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	613	613	1	replace	ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.3)/  3.);	ccov1Sep  =  Math.min(1,  ccov1  *  (dimension  +  1.5)  /  3.);  	non-compiled	[CE]  	95	None	replace
