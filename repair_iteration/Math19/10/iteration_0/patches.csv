bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  uB.length;  i++)  {  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]  for(int  i  =  0;  i  <  uB.length;  i++)  {  [BUGGY]  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	for(int  i  =  0;  i  <  uB.length;  i++)  {	for  (int  i  =  0;  i  <  lB.length;  i++)  {  	non-compiled	[CE]  	20	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    [BUGGY]  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	  	for  (int  i  =  0;  i  <  lB.length;  i++)  {  	non-compiled	[CE]  	20	None	replace
3	[BUG]  [BUGGY]    lB[i]  =  getFiniteBounds();  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    lB[i]  =  getFiniteBounds();  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    lB[i]  =  getFiniteBounds();		non-compiled	[CE]  	21	None	add
4	[BUG]  [BUGGY]    uB  =  getFiniteBounds();  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    uB  =  getFiniteBounds();  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    uB  =  getFiniteBounds();		non-compiled	[CE]  	21	None	add
5	[BUG]  [BUGGY]    uB  =  getFiniteBounds(lB);  [CE]  [FE]        java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    uB  =  getFiniteBounds(lB);  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    uB  =  getFiniteBounds(lB);		non-compiled	[CE]  	21	None	add
6	[BUG]  [BUGGY]    int  uB  =  getFiniteBounds(lB);  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    int  uB  =  getFiniteBounds(lB);  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    int  uB  =  getFiniteBounds(lB);		non-compiled	[CE]  	21	None	add
7	[BUG]  [BUGGY]    int  uB  =  getFiniteBounds();  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    int  uB  =  getFiniteBounds();  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    int  uB  =  getFiniteBounds();		non-compiled	[CE]  	21	None	add
8	[BUG]  [BUGGY]    lB  =  uB[i].getStandardFitness();  [CE]  [FE]    java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    lB  =  uB[i].getStandardFitness();  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    lB  =  uB[i].getStandardFitness();		non-compiled	[CE]  	21	None	add
9	[BUG]  [BUGGY]    lB  =  lB[i].getStandardFitness();  [CE]  [FE]      java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    lB  =  lB[i].getStandardFitness();  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    lB  =  lB[i].getStandardFitness();		non-compiled	[CE]  	21	None	add
10	[BUG]  [BUGGY]    lB  =  lB[i];  [CE]  [FE]        java.lang.Exception:  Unexpected  exception  [CONTEXT]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  [BUGGY]    lB  =  lB[i];  [BUGGY]  for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4082482904638631	521	521	1	replace	    lB  =  lB[i];		non-compiled	[CE]  	21	None	add
