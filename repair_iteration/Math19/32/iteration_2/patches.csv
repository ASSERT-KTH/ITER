bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sigma  =  Math.max(1,  lambda);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(1,  lambda);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(1,  lambda);	  sigma    =    Math.max(1,    mu);    	non-compiled	[CE]  	12	None	replace
2	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);	  sigma    =    Math.log(sequence(1,    0,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [CE]  [FE]                    java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);	  sigma    =    Math.log(sequence(1,    0,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu);	  sigma    =    log(sequence(1,    0,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  log(sequence(1,  0,  1)).scalarMultiply(-1.).scalarAdd(mu2);	  sigma    =    log(sequence(1,    0,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  sigma  =  Math.max(0,  stopTolHistFun);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(0,  stopTolHistFun);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(0,  stopTolHistFun);	  sigma    =    Math.max(0,    lambda);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu);	  sigma    =    Math.log(sequence(0,    mu,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(2,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(2,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(2,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu);	  sigma    =    Math.log(sequence(1,    mu,    1)).scalarMultiply(-1.).scalarAdd(logMu);    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(2,  lambda,  1)).scalarMultiply(-1.).scalarAdd(smu);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(2,  lambda,  1)).scalarMultiply(-1.).scalarAdd(smu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(2,  lambda,  1)).scalarMultiply(-1.).scalarAdd(smu);	  sigma    =    Math.log(sequence(2,    mu,    1)).scalarMultiply(-1.).scalarAdd(smu);    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  sigma  =  Math.max(logMu,  0,  mu  +  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(logMu,  0,  mu  +  1);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(logMu,  0,  mu  +  1);	  sigma    =    Math.max(mu,    0,    logMu    +    1);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  sigma  =  Math.max(mu,  0,  logMu  +  0.5);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(mu,  0,  logMu  +  0.5);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(mu,  0,  logMu  +  0.5);	  sigma    =    Math.max(mu,    0,    logMu    +    1);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  sigma  =  Math.max(sigma,  2);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(sigma,  2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(sigma,  2);	  sigma    =    Math.max(sigma,    1);    	non-compiled	[CE]  	21	None	replace
13	[BUG]  [BUGGY]  sigma  =  Math.max(sigma,  0);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(sigma,  0);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(sigma,  0);	  sigma    =    Math.max(sigma,    1);    	non-compiled	[CE]  	21	None	replace
14	[BUG]  [BUGGY]  sigma  =  Math.min(logMu,  0,  mu);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.min(logMu,  0,  mu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.min(logMu,  0,  mu);	  sigma    =    Math.min(mu,    0,    logMu);    	non-compiled	[CE]  	20	None	replace
15	[BUG]  [BUGGY]  sigma  =  Math.min(mu,  0,  logMu  +  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.min(mu,  0,  logMu  +  1);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.min(mu,  0,  logMu  +  1);	  sigma    =    Math.min(mu,    0,    logMu);    	non-compiled	[CE]  	20	None	replace
16	[BUG]  [BUGGY]  sigma  =  Math.max(logMu,  0.5);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(logMu,  0.5);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(logMu,  0.5);	  sigma    =    Math.max(logMu,    1);    	non-compiled	[CE]  	19	None	replace
17	[BUG]  [BUGGY]  sigma  =  Math.max(mu,  10.0);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(mu,  10.0);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(mu,  10.0);	  sigma    =    Math.max(mu,    0.5);    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  sigma  =  Math.log(mu,  0.5);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(mu,  0.5);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(mu,  0.5);	  sigma    =    Math.log(mu,    1);    	non-compiled	[CE]  	15	None	replace
19	[BUG]  [BUGGY]  logMu2  =  Math.log(mu  /  2.0);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  logMu2  =  Math.log(mu  /  2.0);  [BUGGY]      weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	logMu2  =  Math.log(mu  /  2.0);	  logMu2    =    Math.log(mu    /    10.0);    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  logMu2  =  Math.log(logMu  /  2.0);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  logMu2  =  Math.log(logMu  /  2.0);  [BUGGY]      weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	logMu2  =  Math.log(logMu  /  2.0);	  logMu2    =    Math.log(mu    /    10.0);    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  sigma  =  Math.max(logMu,  0,  logMu  +  1);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(logMu,  0,  logMu  +  1);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(logMu,  0,  logMu  +  1);	  sigma    =    Math.max(logMu,    0,    mu);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  sigma  =  Math.max(1,  insigma);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(1,  insigma);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(1,  insigma);	  sigma    =    Math.max(0,    insigma);    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  sigma  =  Math.log(mu  +  0.5).scalarMultiply(-1.).scalarAdd(mu2);  [CE]  ')'  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(mu  +  0.5).scalarMultiply(-1.).scalarAdd(mu2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(mu  +  0.5).scalarMultiply(-1.).scalarAdd(mu2);	  sigma    =    Math.log(sequence(1,    mu,    1)).scalarMultiply(-1.).scalarAdd(mu2);    	non-compiled	[CE]  ')'  expected	18	None	replace
24	[BUG]  [BUGGY]  sigma  =  Math.max(logMu,  0,  logMu);  [CE]  ')'  expected  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(logMu,  0,  logMu);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(logMu,  0,  logMu);	  sigma    =    Math.max(logMu,    0,    mu);    	non-compiled	[CE]  ')'  expected	7	None	replace
25	[BUG]  [BUGGY]  sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [CE]  ')'  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);	  sigma    =    Math.log(sequence(0,    mu,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  ')'  expected	9	None	replace
26	[BUG]  [BUGGY]  sigma  =  Math.min(sigma,  1);  [CE]  ')'  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.min(sigma,  1);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.min(sigma,  1);	  sigma    =    Math.max(sigma,    1);    	non-compiled	[CE]  ')'  expected	21	None	replace
27	[BUG]  [BUGGY]  sigma  =  log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [CE]  ')'  expected  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  log(sequence(0,  mu,  1)).scalarMultiply(-1.).scalarAdd(mu2);	  sigma    =    log(sequence(0,    mu,    1)).scalarMultiply(-1.).scalarAdd(logMu2);    	non-compiled	[CE]  ')'  expected	6	None	replace
28	[BUG]  [BUGGY]  sigma  =  Math.max(sigma,  0.5);  [CE]  ')'  expected  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      sigma  =  max(insigma);  //  overall  standard  deviation  stopTolUpX  =  1e3  *  max(insigma);  stopTolX  =  1e-11  *  max(insigma);  stopTolFun  =  1e-12;  stopTolHistFun  =  1e-13;  mu  =  lambda  /  2;  //  number  of  parents/points  for  recombination      [BUGGY]  sigma  =  Math.max(sigma,  0.5);  [BUGGY]      logMu2  =  Math.log(mu  +  0.5);  weights  =  log(sequence(1,  mu,  1)).scalarMultiply(-1.).scalarAdd(logMu2);  double  sumw  =  0;  double  sumwq  =  0;  for  (int  i  =  0;  i  <  mu;  i++)  {  double  w  =  weights.getEntry(i,  0);  sumw  +=  w;  sumwq  +=  w  *  w;  }  weights  =  weights.scalarMultiply(1.  /  sumw);  mueff  =  sumw  *  sumw  /  sumwq;  //  variance-effectiveness  of  sum  w_i  x_i  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	589	589	1	replace	sigma  =  Math.max(sigma,  0.5);	  sigma    =    Math.max(mu,    0.5);    	non-compiled	[CE]  ')'  expected	14	None	replace
