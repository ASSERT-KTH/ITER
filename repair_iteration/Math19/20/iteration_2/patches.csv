bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(lambda,  guess.length);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(lambda,  guess.length);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(lambda,  guess.length);	  Integer    lambda    =    Math.min(lambda,    dimension);    	non-compiled	[CE]  	23	None	replace
2	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess,  dimension);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess,  dimension);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess,  dimension);	  Integer    lambda    =    Math.min(lambda,    dimension);    	non-compiled	[CE]  	23	None	replace
3	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(0,  lambda);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(0,  lambda);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(0,  lambda);	  Integer    lambda    =    Math.min(0,    lambda);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  init(guess,  0,  guess.length  -  1);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  init(guess,  0,  guess.length  -  1);  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	init(guess,  0,  guess.length  -  1);	  init(guess,    0,    guess.length);    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess.length,  guess.length  -  2);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess.length,  guess.length  -  2);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess.length,  guess.length  -  2);	  Integer    lambda    =    Math.min(guess.length,    guess.length    -    1);    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  if  (guess.length  ==  1)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  if  (guess.length  ==  1)  {  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	if  (guess.length  ==  1)  {	  if    (lambda    ==    1)    {    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(guess.length,  guess);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(guess.length,  guess);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(guess.length,  guess);	  Integer    lambda    =    Math.min(guess.length,    lambda);    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(2,  Math.abs(guess[0][0]));  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(2,  Math.abs(guess[0][0]));  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(2,  Math.abs(guess[0][0]));	  Integer    lambda    =    Math.max(1,    Math.abs(guess[0][0]));    	non-compiled	[CE]  	14	None	replace
9	[BUG]  [BUGGY]  init(lambda,  false);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  init(lambda,  false);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	init(lambda,  false);	  init(dimension,    false);    	non-compiled	[CE]  	21	None	replace
10	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess,  guess.length);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess,  guess.length);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess,  guess.length);	  Integer    lambda    =    Math.min(guess,    lambda);    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  init(null,  true);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  init(null,  true);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	init(null,  true);	  init(null,    false);    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(0,  guess.length  -  2);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(0,  guess.length  -  2);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(0,  guess.length  -  2);	  Integer    lambda    =    Math.max(0,    guess.length    -    1);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(0,  guess.length  -  1);  [CE]  [FE]                  java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(0,  guess.length  -  1);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(0,  guess.length  -  1);	  Integer    lambda    =    Math.min(0,    guess.length);    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  if(guess!=  null)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  if(guess!=  null)  {  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	if(guess!=  null)  {	  if(guess    ==    null)    {    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(2,  Math.abs(guess[1][0]));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(2,  Math.abs(guess[1][0]));  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(2,  Math.abs(guess[1][0]));	  Integer    lambda    =    Math.max(1,    Math.abs(guess[1][0]));    	non-compiled	[CE]  	19	None	replace
16	[BUG]  [BUGGY]  int  lambda  =  Math.min(guess.length,  guess.length  -  2);  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  int  lambda  =  Math.min(guess.length,  guess.length  -  2);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	int  lambda  =  Math.min(guess.length,  guess.length  -  2);	  int    lambda    =    Math.min(guess.length,    guess.length    -    1);    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  int  lambda  =  Math.log(guess.length,  guess.length);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  int  lambda  =  Math.log(guess.length,  guess.length);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	int  lambda  =  Math.log(guess.length,  guess.length);	  int    lambda    =    Math.max(guess.length,    guess.length);    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(0,  guess);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(0,  guess);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(0,  guess);	  Integer    lambda    =    Math.min(0,    lambda);    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(guess,  guess.length  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(guess,  guess.length  -  1);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(guess,  guess.length  -  1);	  Integer    lambda    =    Math.max(guess,    guess.length);    	non-compiled	[CE]  	17	None	replace
20	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess.length,  guess);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess.length,  guess);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess.length,  guess);	  Integer    lambda    =    Math.min(guess.length,    lambda);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  +  guess));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  +  guess));  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  +  guess));	  Integer    lambda    =    Math.max(0,    Math.abs(guess[1][0]));    	non-compiled	[CE]  	13	None	replace
22	[BUG]  [BUGGY]  if  (guess.length  <  1)  {  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  if  (guess.length  <  1)  {  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	if  (guess.length  <  1)  {	  if    (lambda    <    1)    {    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  init(guess,  guess);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  init(guess,  guess);  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	init(guess,  guess);	  init(guess);    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess,  guess);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess,  guess);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess,  guess);	  Integer    lambda    =    Math.min(guess,    lambda);    	non-compiled	[CE]  	18	None	replace
25	[BUG]  [BUGGY]  int  lambda  =  Math.max(guess.length,  guess.length  -  1);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  int  lambda  =  Math.max(guess.length,  guess.length  -  1);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	int  lambda  =  Math.max(guess.length,  guess.length  -  1);	  int    lambda    =    Math.max(guess.length,    guess.length);    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(guess.length,  dimension);  [CE]  [FE]              java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(guess.length,  dimension);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(guess.length,  dimension);	  Integer    lambda    =    Math.min(lambda,    dimension);    	non-compiled	[CE]  	23	None	replace
27	[BUG]  [BUGGY]  Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  -  guess[1][0]));  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  -  guess[1][0]));  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.max(0,  Math.abs(guess[1][0]  -  guess[1][0]));	  Integer    lambda    =    Math.max(0,    Math.abs(guess[1][0]));    	non-compiled	[CE]  	13	None	replace
28	[BUG]  [BUGGY]  if(guess  ==  null  ||  guess.length  <  2)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  if(guess  ==  null  ||  guess.length  <  2)  {  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	if(guess  ==  null  ||  guess.length  <  2)  {	  if(guess    ==    null)    {    	non-compiled	[CE]  	15	None	replace
29	[BUG]  [BUGGY]  Integer  lambda  =  Math.min(0,  lambda  -  guess.length);  [CE]  [FE]                java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  Integer  lambda  =  Math.min(0,  lambda  -  guess.length);  [BUGGY]      if  (lambda  <=  0)  {  lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	Integer  lambda  =  Math.min(0,  lambda  -  guess.length);	  Integer    lambda    =    Math.min(0,    lambda);    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if  (lambda  ==  4)  {  [CE]  [FE]            java.lang.Exception:  Unexpected  exception      [CONTEXT]      private  void  initializeCMA(double[]  guess)  {      [BUGGY]  if  (lambda  ==  4)  {  [BUGGY]      lambda  =  4  +  (int)  (3.  *  Math.log(dimension));  }  double[][]  sigmaArray  =  new  double[guess.length][1];  for  (int  i  =  0;  i  <  guess.length;  i++)  {  final  double  range  =(boundaries  ==  null)  ?  1.0  :  boundaries[1][i]  -  boundaries[0][i];  sigmaArray[i][0]  =  ((inputSigma  ==  null)  ?  0.3  :  inputSigma[i])  /  range;  }  RealMatrix  insigma  =  new  Array2DRowRealMatrix(sigmaArray,  false);  sigma  =  max(insigma);  //  overall  standard  deviation  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  initializeCMA  [RETURN_TYPE]  void  double[]  guess  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  insigma  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  range  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  sumw  sumwq  value  valueRange  w  worstFitness  double[][]  boundaries  sigmaArray  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math19/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2672612419124244	569	569	1	replace	if  (lambda  ==  4)  {	  if    (lambda    ==    1)    {    	non-compiled	[CE]  	1	None	replace
