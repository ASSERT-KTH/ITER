bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  	compilable	  [FE]  AssertionError  	21	3	replace
2	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  AssertionError  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  	compilable	  [FE]  AssertionError  	21	3	replace
3	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);  [BUGGY]  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	21	None	replace
4	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    [BUGGY]  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	  	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  	compilable	  [FE]  NullPointerException  	21	7	replace
5	[BUG]  [BUGGY]    [FE]  NullPointerException  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    [BUGGY]  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	  	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  	compilable	  [FE]  NullPointerException  	21	7	replace
6	[BUG]  [BUGGY]    p1.dotProduct(norm2),  delta);  [CE]  ';'  expected  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    p1.dotProduct(norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	    p1.dotProduct(norm2),  delta);		non-compiled	[CE]  ';'  expected	22	None	add
7	[BUG]  [BUGGY]    p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	    p1.dotProduct(delta)/  norm2,  delta);		non-compiled	[CE]  not  a  statement	22	None	add
8	[BUG]  [BUGGY]    p1.dotProduct(norm2),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  ';'  expected  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    p1.dotProduct(norm2),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	    p1.dotProduct(norm2),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);		non-compiled	[CE]  ';'  expected	22	None	add
9	[BUG]  [BUGGY]    p1.dotProduct(norm2);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    p1.dotProduct(norm2);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	    p1.dotProduct(norm2);		non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	22	None	add
