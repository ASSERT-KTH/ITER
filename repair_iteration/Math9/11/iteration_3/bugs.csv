bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	p1.dotProduct(delta,  delta);	  p1.dotProduct(norm1,    delta);    	compilable	  [FE]  NullPointerException  	2	7	replace
2	[BUG]  [BUGGY]  p1.dotProduct(delta,  delta);  [FE]  NullPointerException  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta,  delta);	  p1.dotProduct(norm1,    delta);    	compilable	  [FE]  NullPointerException  	2	7	replace
3	[BUG]  [BUGGY]  p2.dotProduct(delta),  delta);  [CE]  ';'  expected  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p2.dotProduct(delta),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2.dotProduct(delta),  delta);	  p1.dotProduct(delta),    delta);    this.direction    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  p1.dotProduct(delta,  norm2);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta,  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta,  norm2);	  p1.dotProduct(norm1,    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)	19	None	replace
5	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(p1)/  p2,  delta);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(p1)/  p2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  -p1.dotProduct(p1)/  p2,  delta);	  zero    =    new    Vector3D(1.0,    norm1,    -p1.dotProduct(norm2)/    p2,    delta);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	12	None	replace
6	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(p2)/  p2,  delta);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(p2)/  p2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  -p1.dotProduct(p2)/  p2,  delta);	  zero    =    new    Vector3D(1.0,    norm1,    -p1.dotProduct(norm2)/    p2,    delta);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	12	None	replace
7	[BUG]  [BUGGY]  p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  final  parameter  p2  may  not  be  assigned  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  final  parameter  p2  may  not  be  assigned	7	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	p1.dotProduct(this.direction,  delta);	  p1.dotProduct(this.direction,    norm2);    	compilable	  [FE]  NullPointerException  	1	7	replace
9	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  delta);  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  delta);	  p1.dotProduct(this.direction,    norm2);    	compilable	  [FE]  NullPointerException  	1	7	replace
10	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  p2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,Vector3D,Vector3D)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  p2,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  p2,  delta);	  p1.dotProduct(this.direction,    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,Vector3D,Vector3D)	1	None	replace
11	[BUG]  [BUGGY]  this.direction.set(p1,  p2,  delta);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  this.direction.set(p1,  p2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	this.direction.set(p1,  p2,  delta);	          this.direction.set(p1,    p2);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
12	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  2);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  2);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	10	None	replace
13	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]            AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  2);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	10	None	replace
14	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);  p1.setDirection(this.direction);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);  p1.setDirection(this.direction);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);  p1.setDirection(this.direction);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.setDirection(this.direction);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	25	None	replace
15	[BUG]  [BUGGY]  this.direction.reset(p1,  p2,  delta);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  this.direction.reset(p1,  p2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	this.direction.reset(p1,  p2,  delta);	          this.direction.reset(p1,    p2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta),  p1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta),  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	9	None	replace
17	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  delta,  this.direction);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  delta,  this.direction);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  delta,  this.direction);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	9	None	replace
18	[BUG]  [BUGGY]  p1.dotProduct(delta)/  delta);  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta)/  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta)/  delta);	  p1.dotProduct(delta),    delta);    	non-compiled	[CE]  not  a  statement	15	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
20	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p1);  [FE]  AssertionError  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p2);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
22	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p2);  [FE]  AssertionError  [FE]                  arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p1,  delta),  p2);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
23	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  delta;  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta)/  norm2,  delta;  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta)/  norm2,  delta;	  p1.dotProduct(delta),    norm2);    	non-compiled	[CE]  not  a  statement	14	None	replace
24	[BUG]  [BUGGY]  this.direction.reset(p1,  p2,  p1);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  this.direction.reset(p1,  p2,  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	this.direction.reset(p1,  p2,  p1);	          this.direction.reset(p1,    p2,    p2);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
25	[BUG]  [BUGGY]  this.direction.reset(p1,  p2,  norm2);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  this.direction.reset(p1,  p2,  norm2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	this.direction.reset(p1,  p2,  norm2);	          this.direction.reset(p1,    p2,    p2);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
26	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  this.direction);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  this.direction);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  this.direction);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta)/    norm1);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	17	None	replace
27	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  p1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta)/    norm1);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	17	None	replace
28	[BUG]  [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	18	None	replace
29	[BUG]  [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  final  parameter  p2  may  not  be  assigned  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  final  parameter  p2  may  not  be  assigned	6	None	replace
30	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  p1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta)/    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	23	None	replace
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  null);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	p1.dotProduct(this.direction,  null);	  p1.dotProduct(norm2,    this.direction);    	compilable	  [FE]  NullPointerException  	26	7	replace
32	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  null);  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  null);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  null);	  p1.dotProduct(norm2,    this.direction);    	compilable	  [FE]  NullPointerException  	26	7	replace
33	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta)/  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta)/  norm2);	  p1.dotProduct(delta),    norm2);    	non-compiled	[CE]  not  a  statement	14	None	replace
34	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  norm1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  norm1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2,  delta)/  norm1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta)/    norm1);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	17	None	replace
35	[BUG]  [BUGGY]  P2Util.setDirection(this.direction);  [CE]  cannot  find  symbol  P2Util  [FE]        NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  P2Util.setDirection(this.direction);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	P2Util.setDirection(this.direction);	  p1.setDirection(this.direction);    	non-compiled	[CE]  cannot  find  symbol  P2Util	16	None	replace
36	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta)/  norm2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta)/  norm2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta)/  norm2);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta)/    norm2);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	23	None	replace
37	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  norm2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double,double)  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  norm2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  norm2);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double,double)	13	None	replace
38	[BUG]  [BUGGY]  this.direction.set(p1,  p2,  p1);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  this.direction.set(p1,  p2,  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	this.direction.set(p1,  p2,  p1);	          this.direction.set(p1,    p2);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p2)/  2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p2)/  2);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p2)/  2);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	10	None	replace
40	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  norm2,  zero);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,double,Vector3D)  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  norm2,  zero);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  norm2,  zero);	  p1.dotProduct(this.direction,    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,double,Vector3D)	1	None	replace
41	[BUG]  [BUGGY]  p1.dotProduct(delta,  norm1);  [CE]  cannot  find  symbol  norm1  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(delta,  norm1);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta,  norm1);	  p1.dotProduct(norm1,    delta);    	non-compiled	[CE]  cannot  find  symbol  norm1	2	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(norm2)/    norm2,    delta);    	compilable	  [FE]  AssertionError  	9	3	replace
43	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  norm2,  delta);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(p1)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(norm2)/    norm2,    delta);    	compilable	  [FE]  AssertionError  	9	3	replace
44	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	7	7	replace
45	[BUG]  [BUGGY]  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  NullPointerException  [FE]          AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	7	7	replace
46	[BUG]  [BUGGY]  new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);  [CE]  no  suitable  constructor  found  for  Vector3D(double,double,Vector3D)  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,double,Vector3D)	24	None	replace
47	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  p2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	p1.dotProduct(this.direction,  p2);	  p1.dotProduct(this.direction,    norm2);    	compilable	  [FE]  NullPointerException  	1	7	replace
48	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  p2);  [FE]  NullPointerException  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  p2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  p2);	  p1.dotProduct(this.direction,    norm2);    	compilable	  [FE]  NullPointerException  	1	7	replace
49	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  p2,  norm2);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,Vector3D,double)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(this.direction,  p2,  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  p2,  norm2);	  p1.dotProduct(this.direction,    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,Vector3D,double)	1	None	replace
50	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(norm2)/  p2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  -p1.dotProduct(norm2)/  p2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  -p1.dotProduct(norm2)/  p2,  delta);	  zero    =    new    Vector3D(1.0,    norm1,    -p1.dotProduct(norm2)/    p2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	12	None	replace
51	[BUG]  [BUGGY]  p1.dotProduct(norm1,  p2);  [CE]  cannot  find  symbol  norm1  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.dotProduct(norm1,  p2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(norm1,  p2);	  p1.dotProduct(norm1,    norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	19	None	replace
52	[BUG]  [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [CE]  final  parameter  p2  may  not  be  assigned  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p2  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  final  parameter  p2  may  not  be  assigned	6	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
54	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  p1);  [FE]  AssertionError  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  p1);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(p2,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2,    delta),    p1);    	compilable	  [FE]  AssertionError  	13	4	replace
55	[BUG]  [BUGGY]  p1.setDirection(new  Vector3D.Direction(this.direction));  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  p1.setDirection(new  Vector3D.Direction(this.direction));  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.setDirection(new  Vector3D.Direction(this.direction));	  p1.setDirection(this.direction);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
56	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta,  this.direction);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]        AssertionError      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);      [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta,  this.direction);  [BUGGY]      }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta,  this.direction);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	9	None	replace
