bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p1.dotProduct(this.direction,  norm2);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(this.direction,  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(this.direction,  norm2);	      p1.dotProduct(norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)	9	None	replace
2	[BUG]  [BUGGY]  p1.dotProduct(norm1,  delta);  [CE]  cannot  find  symbol  norm1  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(norm1,  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(norm1,  delta);	      p1.dotProduct(norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	9	None	replace
3	[BUG]  [BUGGY]      this.direction.reset(p1,  p2);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]      this.direction.reset(p1,  p2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	        this.direction.reset(p1,  p2);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]      this.direction.set(p1,  p2);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]      this.direction.set(p1,  p2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	        this.direction.set(p1,  p2);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]      this.direction.reset();  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]      this.direction.reset();  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	        this.direction.reset();	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
6	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  final  parameter  p2  may  not  be  assigned  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  final  parameter  p2  may  not  be  assigned	1	None	add
7	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  final  parameter  p2  may  not  be  assigned  [FE]      AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  final  parameter  p2  may  not  be  assigned	1	None	add
8	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	1	None	add
9	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(norm2)/  norm2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	2	None	replace
10	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]      AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  2);	  zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	2	None	replace
11	[BUG]  [BUGGY]  p1.dotProduct(delta),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  ';'  expected  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(delta),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta),  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	      p1.dotProduct(norm2),    delta);    this.direction    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  ';'  expected	8	None	replace
12	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  norm1,  -p1.dotProduct(norm2)/  p2,  delta);  [CE]  cannot  find  symbol  norm1  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  norm1,  -p1.dotProduct(norm2)/  p2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  norm1,  -p1.dotProduct(norm2)/  p2,  delta);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  cannot  find  symbol  norm1	3	None	replace
13	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta),  p1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta),  p1);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta),  p1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	3	None	replace
14	[BUG]  [BUGGY]  p1.dotProduct(delta),  norm2);  [CE]  ';'  expected  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(delta),  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta),  norm2);	      p1.dotProduct(norm2),    delta);    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  p1.dotProduct(delta),  delta);  [CE]  ';'  expected  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(delta),  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta),  delta);	      p1.dotProduct(norm2),    delta);    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  p1.setDirection(this.direction);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.setDirection(this.direction);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.setDirection(this.direction);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm1);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm1);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm1);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	3	None	replace
18	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p2  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2);	  	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double)	1	None	add
19	[BUG]  [BUGGY]  p1.dotProduct(norm1,  norm2);  [CE]  cannot  find  symbol  norm1  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(norm1,  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(norm1,  norm2);	      p1.dotProduct(norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	9	None	replace
20	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  zero);  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(delta)/  norm2,  zero);	      p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  p2.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p2.dotProduct(delta)/  norm2,  delta);	      p1.dotProduct(norm2),    delta);    this.direction    =    new    Vector3D(0.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  not  a  statement	8	None	replace
22	[BUG]  [BUGGY]      this.direction.reset(p1,  p2,  p2);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]      this.direction.reset(p1,  p2,  p2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	        this.direction.reset(p1,  p2,  p2);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
23	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm2);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm2);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2,  delta)/  norm2);	  zero    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	3	None	replace
24	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	1	None	add
25	[BUG]  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.setDirection(this.direction);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.setDirection(this.direction);  [BUGGY]    }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	zero    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.setDirection(this.direction);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
26	[BUG]  [BUGGY]  p1.dotProduct(norm2,  this.direction);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);    [BUGGY]  p1.dotProduct(norm2,  this.direction);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	p1.dotProduct(norm2,  this.direction);	      p1.dotProduct(norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	9	None	replace
