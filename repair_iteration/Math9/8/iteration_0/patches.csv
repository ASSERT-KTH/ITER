bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  norm2  =  delta.getRangeSq();  [CE]  cannot  find  symbol  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]  final  double  norm2  =  delta.getRangeSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  delta.getRangeSq();	final  double  norm2  =  delta.getNormSq();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  norm2  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	  	final  double  norm2  =  delta.getNormSq();  	non-compiled	[CE]  cannot  find  symbol  norm2	15	None	replace
3	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
4	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
5	[BUG]  [BUGGY]    if(delta!=  null)  {  for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
6	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
7	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  norm2  =  p1.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
8	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getRangeSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  norm2  =  p1.getRangeSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  norm2  =  p1.getRangeSq();  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]  final  double  norm2  =  p1.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	final  double  norm2  =  p1.getNormSq();	final  double  norm2  =  delta.getNormSq();  	compilable	  [FE]  AssertionError  	15	4	replace
10	[BUG]  [BUGGY]  final  double  norm2  =  p1.getNormSq();  [FE]  AssertionError  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]  final  double  norm2  =  p1.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  p1.getNormSq();	final  double  norm2  =  delta.getNormSq();  	compilable	  [FE]  AssertionError  	15	4	replace
11	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
12	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
13	[BUG]  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    if(delta!=  null)  {  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
