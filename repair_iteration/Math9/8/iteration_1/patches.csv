bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  p1.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    p1.getSq();    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  final  double  normSq  =  delta.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  delta.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  delta.getSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    p1.getSq();    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  [CE]  cannot  find  symbol  norm2  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  p1.dotProduct(delta);	      if(delta!=    null)    {    final    double    normSq    =    p1.dotProduct(delta);    if(normSq    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	11	None	replace
4	[BUG]  [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  norm2  =  p1.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  norm2  =  p1.getNormSq();  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final    double    norm2    =    p1.getNormSq();    final  double  norm2  =  p1.getNormSq();	  	non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	9	None	add
5	[BUG]  [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  norm2  =  p2.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]      AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  norm2  =  p2.getNormSq();  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final    double    norm2    =    p1.getNormSq();    final  double  norm2  =  p2.getNormSq();	  	non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	9	None	add
6	[BUG]  [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  normSq  =  p1.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]        AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p1.getNormSq();  final  double  normSq  =  p1.getNormSq();  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final    double    norm2    =    p1.getNormSq();    final  double  normSq  =  p1.getNormSq();	  	non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	9	None	add
7	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  double  norm2  =  p1.dotProduct(delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	double  norm2  =  p1.dotProduct(delta);	      	compilable	  [FE]  MathIllegalArgumentException  	2	4	replace
8	[BUG]  [BUGGY]  double  norm2  =  p1.dotProduct(delta);  [FE]  MathIllegalArgumentException  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  double  norm2  =  p1.dotProduct(delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	double  norm2  =  p1.dotProduct(delta);	      	compilable	  [FE]  MathIllegalArgumentException  	2	4	replace
9	[BUG]  [BUGGY]  Vector3D  p1  =  p2.subtract(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  Vector3D  p1  =  p2.subtract(p1);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	Vector3D  p1  =  p2.subtract(p1);	      	non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	2	None	replace
10	[BUG]  [BUGGY]  final  double  norm2  =  p1.getRangeSq();  [CE]  cannot  find  symbol  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p1.getRangeSq();  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  p1.getRangeSq();	      if(delta!=    null)    {    final    double    norm2    =    p1.getRangeSq();    if(delta!=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
11	[BUG]  [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm2  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  p1.dotProduct(delta);  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    p1.dotProduct(delta);    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	13	None	replace
12	[BUG]  [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm2  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  delta.getNormSq();  if(normSq  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    delta.getNormSq();    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	3	None	replace
13	[BUG]  [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm2  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  delta.getNormSq();  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    delta.getNormSq();    if(normSq    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	4	None	replace
14	[BUG]  [BUGGY]  for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	for(final  Vector3D  delta  :  p1.getSize())  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
15	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.subtract(p2.subtract(p1));  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]              arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  Vector3D  delta  =  p1.subtract(p2.subtract(p1));  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  Vector3D  delta  =  p1.subtract(p2.subtract(p1));	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p2.getNormSq();  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	final  double  norm2  =  p2.getNormSq();	  final    double    norm2    =    p1.getNormSq();    	compilable	  [FE]  AssertionError  	10	7	replace
17	[BUG]  [BUGGY]  final  double  norm2  =  p2.getNormSq();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  norm2  =  p2.getNormSq();  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  p2.getNormSq();	  final    double    norm2    =    p1.getNormSq();    	compilable	  [FE]  AssertionError  	10	7	replace
18	[BUG]  [BUGGY]  Vector3D  norm2  =  p1.dotProduct(delta);  [CE]  incompatible  types  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  Vector3D  norm2  =  p1.dotProduct(delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	Vector3D  norm2  =  p1.dotProduct(delta);	      	non-compiled	[CE]  incompatible  types	2	None	replace
19	[BUG]  [BUGGY]  Node  nom2  =  p1.dotProduct(delta);  [CE]  cannot  find  symbol  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  Node  nom2  =  p1.dotProduct(delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	Node  nom2  =  p1.dotProduct(delta);	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  final  Vector3D  delta  =  p2.subtract(delta);  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  Vector3D  delta  =  p2.subtract(delta);  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  Vector3D  delta  =  p2.subtract(delta);	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
21	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.subtract(delta);  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]              arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  Vector3D  delta  =  p1.subtract(delta);  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  Vector3D  delta  =  p1.subtract(delta);	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
22	[BUG]  [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(delta  ==  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm2  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(delta  ==  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  delta.getNormSq();  if(delta  ==  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    delta.getNormSq();    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	3	None	replace
23	[BUG]  [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  incomparable  types:  Vector3D  and  double  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  delta.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  delta.getNormSq();  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    delta.getNormSq();    if(normSq    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  incomparable  types:  Vector3D  and  double	4	None	replace
24	[BUG]  [BUGGY]  final  double  normSq  =  p1.getSq();  if(delta!=  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  p1.getSq();  if(delta!=  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  p1.getSq();  if(delta!=  null)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    p1.getSq();    if(normSq    >    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm2  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  normSq  =  p1.dotProduct(delta);  if(normSq  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(delta!=    null)    {    final    double    normSq    =    p1.dotProduct(delta);    if(normSq    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm2	11	None	replace
26	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.getSize();  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  Vector3D  delta  =  p1.getSize();  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  Vector3D  delta  =  p1.getSize();	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
27	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.dotProduct(delta);  [CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)  [FE]              arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);    [BUGGY]  final  Vector3D  delta  =  p1.dotProduct(delta);  [BUGGY]    final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  Vector3D  delta  =  p1.dotProduct(delta);	      if(delta!=    null)    {    for(final    Vector3D    delta    :    p1.getSize())    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  variable  delta  is  already  defined  in  method  reset(Vector3D,Vector3D)	5	None	replace
