bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  delta;  [CE]  not  a  statement  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(delta)/  norm2,  delta;  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  delta;	      p1.dotProduct(delta)/    norm2);    	non-compiled	[CE]  not  a  statement	9	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	compilable	  [FE]  AssertionError  	6	6	replace
3	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [FE]  AssertionError  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	compilable	  [FE]  AssertionError  	6	6	replace
4	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
5	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
6	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
7	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
8	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
9	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
10	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	1	1	add
11	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(norm2)/  norm2,  delta);	      this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	2	None	replace
12	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2));  [CE]  no  suitable  constructor  found  for  Vector3D(double)  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2));    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double)	11	None	replace
13	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	3	1	add
14	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	3	1	add
15	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	3	1	add
16	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	3	1	add
17	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm1  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	non-compiled	[CE]  cannot  find  symbol  norm1	3	None	add
18	[BUG]  [BUGGY]  p1.dotProduct(norm2,  delta);  [CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(norm2,  delta);	      p1.dotProduct(norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,Vector3D)	10	None	replace
19	[BUG]  [BUGGY]  p1.dotProduct(delta,  norm2);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)  [FE]              arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(delta,  norm2);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta,  norm2);	      p1.dotProduct(norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,double)	10	None	replace
20	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	7	None	replace
21	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  delta);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	7	None	replace
22	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      p1.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        p1.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	12	1	add
23	[BUG]  [BUGGY]      p1.dotProduct(delta);  p1.dotProduct(delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      p1.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        p1.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	12	1	add
24	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	        p1.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	12	1	add
25	[BUG]  [BUGGY]      p1.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        p1.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	12	1	add
26	[BUG]  [BUGGY]      p1.dotProduct(delta);  p1.setNormSqrt(norm2);  [CE]  cannot  find  symbol  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      p1.dotProduct(delta);  p1.setNormSqrt(norm2);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        p1.dotProduct(delta);    p1.setNormSqrt(norm2);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p2.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	p2.dotProduct(delta);	      p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	13	7	replace
28	[BUG]  [BUGGY]  p2.dotProduct(delta);  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p2.dotProduct(delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p2.dotProduct(delta);	      p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	13	7	replace
29	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)+  norm2));  [CE]  ';'  expected  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)+  norm2));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)+  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2));    	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm);	      this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
31	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  zero);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  zero);	      p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  not  a  statement	8	None	replace
32	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	3	None	add
33	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	      this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	2	7	replace
34	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	      this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	2	7	replace
35	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
36	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
37	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p2));  [CE]  ';'  expected  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p2));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2));    	non-compiled	[CE]  ';'  expected	11	None	replace
38	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  norm2));  [CE]  ';'  expected  [FE]          arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  norm2));  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2));    	non-compiled	[CE]  ';'  expected	11	None	replace
39	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2),  delta);  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2),  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2),  delta);	      this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    	non-compiled	[CE]  cannot  find  symbol  norm1	4	None	replace
40	[BUG]  [BUGGY]  p1.dotProduct(norm2,  norm2);  [CE]  no  suitable  method  found  for  dotProduct(double,double)  [FE]            arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(norm2,  norm2);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(norm2,  norm2);	      p1.dotProduct(norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double,double)	10	None	replace
41	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  p2);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  p2);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  delta,  p2);	      p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  not  a  statement	8	None	replace
42	[BUG]  [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]      this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	1	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	      this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  AssertionError  	2	6	replace
44	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  AssertionError  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	      this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  AssertionError  	2	6	replace
45	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }    [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2);  [BUGGY]    zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	6	None	replace
