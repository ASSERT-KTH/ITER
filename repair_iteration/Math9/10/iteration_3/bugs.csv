bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
2	[BUG]  [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
3	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p1.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
4	[BUG]  [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p1.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
5	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p1.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
6	[BUG]  [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p1.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta,  null);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	p1.dotProduct(delta,  null);	  p1.dotProduct(norm2,    delta);    	compilable	  [FE]  NullPointerException  	18	7	replace
8	[BUG]  [BUGGY]  p1.dotProduct(delta,  null);  [FE]  NullPointerException  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta,  null);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta,  null);	  p1.dotProduct(norm2,    delta);    	compilable	  [FE]  NullPointerException  	18	7	replace
9	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	17	None	replace
10	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	17	None	replace
11	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta),  norm2);  [CE]  cannot  find  symbol  norm1  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	3	None	replace
12	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	43	1	add
13	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	43	1	add
14	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	43	1	add
15	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]      AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	43	1	add
16	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    p2));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	37	None	replace
17	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta),  norm2,  delta);  [CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double,double,Vector3D)  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta),  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta),  norm2,  delta);	  this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(norm2)/    norm2,    delta);    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double,Vector3D,double,double,Vector3D)	11	None	replace
18	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	15	1	add
19	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	15	1	add
20	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	15	1	add
21	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	15	1	add
22	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [CE]  cannot  find  symbol  norm1  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);	  	non-compiled	[CE]  cannot  find  symbol  norm1	15	None	add
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
24	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
26	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
28	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);	  	compilable	  [FE]  NullPointerException  	33	7	add
29	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	20	None	replace
30	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	20	None	replace
31	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  norm2,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  norm2,  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    p1,    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	45	None	replace
32	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  p1,  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  p1,  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1  /  FastMath.sqrt(delta),  p1,  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    p1,    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	45	None	replace
33	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(norm2));  [CE]  no  suitable  constructor  found  for  Vector3D(double)  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.log(norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.log(delta),    norm2));    	non-compiled	[CE]  no  suitable  constructor  found  for  Vector3D(double)	38	None	replace
34	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  p2));  [CE]  ';'  expected  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  p2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta),  p2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.log(delta),    norm2));    	non-compiled	[CE]  ';'  expected	38	None	replace
35	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
36	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
37	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
38	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
39	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
40	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
41	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm2,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm2,  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	21	None	replace
42	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2,  delta),  norm);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	30	None	replace
43	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  this.direction;  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  this.direction;  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  delta,  this.direction;	  p1.dotProduct(delta)/    norm2,    delta;    	non-compiled	[CE]  not  a  statement	1	None	replace
44	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  p1.dotProduct(delta)/  norm2,  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  not  a  statement	32	None	replace
45	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.dotProduct(delta)/  norm2,  delta);  [CE]  ')'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.dotProduct(delta)/  norm2,  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  ')'  expected	32	None	replace
46	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2));  [CE]  cannot  find  symbol  norm1  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2));    	non-compiled	[CE]  cannot  find  symbol  norm1	12	None	replace
47	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta,  norm2));  [CE]  cannot  find  symbol  norm1  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta,  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  delta,  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2));    	non-compiled	[CE]  cannot  find  symbol  norm1	36	None	replace
48	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(delta),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
49	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(p2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(p2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(p2),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	16	None	replace
50	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)/  norm2));  [CE]  ';'  expected  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)/  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta)/  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta)+    norm2));    	non-compiled	[CE]  ';'  expected	29	None	replace
51	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2)+  norm2));  [CE]  ';'  expected  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2)+  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2)+  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta)+    norm2));    	non-compiled	[CE]  ';'  expected	29	None	replace
52	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
53	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
54	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
55	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
56	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
57	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	9	1	add
58	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	p2.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	27	1	add
59	[BUG]  [BUGGY]  p2.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p2.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	27	1	add
60	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	p2.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	27	1	add
61	[BUG]  [BUGGY]  p2.dotProduct(delta);  p1.dotProduct(delta);  [FE]  arrays  first  differed  [FE]      NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p2.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	27	1	add
62	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	13	1	add
63	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	13	1	add
64	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [CE]  cannot  find  symbol  norm1  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);	  	non-compiled	[CE]  cannot  find  symbol  norm1	13	None	add
65	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm3),  delta);  [CE]  cannot  find  symbol  norm3  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm3),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm3),  delta);	  	non-compiled	[CE]  cannot  find  symbol  norm3	13	None	add
66	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    	non-compiled	[CE]  cannot  find  symbol  norm1	14	None	replace
67	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  null));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  null));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  null));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2,    delta));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	4	None	replace
68	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  p1);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta)/  norm2,  delta,  p1);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  delta,  p1);	  p1.dotProduct(delta)/    norm2,    delta,    p2);    	non-compiled	[CE]  not  a  statement	41	None	replace
69	[BUG]  [BUGGY]  p1.dotProduct(delta,  norm2,  zero);  [CE]  no  suitable  method  found  for  dotProduct(Vector3D,double,Vector3D)  [FE]                  arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta,  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta,  norm2,  zero);	  p1.dotProduct(delta,    norm2);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(Vector3D,double,Vector3D)	19	None	replace
70	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm1,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	39	None	replace
71	[BUG]  [BUGGY]  p1.dotProduct(delta);  p2.setNormSqrt(norm2);  [CE]  cannot  find  symbol  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta);  p2.setNormSqrt(norm2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta);  p2.setNormSqrt(norm2);	          p1.dotProduct(delta);    p1.setNormSqrt(norm2);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
72	[BUG]  [BUGGY]  p1.dotProduct(norm1,  norm2);  [CE]  cannot  find  symbol  norm1  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(norm1,  norm2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(norm1,  norm2);	  p1.dotProduct(norm2,    norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	40	None	replace
73	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
74	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
75	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
76	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
77	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
78	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(0.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	5	1	add
79	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);	  	compilable	  [FE]  arrays  first  differed  	2	1	add
80	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [FE]  arrays  first  differed  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);	  	compilable	  [FE]  arrays  first  differed  	2	1	add
81	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  This.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [CE]  cannot  find  symbol  This  [FE]      AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  This.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    This.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);	  	non-compiled	[CE]  cannot  find  symbol  This	2	None	add
82	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm);  [CE]  cannot  find  symbol  norm  [FE]        AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm);	  	non-compiled	[CE]  cannot  find  symbol  norm	2	None	add
83	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p2.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
84	[BUG]  [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p2.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
85	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p2.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
86	[BUG]  [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p2.dotProduct(delta);    p2.dotProduct(delta);  p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
87	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p2.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
88	[BUG]  [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  [FE]  arrays  first  differed  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p2.dotProduct(delta);    p1.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	24	1	add
89	[BUG]  [BUGGY]  p2.dotProduct(norm2);  [CE]  no  suitable  method  found  for  dotProduct(double)  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(norm2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p2.dotProduct(norm2);	  p2.dotProduct(delta);    	non-compiled	[CE]  no  suitable  method  found  for  dotProduct(double)	28	None	replace
90	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  p2));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  p2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  p2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(p1,    delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	35	None	replace
91	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(p1,    delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	35	None	replace
92	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  zero,  p2);  [CE]  not  a  statement  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta)/  norm2,  zero,  p2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  zero,  p2);	  p1.dotProduct(delta)/    norm2,    delta,    p2);    	non-compiled	[CE]  not  a  statement	41	None	replace
93	[BUG]  [BUGGY]  p1.setNormSqrt(norm2);  [CE]  cannot  find  symbol  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.setNormSqrt(norm2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.setNormSqrt(norm2);	          p1.dotProduct(delta);    p1.setNormSqrt(norm2);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
94	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	17	None	replace
95	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  /  FastMath.sqrt(p1,  delta),  norm2);  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  /  FastMath.sqrt(p1,  delta),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  /  FastMath.sqrt(p1,  delta),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(p1,    delta),    norm2);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
96	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm1),  delta);	  	non-compiled	[CE]  cannot  find  symbol  norm1	15	None	add
97	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  2),  delta);  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm1,  2),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    	non-compiled	[CE]  cannot  find  symbol  norm1	14	None	replace
98	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	32	None	replace
99	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.getLineno(),  delta),  delta);  [CE]  cannot  find  symbol  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.getLineno(),  delta),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1.getLineno(),  delta),  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
100	[BUG]  [BUGGY]  p2.dotProduct(delta);  p2.moveProduct(delta);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p2.dotProduct(delta);  p2.moveProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p2.dotProduct(delta);    p2.moveProduct(delta);	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
101	[BUG]  [BUGGY]  p1.dotProduct(delta)/  norm2,  zero;  [CE]  not  a  statement  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(delta)/  norm2,  zero;  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(delta)/  norm2,  zero;	  p1.dotProduct(delta)/    norm2,    delta;    	non-compiled	[CE]  not  a  statement	1	None	replace
102	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);	  this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	44	7	replace
103	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [FE]  NullPointerException  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  zero);	  this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	44	7	replace
104	[BUG]  [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.setNormSqrt(norm2);  [CE]  cannot  find  symbol  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p2.dotProduct(delta);  p1.setNormSqrt(norm2);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p2.dotProduct(delta);    p1.setNormSqrt(norm2);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
105	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)/  norm2));  [CE]  ';'  expected  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)/  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)/  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.log(delta),    norm2));    	non-compiled	[CE]  ';'  expected	38	None	replace
106	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta,  norm2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	20	None	replace
107	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period),  norm2);  [CE]  cannot  find  symbol  period  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    	non-compiled	[CE]  cannot  find  symbol  period	3	None	replace
108	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  norm2,  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	21	None	replace
109	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  zero);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                  arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  zero);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2,  zero);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	21	None	replace
110	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  p2));  [CE]  ';'  expected  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  p2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  delta),  p2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    p2));    	non-compiled	[CE]  ';'  expected	37	None	replace
111	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  norm2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm1,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	39	None	replace
112	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	12	None	replace
113	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                p1.dotProduct(delta);        p1.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
114	[BUG]  [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          p1.dotProduct(delta);    p1.dotProduct(delta);  p2.dotProduct(delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                p1.dotProduct(delta);        p1.dotProduct(delta);    p2.dotProduct(delta);	  	compilable	  [FE]  arrays  first  differed  	22	1	add
115	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	8	7	replace
116	[BUG]  [BUGGY]  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    	compilable	  [FE]  NullPointerException  	8	7	replace
117	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2,  zero));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	36	None	replace
118	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	13	1	add
119	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);	  	compilable	  [FE]  arrays  first  differed  	13	1	add
120	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(p1,    delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	35	None	replace
121	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta),  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(p1,    delta),    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	35	None	replace
122	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.rint(delta),  norm2));  [CE]  ';'  expected  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.rint(delta),  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.rint(delta),  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.log(delta),    norm2));    	non-compiled	[CE]  ';'  expected	38	None	replace
123	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2,  norm2));  [CE]  cannot  find  symbol  period2  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2,  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2,  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2));    	non-compiled	[CE]  cannot  find  symbol  period2	12	None	replace
124	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2));  [CE]  cannot  find  symbol  period2  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2));    	non-compiled	[CE]  cannot  find  symbol  period2	12	None	replace
125	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  zero);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  zero);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  zero);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    zero);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  zero);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
126	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	if(p1!=  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }	          p1.dotProduct(delta);    p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	23	7	replace
127	[BUG]  [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	if(p1!=  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }	          p1.dotProduct(delta);    p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	23	7	replace
128	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	if(p1  ==  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }	          p1.dotProduct(delta);    p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	23	7	replace
129	[BUG]  [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [FE]  NullPointerException  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	if(p1  ==  null)  {  p1.dotProduct(delta);  p1.dotProduct(delta);  }	          p1.dotProduct(delta);    p1.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	23	7	replace
130	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2),  norm2);  [CE]  cannot  find  symbol  period2  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(period2),  norm2);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    	non-compiled	[CE]  cannot  find  symbol  period2	3	None	replace
131	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(p1,  p2,  delta));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    p1,    norm2);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	45	None	replace
132	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p1,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p1,  norm2),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p1,  norm2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	20	None	replace
133	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p2,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p2,  norm2),  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  p2,  norm2),  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2),    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	20	None	replace
134	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	15	None	add
135	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0        /        FastMath.sqrt(norm2),        delta);        this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	13	None	add
136	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2,  delta);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1,  norm2,  delta);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta),    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	21	None	replace
137	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)+  norm2));  [CE]  ';'  expected  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)+  norm2));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.log(delta)+  norm2));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta)+    norm2));    	non-compiled	[CE]  ';'  expected	29	None	replace
138	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  norm2);  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    norm2);    this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);	  	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	2	None	add
139	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
140	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	compilable	  [FE]  arrays  first  differed  	7	1	add
141	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  delta);  [CE]  cannot  find  symbol  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    new  Vector3D(1.0,  p1,  -p1.dotReduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
142	[BUG]  [BUGGY]  p1.dotProduct(norm2,  norm1);  [CE]  cannot  find  symbol  norm1  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  p1.dotProduct(norm2,  norm1);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	p1.dotProduct(norm2,  norm1);	  p1.dotProduct(norm2,    norm2);    	non-compiled	[CE]  cannot  find  symbol  norm1	40	None	replace
143	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	9	None	add
144	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	9	None	add
145	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(0.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	9	None	add
146	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1);  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1);	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	36	None	replace
147	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1.dotProduct(delta));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]                arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1.dotProduct(delta));  [BUGGY]      zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  p1.dotProduct(delta));	  this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(delta,    norm2));    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	36	None	replace
148	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1.dotProduct(delta)/  norm2,  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  p1.dotProduct(delta)/  norm2,  delta);	          this.direction    =    new    Vector3D(1.0    /    FastMath.sqrt(norm2),    delta);    p1.dotProduct(delta)/    norm2,    delta);    	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	32	None	replace
149	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	5	None	add
150	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	5	None	add
151	[BUG]  [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [CE]  not  a  statement  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]          this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)/  norm2,  delta);  p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	                this.direction        =        new        Vector3D(1.0,        p1,        -p1.dotProduct(delta)/        norm2,        delta);        this.direction    =    new    Vector3D(1.0,    p1,    -p1.dotProduct(delta)/    norm2,    delta);    p1.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  not  a  statement	5	None	add
152	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotReduct(delta)/  norm2,  delta);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotProduct(delta)/  norm2,  delta);  this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotReduct(delta)/  norm2,  delta);  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction    =    new    Vector3D(1.0,    p1,    -p2.dotProduct(delta)/    norm2,    delta);    this.direction  =  new  Vector3D(1.0,  p1,  -p2.dotReduct(delta)/  norm2,  delta);	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
153	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	if(p1!=  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }	          p1.dotProduct(delta);    p2.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	25	7	replace
154	[BUG]  [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [FE]  NullPointerException  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1!=  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	if(p1!=  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }	          p1.dotProduct(delta);    p2.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	25	7	replace
155	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	if(p1  ==  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }	          p1.dotProduct(delta);    p2.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	25	7	replace
156	[BUG]  [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [FE]  NullPointerException  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }      [BUGGY]  if(p1  ==  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }  [BUGGY]      this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	if(p1  ==  null)  {  p1.dotProduct(delta);  p2.dotProduct(delta);  }	          p1.dotProduct(delta);    p2.dotProduct(delta);    	compilable	  [FE]  NullPointerException  	25	7	replace
