compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,draw(p1, p2);
compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,rehash(p1, p2);
compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,setRange(p1, p2);
increase failing tests,55,replace, [FE] NullPointerException testContains,reset(p1, p2); , 
compilation error,79,replace,[CE] method sqrt in class FastMath cannot be applied to given types;,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(delta), norm2);
compilation error,79,replace,[CE] method sqrt in class FastMath cannot be applied to given types;,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(delta, norm2), delta);
compilation error,79,replace,[CE] method sqrt in class FastMath cannot be applied to given types;,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(delta, norm2));
compilation error,79,replace,[CE] ';' expected,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(delta), norm2), delta);
increase failing tests,79,replace, [FE] NullPointerException testContains,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); , 
compilation error,54,add,[CE] illegal start of type,,  super(p1, p2);
compilation error,54,add,[CE] illegal start of type,,  this(null, p1, p2);
compilation error,54,add,[CE] illegal start of type,,  super();
compilation error,54,add,[CE] illegal start of type,,  this(null, p1);
compilation error,54,add,[CE] illegal start of type,,  this(null, null);
compilation error,56,add,[CE] cannot find symbol,,  draw(p1, p2);
compilation error,56,add,[CE] illegal start of expression,,  if(p1 == null) { if(p2 == null) { throw new MathIllegalArgumentException(""); }
compilation error,56,add,[CE] illegal start of expression,,  if(p1 == null) { if(p2 == null) { return new Line(p1, p2); }
compilation error,56,add,[CE] illegal start of expression,,  if(p1 == null) { if(!setPaint(p1)) { return new Line(p1, p2); }
compilation error,56,add,[CE] illegal start of expression,,  if(p1 == null) { if(!setPaint(p2)) { return new Line(p1, p2); }
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = p2.getNormSq();
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = delta.getNormSq();
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  double norm2 = p2.getNormSq();
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = p1.getNormSq();
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = p2.getRawParameterSize();
compilation error,95,replace,[CE] cannot find symbol directedion,return direction; ,return this.directedion;
compilation error,95,replace,[CE] ';' expected,return direction; ,return this.directed direction;
compilation error,95,replace,[CE] missing return statement,return direction; , 
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2) <
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2) }
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2)!=
compilation error,55,add,[CE] constructor Object in class Object cannot be applied to given types;,,  super(p1, p2);
compilation error,55,add,[CE] no suitable constructor found for Line(<null>,Vector3D,Vector3D),,  this(null, p1, p2);
compilation error,55,add,[CE] constructor Object in class Object cannot be applied to given types;,,  super(p1);
compilation error,55,add,[CE] ';' expected,,  this(null, p1, p2));
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p1 = p1.subtract(p1);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p1 = p1.subtract(p2);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p1 = p2.subtract(p1);
compilation error,74,add,[CE] cannot find symbol,,  super.reset();
compilation error,74,add,[CE] variable p2 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p2 = p1.subtract(p1);
compilation error,88,add,[CE] no suitable constructor found for Line(int,int,Vector3D),,  reverted.draw(new Line(0, 0, direction));
compilation error,88,add,[CE] cannot find symbol,,  reverted.add(direction);
compilation error,88,add,[CE] cannot find symbol,,  reverted.draw(new Line(reverted));
compilation error,88,add,[CE] no suitable constructor found for Line(int,Vector3D),,  reverted.draw(new Line(0, direction));
compilation error,88,add,[CE] cannot find symbol version,,  reverted.draw(new Line(version, direction));
compilation error,79,add,[CE] constructor MathIllegalArgumentException in class MathIllegalArgumentException cannot be applied to given types;,,  if(norm2 > 0.0) { throw new MathIllegalArgumentException(""); }
increase failing tests,79,add, [FE] MathIllegalArgumentException testContains,,  if(norm2 > 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); }
compilation error,79,add,[CE] ')' expected,,  if(norm2 > 0.0) { throw new MathIllegalArgumentException(""); } else { Vector3D p1 = p1.subtract(p1); p2 = p2.subtract(p2); this.orientation = new Vector3D(1.0, p1,
compilation error,79,add,[CE] cannot find symbol NO_NORM,,  if(norm2 > 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.NO_NORM); }
compilation error,79,add,[CE] illegal start of expression,,  if(norm2 > 0.0) { throw new MathIllegalArgumentException(""); } else { Vector3D p1 = p1.subtract(p1); p2 = p2.subtract(p2); p1 = p2.dotProduct(delta);
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction == null) { direction = new Vector3D.Double(); }
increase failing tests,95,add, [FE] StackOverflowError testContains,,  Vector3D direction = getDirection();
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction!= null) { direction = new Vector3D.Double(); }
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction == null) { direction = new Vector3D.Composite(); }
compilation error,95,add,[CE] cannot find symbol version,,  Vector3D direction = getDirection(version); if(direction == null) { direction = new Vector3D.Double(); }
compilation error,87,replace,[CE] no suitable constructor found for Line(int,Vector3D),final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(0, zero.subtract(direction));
compilation error,87,replace,[CE] no suitable constructor found for Line(int,int,Vector3D),final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(0, 0, direction.subtract(direction));
compilation error,87,replace,[CE] no suitable constructor found for Line(int,String),final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(0, zero.toString());
compilation error,87,replace,[CE] cannot find symbol reverted,final Line reverted = new Line(zero, zero.subtract(direction)); , 
compilation error,88,replace,[CE] no suitable constructor found for Line(Line,Vector3D),return reverted; ,return reverted == null? reverted : new Line(reverted, direction);
compilation error,88,replace,[CE] no suitable constructor found for Line(int,Vector3D),return reverted; ,return reverted == null? reverted : new Line(0, direction);
compilation error,88,replace,[CE] ';' expected,return reverted; ,return reverted == null? reverted : new Line(0, direction));
increase failing tests,75,replace, [FE] AssertionError testContains,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNormSq() / 2.0;
compilation error,75,replace,[CE] cannot find symbol,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNormSqrt();
increase failing tests,75,replace, [FE] MathIllegalArgumentException testContains,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNormSq() - 1;
compilation error,75,replace,[CE] cannot find symbol norm2,final double norm2 = delta.getNormSq(); , 
compilation error,74,replace,[CE] illegal start of expression,final Vector3D delta = p2.subtract(p1); ,static final Vector3D delta = p1.subtract(p2);
compilation error,74,replace,[CE] illegal start of expression,final Vector3D delta = p2.subtract(p1); ,static Vector3D delta = p1.subtract(p2);
compilation error,56,replace,[CE] illegal start of expression,} ,setRange(new Line(p1, p2));
compilation error,56,replace,[CE] illegal start of expression,} ,setRange(new Direction(p1, p2));
compilation error,56,replace,[CE] illegal start of expression,} ,setRange(new Line(p1), p2);
increase failing tests,76,replace, [FE] MathIllegalArgumentException testContains,if (norm2 == 0.0) { ,if(norm2 == 0.0 || norm2 == 1.0) {
increase failing tests,76,replace, [FE] MathIllegalArgumentException testContains,if (norm2 == 0.0) { ,if(norm2 == 0.0 || norm2 > 0.0) {
compilation error,87,add,[CE] cannot find symbol vector,,  Vector3D direction = vector.getDirection();
compilation error,87,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction == null) { direction = new Vector3D.Double(); }
compilation error,87,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction == null) { direction = new Vector3D.vert(direction); }
compilation error,87,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(); if(direction!= null) { direction = new Vector3D.vert(direction); }
compilation error,88,add,[CE] cannot find symbol,,  reverted.put(direction, Math.min(reverted.length() - 1));
compilation error,88,add,[CE] cannot find symbol,,  reverted.put(0, Math.min(reverted.length() - 1), direction);
compilation error,88,add,[CE] no suitable method found for max(Line),,  reverted.put(0, Math.max(reverted), direction);
compilation error,88,add,[CE] cannot find symbol,,  reverted.put(0, Math.min(reverted.length() - 1));
compilation error,88,add,[CE] cannot find symbol Zone,,  reverted.put(Zone.getDefault(), direction);
compilation error,74,replace,[CE] cannot find symbol p1,final Vector3D delta = p2.subtract(p1); ,final Vector3D delta = this.p1.subtract(p2);
increase failing tests,74,replace, [FE] NullPointerException testContains,final Vector3D delta = p2.subtract(p1); ,final Vector3D delta = this.direction.subtract(p2);
compilation error,74,replace,[CE] cannot find symbol,final Vector3D delta = p2.subtract(p1); ,final Vector3D delta = p1.convergent(p2);
compilation error,79,add,[CE] no suitable method found for subtract(double),,  p1 = p1.subtract(norm2);
compilation error,79,add,[CE] cannot find symbol,,  p1.setNorm(norm2);
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-0.0);
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-1);
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-0.5);
compilation error,88,replace,[CE] cannot find symbol,return reverted; ,return reverted.toCharArray();
compilation error,88,replace,[CE] incompatible types,return reverted; ,return reverted.toString();
compilation error,88,replace,[CE] cannot find symbol vert,return reverted; ,return reverted.vert;
compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,setThreadContext(p1, p2);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Double p1 = p1.subtract(p2);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final double p1 = p1.subtract(p2);
compilation error,74,add,[CE] bad operand type Vector3D for unary operator '-',,  p1.setMinimumFractionDigits(-p1);
increase failing tests,76,replace, [FE] MathIllegalArgumentException testContains,if (norm2 == 0.0) { ,if(norm2!= 0.0) {
increase failing tests,75,replace, [FE] AssertionError testContains,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNormSq() + 1;
compilation error,95,replace,[CE] cannot find symbol orientation,return direction; ,return this.orientation;
compilation error,54,add,[CE] illegal start of type,,  super(p1.getComposite()); this.orientation = p2.getOrientation();
compilation error,54,add,[CE] illegal start of type,,  super(p1.getComponentType()); this.orientation = p2.getOrientation();
compilation error,54,add,[CE] illegal start of type,,  super(p1);
compilation error,54,add,[CE] illegal start of type,,  super(p1); this.orientation = p2.getOrientation();
compilation error,54,replace,[CE] invalid method declaration; return type required,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2);
compilation error,54,replace,[CE] ,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2)throws MathIllegalArgumentException("");
compilation error,54,replace,[CE] ,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2)throw MathIllegalArgumentException("");
compilation error,54,replace,[CE] ,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public final Line(final Vector3D p1, final Vector3D p2)throw MathIllegalArgumentException("");
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = delta.getNorM();
compilation error,55,add,[CE] cannot find symbol,,  super(p1.getComposite());
compilation error,55,add,[CE] cannot find symbol,,  super(p1.getComponentType());
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(getRange());
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(getRange()); if(direction!= null) { direction = getRange(); }
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(getRange()); if(direction == null) { direction = getRange(); }
compilation error,95,add,[CE] cannot find symbol delta,,  Vector3D direction = this.delta.getDirection(); if(direction!= null) { direction = getDirection(); }
compilation error,95,add,[CE] cannot find symbol,,  Vector3D direction = getDirection(getRange()); if(direction!= null) { return direction; }
compilation error,87,add,[CE] cannot find symbol,,  Vector3D direction = getRange();
compilation error,87,add,[CE] cannot find symbol orientation,,  Vector3D direction = getDirection(); if(orientation == PlotOrientation.HORIZONTAL) { throw new IllegalArgumentException("Function values at endpoints do not have different signs."); }
compilation error,87,add,[CE] cannot find symbol orientation,,  Vector3D direction = getDirection(); if(orientation == PlotOrientation.HORIZONTAL) { return new Line(0, direction); }
compilation error,87,replace,[CE] no suitable constructor found for Line(int,Vector3D),final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(0, this.direction.subtract(direction));
compilation error,56,replace,[CE] illegal start of expression,} ,this.orientation = p1.getOrientation();
compilation error,56,replace,[CE] illegal start of expression,} ,this.orientation = Maps.newHashMap();
compilation error,56,replace,[CE] illegal start of expression,} ,this.orientation = getRangeOrientation();
compilation error,56,replace,[CE] illegal start of expression,} ,this.orientation = getOrientation();
compilation error,75,add,[CE] cannot find symbol,,  final double norm1 = delta.getNormAt();
compilation error,56,add,[CE] cannot find symbol,,  setDirection(p1, p2);
compilation error,56,add,[CE] cannot find symbol orientation,,  this.orientation = p2.getOrientation();
compilation error,56,add,[CE] cannot find symbol,,  setRange(p2);
compilation error,79,replace,[CE] ';' expected,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(2.0 / FastMath.sqrt(delta), norm2), delta);
compilation error,79,replace,[CE] method sqrt in class FastMath cannot be applied to given types;,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(delta, norm2), null);
compilation error,87,replace,[CE] no suitable constructor found for Line(int,Vector3D),final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(0, direction.subtract(zero));
compilation error,87,replace,[CE] cannot find symbol directed,final Line reverted = new Line(zero, zero.subtract(direction)); ,final Line reverted = new Line(directed, zero.subtract(direction));
compilation error,87,replace,[CE] illegal start of expression,final Line reverted = new Line(zero, zero.subtract(direction)); ,static final Line reverted = new Line(zero, direction.subtract(direction));
compilation error,87,add,[CE] cannot find symbol directedMinutes,,  Vector3D direction = Math.max(directedMinutes, direction);
compilation error,87,add,[CE] no suitable method found for max(Vector3D,float),,  Vector3D direction = Math.max(direction, 0.5f);
compilation error,56,add,[CE] cannot find symbol,,  setCoordinate(p1, p2);
compilation error,88,replace,[CE] no suitable constructor found for Line(int,int,Vector3D),return reverted; ,return(reverted == null)? reverted : new Line(0, 0, direction);
compilation error,88,replace,[CE] no suitable constructor found for Line(int,Vector3D),return reverted; ,return(reverted == null)? reverted : new Line(0, direction);
compilation error,88,replace,[CE] cannot find symbol directed,return reverted; ,return(reverted == null)? reverted : new Line(directed, inverse, direction);
compilation error,55,add,[CE] cannot find symbol,,  this(new Vector3D.Double(), new Vector3D.Double());
compilation error,55,add,[CE] cannot find symbol orientation,,  this.orientation = Maps.newHashMap();
compilation error,55,add,[CE] cannot find symbol,,  this(new Vector3D.Double(), new Vector2D.Double());
compilation error,55,add,[CE] cannot find symbol,,  this(new Vector3D.Orientation(), new Line(p1, p2));
compilation error,74,replace,[CE] cannot find symbol,final Vector3D delta = p2.subtract(p1); ,final Vector3D delta = p1.multiply(p2);
compilation error,95,replace,[CE] cannot find symbol direion,return direction; ,return this.direion;
increase failing tests,75,replace, [FE] AssertionError testClosest,final double norm2 = delta.getNormSq(); ,final double norm2 = p1.getNormSq();
compilation error,75,replace,[CE] cannot find symbol,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNorm2();
increase failing tests,75,replace, [FE] AssertionError testContains,final double norm2 = delta.getNormSq(); ,final double norm2 = delta.getNormSq() * 2;
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Double p1 = p1.subtract(p1);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p1 = p1.dotProvide(p1);
compilation error,74,add,[CE] variable p1 is already defined in method reset(Vector3D,Vector3D),,  final Vector3D p1 = p1.dotProgress(p1);
compilation error,75,add,[CE] incompatible types,,  final double norm1 = p1.subtract(delta);
compilation error,75,add,[CE] cannot find symbol,,  final double norm1 = p1.dotProvide(delta);
compilation error,76,replace,[CE] cannot find symbol norm1,if (norm2 == 0.0) { ,if(norm1 == 0.0) {
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = p1.getStandardDeviation();
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = Math.abs(relativeAccuracy * Math.abs(p1), absoluteAccuracy);
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = Math.abs(relativeAccuracy * p2.getStandardDeviation());
compilation error,76,add,[CE] variable norm2 is already defined in method reset(Vector3D,Vector3D),,  final double norm2 = p1.getOrMean();
compilation error,95,add,[CE] cannot find symbol,,  direction = Vector3D.getDirection(getMinimumLine(), getMaximumLine());
compilation error,95,add,[CE] cannot find symbol,,  direction = Vector3D.getDirection(getMean(), direction);
compilation error,95,add,[CE] cannot find symbol,,  direction = Vector3D.getDirection(getBase());
compilation error,95,add,[CE] cannot find symbol,,  direction = Vector3D.getDirection(getMinimumLine());
compilation error,95,add,[CE] cannot find symbol,,  direction = Vector3D.getDirection(getMean());
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits()); p2.setLastChild(-p1.getChildCount(), -p1.getChildCount());
compilation error,79,add,[CE] bad operand type String for unary operator '-',,  p1.setMinimumFractionDigits(-p1.toString() + p2.toString());
compilation error,79,add,[CE] no suitable method found for min(double),,  p1.setMinimumFractionDigits(-p1.dotProp(Math.min(norm2)), -p1.dotProp(norm2));
compilation error,79,add,[CE] cannot find symbol,,  p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits()); p2.setLastChild(-p1.getChildFloat(), -p1.getChildFloat());
compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,setReturnZero(p1, p2);
compilation error,55,replace,[CE] cannot find symbol,reset(p1, p2); ,setRenderer(p1, p2);
compilation error,54,replace,[CE] not a statement,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2) { 0;
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2) } 0;
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2)!= 0;
compilation error,54,replace,[CE] ';' expected,public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { ,public Line(final Vector3D p1, final Vector3D p2) == 0;
compilation error,54,add,[CE] illegal start of type,,  this(new Vector3D.Double(), new Vector3D.Double());
compilation error,54,add,[CE] illegal start of type,,  this(new Vector3D.Double(), new Vector2D.Double());
compilation error,54,add,[CE] illegal start of type,,  this(new Vector3D.Double());
compilation error,54,add,[CE] illegal start of type,,  this(new Vector3D.Double(), new Line(p1, p2));
compilation error,56,replace,[CE] illegal start of expression,} ,this.orientation = direction.getOrientation();
compilation error,79,replace,[CE] cannot find symbol Norm2,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(Norm2, norm2), delta);
compilation error,79,replace,[CE] method sin in class FastMath cannot be applied to given types;,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sin(p1, norm2), delta);
compilation error,79,replace,[CE] ')' expected,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(Norm2, delta);
compilation error,79,replace,[CE] cannot find symbol normal2,this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); ,this.direction = new Vector3D(1.0 / FastMath.sqrt(normal2), delta);
compilation error,88,add,[CE] cannot find symbol,,  reverted.put(0, reverted);
compilation error,88,add,[CE] cannot find symbol line,,  reverted.draw(line);
compilation error,88,add,[CE] cannot find symbol directed,,  reverted.draw(new Line(directed, direction));
compilation error,88,add,[CE] cannot find symbol,,  reverted.draw(new Line(direction, direction));
