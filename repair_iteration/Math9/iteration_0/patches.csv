bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action2	[BUG]  [BUGGY]  draw(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  draw(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	draw(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  rehash(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  rehash(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	rehash(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
4	[BUG]  [BUGGY]  setRange(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  setRange(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	setRange(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
11	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
12	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
13	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2));	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
14	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2),  delta);  [CE]  ';'  expected  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta),  norm2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  ';'  expected	19	None	replace
21	[BUG]  [BUGGY]    super(p1,  p2);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super(p1,  p2);  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super(p1,  p2);		non-compiled	[CE]  illegal  start  of  type	8	None	add
22	[BUG]  [BUGGY]    this(null,  p1,  p2);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(null,  p1,  p2);  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(null,  p1,  p2);		non-compiled	[CE]  illegal  start  of  type	8	None	add
23	[BUG]  [BUGGY]    super();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super();  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super();		non-compiled	[CE]  illegal  start  of  type	8	None	add
24	[BUG]  [BUGGY]    this(null,  p1);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(null,  p1);  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(null,  p1);		non-compiled	[CE]  illegal  start  of  type	8	None	add
25	[BUG]  [BUGGY]    this(null,  null);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(null,  null);  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(null,  null);		non-compiled	[CE]  illegal  start  of  type	8	None	add
31	[BUG]  [BUGGY]    draw(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    draw(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    draw(p1,  p2);		non-compiled	[CE]  cannot  find  symbol	12	None	add
32	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  throw  new  MathIllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
33	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  new  Line(p1,  p2);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    if(p1  ==  null)  {  if(p2  ==  null)  {  return  new  Line(p1,  p2);  }  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    if(p1  ==  null)  {  if(p2  ==  null)  {  return  new  Line(p1,  p2);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
34	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(!setPaint(p1))  {  return  new  Line(p1,  p2);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    if(p1  ==  null)  {  if(!setPaint(p1))  {  return  new  Line(p1,  p2);  }  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    if(p1  ==  null)  {  if(!setPaint(p1))  {  return  new  Line(p1,  p2);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
35	[BUG]  [BUGGY]    if(p1  ==  null)  {  if(!setPaint(p2))  {  return  new  Line(p1,  p2);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    if(p1  ==  null)  {  if(!setPaint(p2))  {  return  new  Line(p1,  p2);  }  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    if(p1  ==  null)  {  if(!setPaint(p2))  {  return  new  Line(p1,  p2);  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
41	[BUG]  [BUGGY]    final  double  norm2  =  p2.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  p2.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  p2.getNormSq();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
42	[BUG]  [BUGGY]    final  double  norm2  =  delta.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  delta.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  delta.getNormSq();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
43	[BUG]  [BUGGY]    double  norm2  =  p2.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    double  norm2  =  p2.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    double  norm2  =  p2.getNormSq();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
44	[BUG]  [BUGGY]    final  double  norm2  =  p1.getNormSq();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  p1.getNormSq();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  p1.getNormSq();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
45	[BUG]  [BUGGY]    final  double  norm2  =  p2.getRawParameterSize();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  p2.getRawParameterSize();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  p2.getRawParameterSize();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
51	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.direction;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	add	return  this.direction;	return  direction;  	compilable	  [FE]  arrays  first  differed  testRevert	5	1
52	[BUG]  [BUGGY]  return  this.direction;  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.direction;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	return  this.direction;	return  direction;  	compilable	  [FE]  arrays  first  differed  testRevert	5	1	replace
53	[BUG]  [BUGGY]  return  this.directedion;  [CE]  cannot  find  symbol  directedion  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.directedion;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	return  this.directedion;	return  direction;  	non-compiled	[CE]  cannot  find  symbol  directedion	5	None	replace
54	[BUG]  [BUGGY]  return  this.directed  direction;  [CE]  ';'  expected  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.directed  direction;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	return  this.directed  direction;	return  direction;  	non-compiled	[CE]  ';'  expected	5	None	replace
55	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	  	return  direction;  	non-compiled	[CE]  missing  return  statement	5	None	replace
61	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	add	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	compilable	  [FE]  arrays  first  differed  testRevert	7	1
62	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  [FE]  arrays  first  differed  testRevert  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	compilable	  [FE]  arrays  first  differed  testRevert	7	1	replace
62	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  <  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  <  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  <	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
71	[BUG]  [BUGGY]    super(p1,  p2);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super(p1,  p2);  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    super(p1,  p2);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	10	None	add
72	[BUG]  [BUGGY]    this(null,  p1,  p2);  [CE]  no  suitable  constructor  found  for  Line(<null>,Vector3D,Vector3D)  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this(null,  p1,  p2);  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this(null,  p1,  p2);		non-compiled	[CE]  no  suitable  constructor  found  for  Line(<null>,Vector3D,Vector3D)	10	None	add
73	[BUG]  [BUGGY]    super(p1);  [CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super(p1);  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    super(p1);		non-compiled	[CE]  constructor  Object  in  class  Object  cannot  be  applied  to  given  types;	10	None	add
74	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super();  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	add	    super();		compilable	  [FE]  arrays  first  differed  testRevert	10	1
75	[BUG]  [BUGGY]    super();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super();  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    super();		compilable	  [FE]  arrays  first  differed  testRevert	10	1	add
75	[BUG]  [BUGGY]    this(null,  p1,  p2));  [CE]  ';'  expected  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this(null,  p1,  p2));  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this(null,  p1,  p2));		non-compiled	[CE]  ';'  expected	10	None	add
81	[BUG]  [BUGGY]    final  Vector3D  p1  =  p1.subtract(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p1  =  p1.subtract(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p1  =  p1.subtract(p1);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
82	[BUG]  [BUGGY]    final  Vector3D  p1  =  p1.subtract(p2);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p1  =  p1.subtract(p2);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p1  =  p1.subtract(p2);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
83	[BUG]  [BUGGY]    final  Vector3D  p1  =  p2.subtract(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p1  =  p2.subtract(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p1  =  p2.subtract(p1);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
84	[BUG]  [BUGGY]    super.reset();  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super.reset();  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    super.reset();		non-compiled	[CE]  cannot  find  symbol	14	None	add
85	[BUG]  [BUGGY]    final  Vector3D  p2  =  p1.subtract(p1);  [CE]  variable  p2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p2  =  p1.subtract(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p2  =  p1.subtract(p1);		non-compiled	[CE]  variable  p2  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
91	[BUG]  [BUGGY]    reverted.draw(new  Line(0,  0,  direction));  [CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(0,  0,  direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(0,  0,  direction));		non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)	4	None	add
92	[BUG]  [BUGGY]    reverted.add(direction);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.add(direction);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.add(direction);		non-compiled	[CE]  cannot  find  symbol	4	None	add
93	[BUG]  [BUGGY]    reverted.draw(new  Line(reverted));  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(reverted));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(reverted));		non-compiled	[CE]  cannot  find  symbol	4	None	add
94	[BUG]  [BUGGY]    reverted.draw(new  Line(0,  direction));  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(0,  direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(0,  direction));		non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	4	None	add
95	[BUG]  [BUGGY]    reverted.draw(new  Line(version,  direction));  [CE]  cannot  find  symbol  version  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(version,  direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(version,  direction));		non-compiled	[CE]  cannot  find  symbol  version	4	None	add
101	[BUG]  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  [CE]  constructor  MathIllegalArgumentException  in  class  MathIllegalArgumentException  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }		non-compiled	[CE]  constructor  MathIllegalArgumentException  in  class  MathIllegalArgumentException  cannot  be  applied  to  given  types;	20	None	add
103	[BUG]  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  this.orientation  =  new  Vector3D(1.0,  p1,  [CE]  ')'  expected  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  this.orientation  =  new  Vector3D(1.0,  p1,  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  this.orientation  =  new  Vector3D(1.0,  p1,		non-compiled	[CE]  ')'  expected	20	None	add
104	[BUG]  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.NO_NORM);  }  [CE]  cannot  find  symbol  NO_NORM  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.NO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.NO_NORM);  }		non-compiled	[CE]  cannot  find  symbol  NO_NORM	20	None	add
105	[BUG]  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  p1  =  p2.dotProduct(delta);  [CE]  illegal  start  of  expression  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  p1  =  p2.dotProduct(delta);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    if(norm2  >  0.0)  {  throw  new  MathIllegalArgumentException( " ");  }  else  {  Vector3D  p1  =  p1.subtract(p1);  p2  =  p2.subtract(p2);  p1  =  p2.dotProduct(delta);		non-compiled	[CE]  illegal  start  of  expression	20	None	add
111	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
113	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.Double();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.Double();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.Double();  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
114	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Composite();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Composite();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Composite();  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
115	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection(version);  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [CE]  cannot  find  symbol  version  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection(version);  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection(version);  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }		non-compiled	[CE]  cannot  find  symbol  version	6	None	add
121	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(0,  zero.subtract(direction));  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(0,  zero.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(0,  zero.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	1	None	replace
122	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(direction,  zero.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	final  Line  reverted  =  new  Line(direction,  zero.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1
123	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(direction,  zero.subtract(direction));  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(direction,  zero.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(direction,  zero.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1	replace
123	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(0,  0,  direction.subtract(direction));  [CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(0,  0,  direction.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(0,  0,  direction.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)	1	None	replace
124	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(0,  zero.toString());  [CE]  no  suitable  constructor  found  for  Line(int,String)  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(0,  zero.toString());  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(0,  zero.toString());	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,String)	1	None	replace
125	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  reverted  [CONTEXT]  public  Line  revert()  {  [BUGGY]    [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	  	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  cannot  find  symbol  reverted	1	None	replace
131	[BUG]  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(reverted,  direction);  [CE]  no  suitable  constructor  found  for  Line(Line,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(reverted,  direction);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted  ==  null?  reverted  :  new  Line(reverted,  direction);	return  reverted;  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(Line,Vector3D)	3	None	replace
132	[BUG]  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(0,  direction);  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(0,  direction);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted  ==  null?  reverted  :  new  Line(0,  direction);	return  reverted;  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	3	None	replace
133	[BUG]  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(0,  direction));  [CE]  ';'  expected  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(0,  direction));  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted  ==  null?  reverted  :  new  Line(0,  direction));	return  reverted;  	non-compiled	[CE]  ';'  expected	3	None	replace
134	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(reverted);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	add	return  reverted  ==  null?  reverted  :  new  Line(reverted);	return  reverted;  	compilable	  [FE]  arrays  first  differed  testRevert	3	1
135	[BUG]  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(reverted);  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted  ==  null?  reverted  :  new  Line(reverted);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted  ==  null?  reverted  :  new  Line(reverted);	return  reverted;  	compilable	  [FE]  arrays  first  differed  testRevert	3	1	replace
143	[BUG]  [BUGGY]  final  double  norm2  =  delta.getNormSqrt();  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]  final  double  norm2  =  delta.getNormSqrt();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  delta.getNormSqrt();	final  double  norm2  =  delta.getNormSq();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
145	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  norm2  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	  	final  double  norm2  =  delta.getNormSq();  	non-compiled	[CE]  cannot  find  symbol  norm2	15	None	replace
151	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  final  Vector3D  delta  =  p1.subtract(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	add	final  Vector3D  delta  =  p1.subtract(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	compilable	  [FE]  arrays  first  differed  testRevert	13	1
152	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.subtract(p2);  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  final  Vector3D  delta  =  p1.subtract(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	final  Vector3D  delta  =  p1.subtract(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	compilable	  [FE]  arrays  first  differed  testRevert	13	1	replace
152	[BUG]  [BUGGY]  static  final  Vector3D  delta  =  p1.subtract(p2);  [CE]  illegal  start  of  expression  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  static  final  Vector3D  delta  =  p1.subtract(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	static  final  Vector3D  delta  =  p1.subtract(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
154	[BUG]  [BUGGY]  static  Vector3D  delta  =  p1.subtract(p2);  [CE]  illegal  start  of  expression  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  static  Vector3D  delta  =  p1.subtract(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	static  Vector3D  delta  =  p1.subtract(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
162	[BUG]  [BUGGY]  setRange(new  Line(p1,  p2));  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  setRange(new  Line(p1,  p2));  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	setRange(new  Line(p1,  p2));	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
163	[BUG]  [BUGGY]  setRange(new  Direction(p1,  p2));  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  setRange(new  Direction(p1,  p2));  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	setRange(new  Direction(p1,  p2));	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  setRange(new  Line(p1),  p2);  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  setRange(new  Line(p1),  p2);  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	setRange(new  Line(p1),  p2);	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
174	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  testRevert	17	1
175	[BUG]  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  testRevert	17	1	replace
181	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	    Vector3D  direction  =  getDirection();		compilable	  [FE]  arrays  first  differed  testRevert	2	1
182	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();		compilable	  [FE]  arrays  first  differed  testRevert	2	1	add
182	[BUG]  [BUGGY]    Vector3D  direction  =  vector.getDirection();  [CE]  cannot  find  symbol  vector  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  vector.getDirection();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  vector.getDirection();		non-compiled	[CE]  cannot  find  symbol  vector	2	None	add
183	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.Double();  }		non-compiled	[CE]  cannot  find  symbol	2	None	add
184	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.vert(direction);  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.vert(direction);  }  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();  if(direction  ==  null)  {  direction  =  new  Vector3D.vert(direction);  }		non-compiled	[CE]  cannot  find  symbol	2	None	add
185	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.vert(direction);  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.vert(direction);  }  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();  if(direction!=  null)  {  direction  =  new  Vector3D.vert(direction);  }		non-compiled	[CE]  cannot  find  symbol	2	None	add
191	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    final  double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1
192	[BUG]  [BUGGY]    final  double  norm1  =  delta.getNormSq();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
192	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.dotProduct(delta);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    final  double  norm1  =  p1.dotProduct(delta);		compilable	  [FE]  arrays  first  differed  testRevert	16	1
193	[BUG]  [BUGGY]    final  double  norm1  =  p1.dotProduct(delta);  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.dotProduct(delta);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  p1.dotProduct(delta);		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
193	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  delta.getNorm();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    final  double  norm1  =  delta.getNorm();		compilable	  [FE]  arrays  first  differed  testRevert	16	1
194	[BUG]  [BUGGY]    final  double  norm1  =  delta.getNorm();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  delta.getNorm();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  delta.getNorm();		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
194	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    final  double  norm1  =  p1.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1
195	[BUG]  [BUGGY]    final  double  norm1  =  p1.getNormSq();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  p1.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
195	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  Double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    final  Double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1
196	[BUG]  [BUGGY]    final  Double  norm1  =  delta.getNormSq();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  Double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  Double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
1	[BUG]  [BUGGY]    reverted.put(direction,  Math.min(reverted.length()  -  1));  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(direction,  Math.min(reverted.length()  -  1));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(direction,  Math.min(reverted.length()  -  1));		non-compiled	[CE]  cannot  find  symbol	4	None	add
2	[BUG]  [BUGGY]    reverted.put(0,  Math.min(reverted.length()  -  1),  direction);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(0,  Math.min(reverted.length()  -  1),  direction);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(0,  Math.min(reverted.length()  -  1),  direction);		non-compiled	[CE]  cannot  find  symbol	4	None	add
3	[BUG]  [BUGGY]    reverted.put(0,  Math.max(reverted),  direction);  [CE]  no  suitable  method  found  for  max(Line)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(0,  Math.max(reverted),  direction);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(0,  Math.max(reverted),  direction);		non-compiled	[CE]  no  suitable  method  found  for  max(Line)	4	None	add
4	[BUG]  [BUGGY]    reverted.put(0,  Math.min(reverted.length()  -  1));  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(0,  Math.min(reverted.length()  -  1));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(0,  Math.min(reverted.length()  -  1));		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]    reverted.put(Zone.getDefault(),  direction);  [CE]  cannot  find  symbol  Zone  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(Zone.getDefault(),  direction);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(Zone.getDefault(),  direction);		non-compiled	[CE]  cannot  find  symbol  Zone	4	None	add
22	[BUG]  [BUGGY]  final  Vector3D  delta  =  this.p1.subtract(p2);  [CE]  cannot  find  symbol  p1  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  final  Vector3D  delta  =  this.p1.subtract(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	final  Vector3D  delta  =  this.p1.subtract(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	non-compiled	[CE]  cannot  find  symbol  p1	13	None	replace
24	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.convergent(p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  final  Vector3D  delta  =  p1.convergent(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	final  Vector3D  delta  =  p1.convergent(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
41	[BUG]  [BUGGY]    p1  =  p1.subtract(norm2);  [CE]  no  suitable  method  found  for  subtract(double)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1  =  p1.subtract(norm2);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1  =  p1.subtract(norm2);		non-compiled	[CE]  no  suitable  method  found  for  subtract(double)	20	None	add
42	[BUG]  [BUGGY]    p1.setNorm(norm2);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setNorm(norm2);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setNorm(norm2);		non-compiled	[CE]  cannot  find  symbol	20	None	add
43	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-0.0);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-0.0);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-0.0);		non-compiled	[CE]  cannot  find  symbol	20	None	add
44	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-1);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-1);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-1);		non-compiled	[CE]  cannot  find  symbol	20	None	add
45	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-0.5);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-0.5);  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-0.5);		non-compiled	[CE]  cannot  find  symbol	20	None	add
62	[BUG]  [BUGGY]  return  reverted.toCharArray();  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted.toCharArray();  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted.toCharArray();	return  reverted;  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  return  reverted.toString();  [CE]  incompatible  types  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted.toString();  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted.toString();	return  reverted;  	non-compiled	[CE]  incompatible  types	3	None	replace
64	[BUG]  [BUGGY]  return  reverted.vert;  [CE]  cannot  find  symbol  vert  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return  reverted.vert;  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return  reverted.vert;	return  reverted;  	non-compiled	[CE]  cannot  find  symbol  vert	3	None	replace
84	[BUG]  [BUGGY]  setThreadContext(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  setThreadContext(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	setThreadContext(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
101	[BUG]  [BUGGY]    final  Double  p1  =  p1.subtract(p2);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Double  p1  =  p1.subtract(p2);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Double  p1  =  p1.subtract(p2);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
103	[BUG]  [BUGGY]    final  double  p1  =  p1.subtract(p2);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  double  p1  =  p1.subtract(p2);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  double  p1  =  p1.subtract(p2);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
105	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1);  [CE]  bad  operand  type  Vector3D  for  unary  operator  '-'  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    p1.setMinimumFractionDigits(-p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    p1.setMinimumFractionDigits(-p1);		non-compiled	[CE]  bad  operand  type  Vector3D  for  unary  operator  '-'	14	None	add
122	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  <  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(norm2  <  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  testRevert	17	1
123	[BUG]  [BUGGY]  if(norm2  <  0.0)  {  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  <  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  <  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  testRevert	17	1	replace
164	[BUG]  [BUGGY]  return  this.orientation;  [CE]  cannot  find  symbol  orientation  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.orientation;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	return  this.orientation;	return  direction;  	non-compiled	[CE]  cannot  find  symbol  orientation	5	None	replace
181	[BUG]  [BUGGY]    super(p1.getComposite());  this.orientation  =  p2.getOrientation();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super(p1.getComposite());  this.orientation  =  p2.getOrientation();  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super(p1.getComposite());  this.orientation  =  p2.getOrientation();		non-compiled	[CE]  illegal  start  of  type	8	None	add
182	[BUG]  [BUGGY]    super(p1.getComponentType());  this.orientation  =  p2.getOrientation();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super(p1.getComponentType());  this.orientation  =  p2.getOrientation();  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super(p1.getComponentType());  this.orientation  =  p2.getOrientation();		non-compiled	[CE]  illegal  start  of  type	8	None	add
184	[BUG]  [BUGGY]    super(p1);  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super(p1);  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super(p1);		non-compiled	[CE]  illegal  start  of  type	8	None	add
185	[BUG]  [BUGGY]    super(p1);  this.orientation  =  p2.getOrientation();  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    super(p1);  this.orientation  =  p2.getOrientation();  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    super(p1);  this.orientation  =  p2.getOrientation();		non-compiled	[CE]  illegal  start  of  type	8	None	add
201	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2);  [CE]  invalid  method  declaration;  return  type  required  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2);  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2);	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
202	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)throws  MathIllegalArgumentException( " ");  [CE]  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)throws  MathIllegalArgumentException( " ");  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)throws  MathIllegalArgumentException( " ");	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  	7	None	replace
203	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");  [CE]  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  	7	None	replace
204	[BUG]  [BUGGY]  public  final  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");  [CE]  [CONTEXT]    [BUGGY]  public  final  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  final  Line(final  Vector3D  p1,  final  Vector3D  p2)throw  MathIllegalArgumentException( " ");	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  	7	None	replace
225	[BUG]  [BUGGY]    final  double  norm2  =  delta.getNorM();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  delta.getNorM();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  delta.getNorM();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
244	[BUG]  [BUGGY]    super(p1.getComposite());  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super(p1.getComposite());  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    super(p1.getComposite());		non-compiled	[CE]  cannot  find  symbol	10	None	add
245	[BUG]  [BUGGY]    super(p1.getComponentType());  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    super(p1.getComponentType());  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    super(p1.getComponentType());		non-compiled	[CE]  cannot  find  symbol	10	None	add
261	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection(getRange());		non-compiled	[CE]  cannot  find  symbol	6	None	add
262	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  direction  =  getRange();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  direction  =  getRange();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  direction  =  getRange();  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
263	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction  ==  null)  {  direction  =  getRange();  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction  ==  null)  {  direction  =  getRange();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection(getRange());  if(direction  ==  null)  {  direction  =  getRange();  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
264	[BUG]  [BUGGY]    Vector3D  direction  =  this.delta.getDirection();  if(direction!=  null)  {  direction  =  getDirection();  }  [CE]  cannot  find  symbol  delta  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  this.delta.getDirection();  if(direction!=  null)  {  direction  =  getDirection();  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  this.delta.getDirection();  if(direction!=  null)  {  direction  =  getDirection();  }		non-compiled	[CE]  cannot  find  symbol  delta	6	None	add
265	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  return  direction;  }  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  return  direction;  }  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    Vector3D  direction  =  getDirection(getRange());  if(direction!=  null)  {  return  direction;  }		non-compiled	[CE]  cannot  find  symbol	6	None	add
282	[BUG]  [BUGGY]    Vector3D  direction  =  getRange();  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getRange();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getRange();		non-compiled	[CE]  cannot  find  symbol	2	None	add
283	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  throw  new  IllegalArgumentException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [CE]  cannot  find  symbol  orientation  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  throw  new  IllegalArgumentException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  throw  new  IllegalArgumentException( "Function  values  at  endpoints  do  not  have  different  signs. ");  }		non-compiled	[CE]  cannot  find  symbol  orientation	2	None	add
284	[BUG]  [BUGGY]    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  return  new  Line(0,  direction);  }  [CE]  cannot  find  symbol  orientation  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  return  new  Line(0,  direction);  }  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  getDirection();  if(orientation  ==  PlotOrientation.HORIZONTAL)  {  return  new  Line(0,  direction);  }		non-compiled	[CE]  cannot  find  symbol  orientation	2	None	add
285	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]    final  Vector3D  direction  =  getDirection();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	    final  Vector3D  direction  =  getDirection();		compilable	  [FE]  arrays  first  differed  testRevert	2	1
286	[BUG]  [BUGGY]    final  Vector3D  direction  =  getDirection();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]    final  Vector3D  direction  =  getDirection();  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    final  Vector3D  direction  =  getDirection();		compilable	  [FE]  arrays  first  differed  testRevert	2	1	add
302	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(zero,  this.direction.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	final  Line  reverted  =  new  Line(zero,  this.direction.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1
303	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(zero,  this.direction.subtract(direction));  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(zero,  this.direction.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(zero,  this.direction.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1	replace
303	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(0,  this.direction.subtract(direction));  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(0,  this.direction.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(0,  this.direction.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	1	None	replace
321	[BUG]  [BUGGY]  this.orientation  =  p1.getOrientation();  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  this.orientation  =  p1.getOrientation();  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	this.orientation  =  p1.getOrientation();	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
322	[BUG]  [BUGGY]  this.orientation  =  Maps.newHashMap();  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  this.orientation  =  Maps.newHashMap();  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	this.orientation  =  Maps.newHashMap();	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
323	[BUG]  [BUGGY]  this.orientation  =  getRangeOrientation();  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  this.orientation  =  getRangeOrientation();  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	this.orientation  =  getRangeOrientation();	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
324	[BUG]  [BUGGY]  this.orientation  =  getOrientation();  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  this.orientation  =  getOrientation();  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	this.orientation  =  getOrientation();	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
344	[BUG]  [BUGGY]    final  double  norm1  =  delta.getNormAt();  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  delta.getNormAt();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  delta.getNormAt();		non-compiled	[CE]  cannot  find  symbol	16	None	add
345	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	    double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1
346	[BUG]  [BUGGY]    double  norm1  =  delta.getNormSq();  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    double  norm1  =  delta.getNormSq();  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    double  norm1  =  delta.getNormSq();		compilable	  [FE]  arrays  first  differed  testRevert	16	1	add
362	[BUG]  [BUGGY]    setDirection(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    setDirection(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    setDirection(p1,  p2);		non-compiled	[CE]  cannot  find  symbol	12	None	add
364	[BUG]  [BUGGY]    this.orientation  =  p2.getOrientation();  [CE]  cannot  find  symbol  orientation  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    this.orientation  =  p2.getOrientation();  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    this.orientation  =  p2.getOrientation();		non-compiled	[CE]  cannot  find  symbol  orientation	12	None	add
365	[BUG]  [BUGGY]    setRange(p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    setRange(p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    setRange(p2);		non-compiled	[CE]  cannot  find  symbol	12	None	add
383	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(2.0  /  FastMath.sqrt(delta),  norm2),  delta);  [CE]  ';'  expected  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(2.0  /  FastMath.sqrt(delta),  norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(2.0  /  FastMath.sqrt(delta),  norm2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  ';'  expected	19	None	replace
384	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  null);  [CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  null);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(delta,  norm2),  null);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  method  sqrt  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
1	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(0,  direction.subtract(zero));  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(0,  direction.subtract(zero));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(0,  direction.subtract(zero));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	1	None	replace
2	[BUG]  [BUGGY]  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(zero,  direction.subtract(zero));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	final  Line  reverted  =  new  Line(zero,  direction.subtract(zero));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1
3	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(zero,  direction.subtract(zero));  [FE]  arrays  first  differed  testRevert  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(zero,  direction.subtract(zero));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(zero,  direction.subtract(zero));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	compilable	  [FE]  arrays  first  differed  testRevert	1	1	replace
3	[BUG]  [BUGGY]  final  Line  reverted  =  new  Line(directed,  zero.subtract(direction));  [CE]  cannot  find  symbol  directed  [CONTEXT]  public  Line  revert()  {  [BUGGY]  final  Line  reverted  =  new  Line(directed,  zero.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	final  Line  reverted  =  new  Line(directed,  zero.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  cannot  find  symbol  directed	1	None	replace
4	[BUG]  [BUGGY]  static  final  Line  reverted  =  new  Line(zero,  direction.subtract(direction));  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line  revert()  {  [BUGGY]  static  final  Line  reverted  =  new  Line(zero,  direction.subtract(direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	static  final  Line  reverted  =  new  Line(zero,  direction.subtract(direction));	final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]    Vector3D  direction  =  Math.max(directedMinutes,  direction);  [CE]  cannot  find  symbol  directedMinutes  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  Math.max(directedMinutes,  direction);  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  Math.max(directedMinutes,  direction);		non-compiled	[CE]  cannot  find  symbol  directedMinutes	2	None	add
35	[BUG]  [BUGGY]    Vector3D  direction  =  Math.max(direction,  0.5f);  [CE]  no  suitable  method  found  for  max(Vector3D,float)  [CONTEXT]  public  Line  revert()  {  [BUGGY]    Vector3D  direction  =  Math.max(direction,  0.5f);  [BUGGY]  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	    Vector3D  direction  =  Math.max(direction,  0.5f);		non-compiled	[CE]  no  suitable  method  found  for  max(Vector3D,float)	2	None	add
64	[BUG]  [BUGGY]    setCoordinate(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]    setCoordinate(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	    setCoordinate(p1,  p2);		non-compiled	[CE]  cannot  find  symbol	12	None	add
92	[BUG]  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(0,  0,  direction);  [CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(0,  0,  direction);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return(reverted  ==  null)?  reverted  :  new  Line(0,  0,  direction);	return  reverted;  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,int,Vector3D)	3	None	replace
93	[BUG]  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(0,  direction);  [CE]  no  suitable  constructor  found  for  Line(int,Vector3D)  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(0,  direction);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return(reverted  ==  null)?  reverted  :  new  Line(0,  direction);	return  reverted;  	non-compiled	[CE]  no  suitable  constructor  found  for  Line(int,Vector3D)	3	None	replace
94	[BUG]  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(directed,  inverse,  direction);  [CE]  cannot  find  symbol  directed  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]  return(reverted  ==  null)?  reverted  :  new  Line(directed,  inverse,  direction);  [BUGGY]  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	return(reverted  ==  null)?  reverted  :  new  Line(directed,  inverse,  direction);	return  reverted;  	non-compiled	[CE]  cannot  find  symbol  directed	3	None	replace
121	[BUG]  [BUGGY]    this(new  Vector3D.Double(),  new  Vector3D.Double());  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this(new  Vector3D.Double(),  new  Vector3D.Double());  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this(new  Vector3D.Double(),  new  Vector3D.Double());		non-compiled	[CE]  cannot  find  symbol	10	None	add
123	[BUG]  [BUGGY]    this.orientation  =  Maps.newHashMap();  [CE]  cannot  find  symbol  orientation  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this.orientation  =  Maps.newHashMap();  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this.orientation  =  Maps.newHashMap();		non-compiled	[CE]  cannot  find  symbol  orientation	10	None	add
124	[BUG]  [BUGGY]    this(new  Vector3D.Double(),  new  Vector2D.Double());  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this(new  Vector3D.Double(),  new  Vector2D.Double());  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this(new  Vector3D.Double(),  new  Vector2D.Double());		non-compiled	[CE]  cannot  find  symbol	10	None	add
125	[BUG]  [BUGGY]    this(new  Vector3D.Orientation(),  new  Line(p1,  p2));  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    this(new  Vector3D.Orientation(),  new  Line(p1,  p2));  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	    this(new  Vector3D.Orientation(),  new  Line(p1,  p2));		non-compiled	[CE]  cannot  find  symbol	10	None	add
153	[BUG]  [BUGGY]  final  Vector3D  delta  =  p1.multiply(p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  final  Vector3D  delta  =  p1.multiply(p2);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	final  Vector3D  delta  =  p1.multiply(p2);	final  Vector3D  delta  =  p2.subtract(p1);  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
184	[BUG]  [BUGGY]  return  this.direion;  [CE]  cannot  find  symbol  direion  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]  return  this.direion;  [BUGGY]  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	return  this.direion;	return  direction;  	non-compiled	[CE]  cannot  find  symbol  direion	5	None	replace
212	[BUG]  [BUGGY]  final  double  norm2  =  delta.getNorm2();  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]  final  double  norm2  =  delta.getNorm2();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	final  double  norm2  =  delta.getNorm2();	final  double  norm2  =  delta.getNormSq();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
242	[BUG]  [BUGGY]    final  Double  p1  =  p1.subtract(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Double  p1  =  p1.subtract(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Double  p1  =  p1.subtract(p1);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
244	[BUG]  [BUGGY]    final  Vector3D  p1  =  p1.dotProvide(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p1  =  p1.dotProvide(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p1  =  p1.dotProvide(p1);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
245	[BUG]  [BUGGY]    final  Vector3D  p1  =  p1.dotProgress(p1);  [CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]    final  Vector3D  p1  =  p1.dotProgress(p1);  [BUGGY]  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	    final  Vector3D  p1  =  p1.dotProgress(p1);		non-compiled	[CE]  variable  p1  is  already  defined  in  method  reset(Vector3D,Vector3D)	14	None	add
273	[BUG]  [BUGGY]    final  double  norm1  =  p1.subtract(delta);  [CE]  incompatible  types  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.subtract(delta);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  p1.subtract(delta);		non-compiled	[CE]  incompatible  types	16	None	add
275	[BUG]  [BUGGY]    final  double  norm1  =  p1.dotProvide(delta);  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  [BUGGY]    final  double  norm1  =  p1.dotProvide(delta);  [BUGGY]  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	    final  double  norm1  =  p1.dotProvide(delta);		non-compiled	[CE]  cannot  find  symbol	16	None	add
302	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  [CE]  cannot  find  symbol  norm1  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm1  ==  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {	if  (norm2  ==  0.0)  {  	non-compiled	[CE]  cannot  find  symbol  norm1	17	None	replace
331	[BUG]  [BUGGY]    final  double  norm2  =  p1.getStandardDeviation();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  p1.getStandardDeviation();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  p1.getStandardDeviation();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
332	[BUG]  [BUGGY]    final  double  norm2  =  Math.abs(relativeAccuracy  *  Math.abs(p1),  absoluteAccuracy);  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  Math.abs(relativeAccuracy  *  Math.abs(p1),  absoluteAccuracy);  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  Math.abs(relativeAccuracy  *  Math.abs(p1),  absoluteAccuracy);		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
333	[BUG]  [BUGGY]    final  double  norm2  =  Math.abs(relativeAccuracy  *  p2.getStandardDeviation());  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  Math.abs(relativeAccuracy  *  p2.getStandardDeviation());  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  Math.abs(relativeAccuracy  *  p2.getStandardDeviation());		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
335	[BUG]  [BUGGY]    final  double  norm2  =  p1.getOrMean();  [CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    final  double  norm2  =  p1.getOrMean();  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    final  double  norm2  =  p1.getOrMean();		non-compiled	[CE]  variable  norm2  is  already  defined  in  method  reset(Vector3D,Vector3D)	18	None	add
361	[BUG]  [BUGGY]    direction  =  Vector3D.getDirection(getMinimumLine(),  getMaximumLine());  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    direction  =  Vector3D.getDirection(getMinimumLine(),  getMaximumLine());  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    direction  =  Vector3D.getDirection(getMinimumLine(),  getMaximumLine());		non-compiled	[CE]  cannot  find  symbol	6	None	add
362	[BUG]  [BUGGY]    direction  =  Vector3D.getDirection(getMean(),  direction);  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    direction  =  Vector3D.getDirection(getMean(),  direction);  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    direction  =  Vector3D.getDirection(getMean(),  direction);		non-compiled	[CE]  cannot  find  symbol	6	None	add
363	[BUG]  [BUGGY]    direction  =  Vector3D.getDirection(getBase());  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    direction  =  Vector3D.getDirection(getBase());  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    direction  =  Vector3D.getDirection(getBase());		non-compiled	[CE]  cannot  find  symbol	6	None	add
364	[BUG]  [BUGGY]    direction  =  Vector3D.getDirection(getMinimumLine());  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    direction  =  Vector3D.getDirection(getMinimumLine());  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    direction  =  Vector3D.getDirection(getMinimumLine());		non-compiled	[CE]  cannot  find  symbol	6	None	add
365	[BUG]  [BUGGY]    direction  =  Vector3D.getDirection(getMean());  [CE]  cannot  find  symbol  [CONTEXT]  public  Vector3D  getDirection()  {  [BUGGY]    direction  =  Vector3D.getDirection(getMean());  [BUGGY]  return  direction;  }  [CLASS]  Line  [METHOD]  getDirection  [RETURN_TYPE]  Vector3D  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	    direction  =  Vector3D.getDirection(getMean());		non-compiled	[CE]  cannot  find  symbol	6	None	add
391	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());		non-compiled	[CE]  cannot  find  symbol	20	None	add
392	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildCount(),  -p1.getChildCount());  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildCount(),  -p1.getChildCount());  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildCount(),  -p1.getChildCount());		non-compiled	[CE]  cannot  find  symbol	20	None	add
393	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1.toString()  +  p2.toString());  [CE]  bad  operand  type  String  for  unary  operator  '-'  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-p1.toString()  +  p2.toString());  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-p1.toString()  +  p2.toString());		non-compiled	[CE]  bad  operand  type  String  for  unary  operator  '-'	20	None	add
394	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1.dotProp(Math.min(norm2)),  -p1.dotProp(norm2));  [CE]  no  suitable  method  found  for  min(double)  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-p1.dotProp(Math.min(norm2)),  -p1.dotProp(norm2));  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-p1.dotProp(Math.min(norm2)),  -p1.dotProp(norm2));		non-compiled	[CE]  no  suitable  method  found  for  min(double)	20	None	add
395	[BUG]  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildFloat(),  -p1.getChildFloat());  [CE]  cannot  find  symbol  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildFloat(),  -p1.getChildFloat());  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	    p1.setMinimumFractionDigits(-p1.getMinimumFractionDigits());  p2.setLastChild(-p1.getChildFloat(),  -p1.getChildFloat());		non-compiled	[CE]  cannot  find  symbol	20	None	add
423	[BUG]  [BUGGY]  setReturnZero(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  setReturnZero(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	setReturnZero(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
424	[BUG]  [BUGGY]  setRenderer(p1,  p2);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  [BUGGY]  setRenderer(p1,  p2);  [BUGGY]  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	setRenderer(p1,  p2);	reset(p1,  p2);  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
451	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  0;  [CE]  not  a  statement  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  0;  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  {  0;	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  not  a  statement	7	None	replace
452	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }  0;  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }  0;  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  }  0;	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
453	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=  0;  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=  0;  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)!=  0;	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
454	[BUG]  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  ==  0;  [CE]  ';'  expected  [CONTEXT]    [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  ==  0;  [BUGGY]  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  ==  0;	public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	7	None	replace
481	[BUG]  [BUGGY]    this(new  Vector3D.Double(),  new  Vector3D.Double());  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(new  Vector3D.Double(),  new  Vector3D.Double());  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(new  Vector3D.Double(),  new  Vector3D.Double());		non-compiled	[CE]  illegal  start  of  type	8	None	add
483	[BUG]  [BUGGY]    this(new  Vector3D.Double(),  new  Vector2D.Double());  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(new  Vector3D.Double(),  new  Vector2D.Double());  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(new  Vector3D.Double(),  new  Vector2D.Double());		non-compiled	[CE]  illegal  start  of  type	8	None	add
484	[BUG]  [BUGGY]    this(new  Vector3D.Double());  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(new  Vector3D.Double());  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(new  Vector3D.Double());		non-compiled	[CE]  illegal  start  of  type	8	None	add
485	[BUG]  [BUGGY]    this(new  Vector3D.Double(),  new  Line(p1,  p2));  [CE]  illegal  start  of  type  [CONTEXT]    [BUGGY]    this(new  Vector3D.Double(),  new  Line(p1,  p2));  [BUGGY]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  }  [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	    this(new  Vector3D.Double(),  new  Line(p1,  p2));		non-compiled	[CE]  illegal  start  of  type	8	None	add
514	[BUG]  [BUGGY]  this.orientation  =  direction.getOrientation();  [CE]  illegal  start  of  expression  [CONTEXT]  public  Line(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  reset(p1,  p2);  [BUGGY]  this.orientation  =  direction.getOrientation();  [BUGGY]    [CLASS]  Line  [METHOD]  <init>  [RETURN_TYPE]  Vector3D)  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	this.orientation  =  direction.getOrientation();	}  	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
541	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  norm2),  delta);  [CE]  cannot  find  symbol  Norm2  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  norm2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  cannot  find  symbol  Norm2	19	None	replace
542	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sin(p1,  norm2),  delta);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sin(p1,  norm2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sin(p1,  norm2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	19	None	replace
543	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  delta);  [CE]  ')'  expected  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(Norm2,  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  ')'  expected	19	None	replace
544	[BUG]  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(normal2),  delta);  [CE]  cannot  find  symbol  normal2  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(normal2),  delta);  [BUGGY]  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(normal2),  delta);	this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  	non-compiled	[CE]  cannot  find  symbol  normal2	19	None	replace
571	[BUG]  [BUGGY]    reverted.put(0,  reverted);  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.put(0,  reverted);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.put(0,  reverted);		non-compiled	[CE]  cannot  find  symbol	4	None	add
572	[BUG]  [BUGGY]    reverted.draw(line);  [CE]  cannot  find  symbol  line  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(line);  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(line);		non-compiled	[CE]  cannot  find  symbol  line	4	None	add
573	[BUG]  [BUGGY]    reverted.draw(new  Line(directed,  direction));  [CE]  cannot  find  symbol  directed  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(directed,  direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(directed,  direction));		non-compiled	[CE]  cannot  find  symbol  directed	4	None	add
574	[BUG]  [BUGGY]    reverted.draw(new  Line(direction,  direction));  [CE]  cannot  find  symbol  [CONTEXT]  public  Line  revert()  {  final  Line  reverted  =  new  Line(zero,  zero.subtract(direction));  [BUGGY]    reverted.draw(new  Line(direction,  direction));  [BUGGY]  return  reverted;  }  [CLASS]  Line  [METHOD]  revert  [RETURN_TYPE]  Line  [VARIABLES]  Line  reverted  Vector3D  delta  direction  p1  p2  zero  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	    reverted.draw(new  Line(direction,  direction));		non-compiled	[CE]  cannot  find  symbol	4	None	add
