bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
2	[BUG]  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
3	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
4	[BUG]  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
5	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }		compilable	  [FE]  arrays  first  differed  	18	1	add
6	[BUG]  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [FE]  arrays  first  differed  [FE]        arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }		compilable	  [FE]  arrays  first  differed  	18	1	add
7	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
8	[BUG]  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }		compilable	  [FE]  arrays  first  differed  	18	1	add
9	[BUG]  [BUGGY]    if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]    if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]  if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	    if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }		non-compiled	[CE]  illegal  start  of  expression	18	None	add
10	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  	17	1	replace
11	[BUG]  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [FE]  arrays  first  differed  [FE]    arrays  first  differed  [CONTEXT]  public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	if  (norm2  ==  0.0)  {  	compilable	  [FE]  arrays  first  differed  	17	1	replace
