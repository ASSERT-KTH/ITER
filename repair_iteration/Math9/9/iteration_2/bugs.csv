bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]    throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  cannot  find  symbol  norm1	11	None	replace
2	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta));  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  atterns.add(p1.dotProduct(delta));  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta));	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta));  [CE]  ';'  expected  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  final  double  norm2  =  p1.dotProduct(delta));  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta));	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(norm2    <    =    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	  	compilable	  [FE]  arrays  first  differed  	7	1	add
7	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	  	compilable	  [FE]  arrays  first  differed  	7	1	add
8	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }	  	compilable	  [FE]  arrays  first  differed  	7	1	add
9	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }	  	compilable	  [FE]  arrays  first  differed  	7	1	add
10	[BUG]  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]    throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
11	[BUG]  [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  If(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  ';'  expected  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  If(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]    throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    If(norm2  ==  0.0  ||  norm2  ==  0.0)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
12	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  	compilable	  [FE]  arrays  first  differed  	5	1	add
13	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  	compilable	  [FE]  arrays  first  differed  	5	1	add
14	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	  	compilable	  [FE]  arrays  first  differed  	5	1	add
15	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	  	compilable	  [FE]  arrays  first  differed  	5	1	add
16	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  norm2);  [CE]  ';'  expected  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  norm2);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta)/  norm2);	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2);  [CE]  illegal  start  of  type  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta)/  norm2);	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	  	compilable	  [FE]  arrays  first  differed  	3	1	add
19	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	  	compilable	  [FE]  arrays  first  differed  	3	1	add
20	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	  	compilable	  [FE]  arrays  first  differed  	3	1	add
21	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	  	compilable	  [FE]  arrays  first  differed  	3	1	add
22	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  arrays  first  differed  	1	1	add
23	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  arrays  first  differed  	1	1	add
24	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	1	7	add
25	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  MathIllegalArgumentException  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	1	7	add
26	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2,  delta);  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta)/  norm2,  delta);	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  quarter  =  new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);  [CE]  illegal  start  of  type  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  quarter  =  new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	quarter  =  new  Vector3D(1.0,  p1.dotProduct(delta)/  norm2,  delta);	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	non-compiled	[CE]  cannot  find  symbol  norm1	1	None	add
29	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	  	non-compiled	[CE]  cannot  find  symbol  norm1	3	None	add
30	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [CE]  illegal  start  of  type  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm2);  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm2);  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  [BUGGY]    throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(norm2  <  0.0  ||  norm2  >  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	compilable	  [FE]  MathIllegalArgumentException  	11	7	replace
37	[BUG]  [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  [FE]  MathIllegalArgumentException  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  [BUGGY]    throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  <  0.0  ||  norm2  >  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	compilable	  [FE]  MathIllegalArgumentException  	11	7	replace
38	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  	non-compiled	[CE]  cannot  find  symbol  norm1	5	None	add
39	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  expression  [FE]      arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]  if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	      if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]    public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();    [BUGGY]      if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]    if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	  	non-compiled	[CE]  cannot  find  symbol  norm1	7	None	add
