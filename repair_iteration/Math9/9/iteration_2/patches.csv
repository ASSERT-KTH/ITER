bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.	  	non-compiled	[CE]  <identifier>  expected	12	None	add
2	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p	  	non-compiled	[CE]  ')'  expected	12	None	add
3	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.	  	non-compiled	[CE]  <identifier>  expected	12	None	add
4	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [CE]  '('  or  '['  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl	  	non-compiled	[CE]  '('  or  '['  expected	20	None	add
5	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR	  	non-compiled	[CE]  ')'  expected	20	None	add
6	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	20	None	add
7	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
8	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  MathIllegalArgumentException  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
9	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [CE]  '('  expected  [FE]      MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if	  	non-compiled	[CE]  '('  expected	24	None	add
10	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]        MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
11	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  [FE]  MathIllegalArgumentException  [FE]        MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
12	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
14	[BUG]  [BUGGY]  if(p1.dotProduct(delta)/  norm2)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  incompatible  types  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1.dotProduct(delta)/  norm2)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1.dotProduct(delta)/  norm2)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  incompatible  types	7	None	replace
15	[BUG]  [BUGGY]  if(p1.dotProduct(delta)/  norm2)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  incompatible  types  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1.dotProduct(delta)/  norm2)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1.dotProduct(delta)/  norm2)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  incompatible  types	7	None	replace
16	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
17	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [CE]  '('  or  '['  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl	  	non-compiled	[CE]  '('  or  '['  expected	8	None	add
18	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	8	None	add
19	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.	  	non-compiled	[CE]  <identifier>  expected	8	None	add
20	[BUG]  [BUGGY]  Math.min(delta,  norm2))  {  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  ';'  expected  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  Math.min(delta,  norm2))  {  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	Math.min(delta,  norm2))  {  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  if(delta    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  ';'  expected	33	None	replace
21	[BUG]  [BUGGY]  if(delta  ==  0.0  ||  delta  ==  0.0)  {  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0  ||  delta  ==  0.0)  {  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0  ||  delta  ==  0.0)  {  if(norm2  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2,  zero);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2,  zero);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta)/  norm2,  zero);	  atterns.add(p1.dotProduct(delta)/    norm2);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
23	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(delta  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	compilable	  [FE]  arrays  first  differed  	25	1	replace
24	[BUG]  [BUGGY]  if(delta  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  arrays  first  differed  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	compilable	  [FE]  arrays  first  differed  	25	1	replace
25	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	21	None	replace
26	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
27	[BUG]  [BUGGY]  if(norm1  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	compilable	  [FE]  arrays  first  differed  	19	1	replace
29	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	compilable	  [FE]  arrays  first  differed  	19	1	replace
30	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	compilable	  [FE]  arrays  first  differed  	19	1	replace
31	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	compilable	  [FE]  arrays  first  differed  	19	1	replace
32	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [CE]  <identifier>  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.	  	non-compiled	[CE]  <identifier>  expected	14	None	add
33	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p	  	non-compiled	[CE]  ')'  expected	14	None	add
34	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	14	None	add
35	[BUG]  [BUGGY]  parent.reset(p1,  p2,  delta);  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  parent.reset(p1,  p2,  delta);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	parent.reset(p1,  p2,  delta);	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  if(delta  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  if(norm2    <    =    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
37	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
39	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  p2);  [CE]  ';'  expected  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  p2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta)/  p2);	  final    double    norm2    =    p1.dotProduct(delta)/    norm2);    	non-compiled	[CE]  ';'  expected	16	None	replace
40	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  2;  [CE]  illegal  start  of  type  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  2;  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta)/  2;	  final    double    norm2    =    p1.dotProduct(delta)/    norm2);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2));  [CE]  ';'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  atterns.add(p1.dotProduct(delta)/  norm2));  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta)/  norm2));	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  if(norm2  <  0.0  ||  norm2  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  if(norm2  <  0.0  ||  norm2  >  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2    <    0.0    ||    norm2    >    0.0)    {    if(norm2  <  0.0  ||  norm2  >  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
43	[BUG]  [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  If(norm2  <  0.0  ||  norm2  >  0.0)  {  [CE]  ';'  expected  [FE]      MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  <  0.0  ||  norm2  >  0.0)  {  If(norm2  <  0.0  ||  norm2  >  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2    <    0.0    ||    norm2    >    0.0)    {    If(norm2  <  0.0  ||  norm2  >  0.0)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
44	[BUG]  [BUGGY]  if(delta  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  incomparable  types:  Vector3D  and  double  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm1    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  incomparable  types:  Vector3D  and  double	1	None	replace
45	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [CE]  '('  or  '['  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIl	  	non-compiled	[CE]  '('  or  '['  expected	18	None	add
46	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR	  	non-compiled	[CE]  ')'  expected	18	None	add
47	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	18	None	add
48	[BUG]  [BUGGY]  If(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  If(norm2  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	If(norm2  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    If(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
49	[BUG]  [BUGGY]  If(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  ';'  expected  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  If(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	If(norm1  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    If(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
50	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  arrays  first  differed  	22	1	add
51	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  arrays  first  differed  	22	1	add
52	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [CE]  '('  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if	  	non-compiled	[CE]  '('  expected	22	None	add
53	[BUG]  [BUGGY]  final  double  norm2  =  p2.dotProduct(delta));  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p2.dotProduct(delta));  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p2.dotProduct(delta));	  final    double    norm2    =    p1.dotProduct(delta));    	non-compiled	[CE]  ';'  expected	3	None	replace
54	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  incomparable  types:  Vector3D  and  double  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  incomparable  types:  Vector3D  and  double	30	None	replace
55	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [CE]  '('  or  '['  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIl	  	non-compiled	[CE]  '('  or  '['  expected	6	None	add
56	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	6	None	add
57	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.  [CE]  <identifier>  expected  [FE]        arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.	  	non-compiled	[CE]  <identifier>  expected	6	None	add
58	[BUG]  [BUGGY]  if(norm1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	23	None	replace
59	[BUG]  [BUGGY]  if(delta  <  0.0  ||  norm2  >  0.0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  <  0.0  ||  norm2  >  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  <  0.0  ||  norm2  >  0.0)  {	  if(norm2    <    0.0    ||    norm2    >    0.0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
60	[BUG]  [BUGGY]  atterns.add(p1.dotProduct(delta,  norm2));  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  atterns.add(p1.dotProduct(delta,  norm2));  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p1.dotProduct(delta,  norm2));	  atterns.add(p1.dotProduct(delta));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  If(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  If(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  If(norm1  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    If(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
62	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	9	None	replace
63	[BUG]  [BUGGY]  if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  expression  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  if(norm2    <    =    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
64	[BUG]  [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm  [CE]  ')'  expected  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm	  	non-compiled	[CE]  ')'  expected	24	None	add
66	[BUG]  [BUGGY]  final  double  norm2  =  p1.getNormSq();  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p1.getNormSq();  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.getNormSq();	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM	  	non-compiled	[CE]  ')'  expected	12	None	add
68	[BUG]  [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0  ||  norm2  ==  0.0)  {  if(norm1  ==  0.0  ||  norm2  ==  0.0)  {	  if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    if(norm2    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta);  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p1.dotProduct(delta);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta);	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  final  double  norm2  =  p2.dotProduct(delta)/  norm2);  [CE]  ';'  expected  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p2.dotProduct(delta)/  norm2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p2.dotProduct(delta)/  norm2);	  final    double    norm2    =    p1.dotProduct(delta)/    norm2);    	non-compiled	[CE]  ';'  expected	16	None	replace
71	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR	  	non-compiled	[CE]  ')'  expected	6	None	add
72	[BUG]  [BUGGY]  atterns.add(p2.dotProduct(delta));  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  atterns.add(p2.dotProduct(delta));  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	atterns.add(p2.dotProduct(delta));	  atterns.add(p1.dotProduct(delta));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  norm1  =  p1.dotProduct(delta)/  norm2);  [CE]  ';'  expected  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  norm1  =  p1.dotProduct(delta)/  norm2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	norm1  =  p1.dotProduct(delta)/  norm2);	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
74	[BUG]  [BUGGY]  quarter  =  p1.dotProduct(delta)/  norm2);  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  quarter  =  p1.dotProduct(delta)/  norm2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	quarter  =  p1.dotProduct(delta)/  norm2);	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
75	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	19	None	replace
76	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	21	None	replace
77	[BUG]  [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  2);  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  final  double  norm2  =  p1.dotProduct(delta)/  2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	final  double  norm2  =  p1.dotProduct(delta)/  2);	  final    double    norm2    =    p1.dotProduct(delta));    	non-compiled	[CE]  ';'  expected	3	None	replace
78	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NOR	  	non-compiled	[CE]  ')'  expected	8	None	add
79	[BUG]  [BUGGY]  norm1  =  norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [CE]  illegal  start  of  expression  [FE]            arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  norm1  =  norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	norm1  =  norm2  <  =  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  if(norm1    <    =    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }	  if(delta    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
81	[BUG]  [BUGGY]  quarter  =  p2.dotProduct(delta);  [CE]  illegal  start  of  type  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  quarter  =  p2.dotProduct(delta);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	quarter  =  p2.dotProduct(delta);	  if(delta    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
82	[BUG]  [BUGGY]  quarter  =  p2.dotProduct(delta)/  norm2);  [CE]  ';'  expected  [FE]          arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  quarter  =  p2.dotProduct(delta)/  norm2);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	quarter  =  p2.dotProduct(delta)/  norm2);	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
83	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  norm1.dotProduct(delta));  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
84	[BUG]  [BUGGY]  quarter  =  p1.dotProduct(delta)/  norm2,  delta);  [CE]  ';'  expected  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  quarter  =  p1.dotProduct(delta)/  norm2,  delta);  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	quarter  =  p1.dotProduct(delta)/  norm2,  delta);	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  ';'  expected	32	None	replace
85	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)	  	compilable	  [FE]  arrays  first  differed  	22	1	add
86	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)	  	compilable	  [FE]  arrays  first  differed  	22	1	add
87	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [CE]  cannot  find  symbol  norm1  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  cannot  find  symbol  norm1	7	None	replace
88	[BUG]  [BUGGY]  if(norm2  ==  0.0  ||  norm1  ==  0.0)  {  [CE]  cannot  find  symbol  norm1  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  ==  0.0  ||  norm1  ==  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  ==  0.0  ||  norm1  ==  0.0)  {	  if(norm1    ==    0.0    ||    norm2    ==    0.0)    {    	non-compiled	[CE]  cannot  find  symbol  norm1	1	None	replace
89	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	22	None	add
90	[BUG]  [BUGGY]  if(p2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
91	[BUG]  [BUGGY]  if(p1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
92	[BUG]  [BUGGY]  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(delta!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  if(delta    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
93	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	14	None	add
94	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	compilable	  [FE]  arrays  first  differed  	13	1	replace
95	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [FE]  arrays  first  differed  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	compilable	  [FE]  arrays  first  differed  	13	1	replace
96	[BUG]  [BUGGY]  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	compilable	  [FE]  arrays  first  differed  	13	1	replace
97	[BUG]  [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [FE]  arrays  first  differed  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(p1  ==  null)  {  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	compilable	  [FE]  arrays  first  differed  	13	1	replace
98	[BUG]  [BUGGY]  [FE]  MathIllegalArgumentException  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
99	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [FE]  MathIllegalArgumentException  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }	  	compilable	  [FE]  MathIllegalArgumentException  	24	7	add
100	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [CE]  '('  expected  [FE]      MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if	  	non-compiled	[CE]  '('  expected	24	None	add
101	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]        MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);        }        if(norm2    >=    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  if(norm2  >=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	24	None	add
102	[BUG]  [BUGGY]  if(norm2  <  =  0.0  ||  norm2  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]    MathIllegalArgumentException    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  <  =  0.0  ||  norm2  >  0.0)  {  [BUGGY]      throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  <  =  0.0  ||  norm2  >  0.0)  {	  if(norm2    <    0.0    ||    norm2    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
103	[BUG]  [BUGGY]  if(norm1!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1!=  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }	  if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
104	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	20	None	add
105	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_	  	non-compiled	[CE]  ')'  expected	20	None	add
106	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	6	None	add
107	[BUG]  [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [CE]  illegal  start  of  type  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm1  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta));  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta));    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	12	None	add
109	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.d  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.d  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta));        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta));    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta));  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.d	  	non-compiled	[CE]  ')'  expected	12	None	add
110	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO	  	non-compiled	[CE]  ')'  expected	18	None	add
111	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_  [CE]  ')'  expected  [FE]      arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2,        delta);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2,    delta);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2,  delta);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_	  	non-compiled	[CE]  ')'  expected	18	None	add
112	[BUG]  [BUGGY]  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [CE]  illegal  start  of  type  [FE]        arrays  first  differed      [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }	          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm1    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
113	[BUG]  [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [CE]  ')'  expected  [FE]    arrays  first  differed    [CONTEXT]      public  void  reset(final  Vector3D  p1,  final  Vector3D  p2)  throws  MathIllegalArgumentException  {  final  Vector3D  delta  =  p2.subtract(p1);  final  double  norm2  =  delta.getNormSq();      [BUGGY]          if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p1.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p2.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p  [BUGGY]      if  (norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);  }  this.direction  =  new  Vector3D(1.0  /  FastMath.sqrt(norm2),  delta);  zero  =  new  Vector3D(1.0,  p1,  -p1.dotProduct(delta)  /  norm2,  delta);  }  [CLASS]  Line  [METHOD]  reset  [RETURN_TYPE]  void  Vector3D  p1  Vector3D  p2  [VARIABLES]  Vector3D  delta  direction  p1  p2  zero  double  norm2  boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	                if(norm2        ==        0.0)        {        throw        new        MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,        p1.dotProduct(delta)/        norm2);        }        if(norm2    ==    0.0)    {    throw    new    MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,    p2.dotProduct(delta)/    norm2);    }    if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p1.dotProduct(delta)/  norm2);  }  if(norm2  ==  0.0)  {  throw  new  MathIllegalArgumentException(LocalizedFormats.ZERO_NORM,  p	  	non-compiled	[CE]  ')'  expected	8	None	add
