bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final Line reverted = new Line(zero, zero.subtract(direction)); [FE] arrays first differed [CONTEXT] public Line revert() { [BUGGY] final Line reverted = new Line(zero, zero.subtract(direction)); [BUGGY] return reverted; } [CLASS] Line [METHOD] revert [RETURN_TYPE] Line  [VARIABLES] Line reverted Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	replace	
2	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public Line revert() { [BUGGY] [BUGGY] final Line reverted = new Line(zero, zero.subtract(direction)); return reverted; } [CLASS] Line [METHOD] revert [RETURN_TYPE] Line  [VARIABLES] Line reverted Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	87	87	1	add	
3	[BUG] [BUGGY] return reverted; [FE] arrays first differed [CONTEXT] public Line revert() { final Line reverted = new Line(zero, zero.subtract(direction)); [BUGGY] return reverted; [BUGGY] } [CLASS] Line [METHOD] revert [RETURN_TYPE] Line  [VARIABLES] Line reverted Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	replace	
4	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public Line revert() { final Line reverted = new Line(zero, zero.subtract(direction)); [BUGGY] [BUGGY] return reverted; } [CLASS] Line [METHOD] revert [RETURN_TYPE] Line  [VARIABLES] Line reverted Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	1.0	88	88	1	add	
5	[BUG] [BUGGY] return direction; [FE] arrays first differed [CONTEXT] public Vector3D getDirection() { [BUGGY] return direction; [BUGGY] } [CLASS] Line [METHOD] getDirection [RETURN_TYPE] Vector3D  [VARIABLES] Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	replace	
6	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public Vector3D getDirection() { [BUGGY] [BUGGY] return direction; } [CLASS] Line [METHOD] getDirection [RETURN_TYPE] Vector3D  [VARIABLES] Vector3D delta direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.5773502691896258	95	95	1	add	
7	[BUG] [BUGGY] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [FE] arrays first differed [CONTEXT] [BUGGY] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [BUGGY] reset(p1, p2); } [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	replace	
8	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] [BUGGY] [BUGGY] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { reset(p1, p2); } [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	54	54	1	add	
9	[BUG] [BUGGY] reset(p1, p2); [FE] arrays first differed [CONTEXT] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [BUGGY] reset(p1, p2); [BUGGY] } [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	replace	
10	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [BUGGY] [BUGGY] reset(p1, p2); } [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	55	55	1	add	
11	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { reset(p1, p2); [BUGGY] } [BUGGY]  [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	replace	
12	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { reset(p1, p2); [BUGGY] [BUGGY] } [CLASS] Line [METHOD] <init> [RETURN_TYPE] Vector3D)  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D direction p1 p2 zero boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	56	56	1	add	
13	[BUG] [BUGGY] final Vector3D delta = p2.subtract(p1); [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [BUGGY] final Vector3D delta = p2.subtract(p1); [BUGGY] final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	replace	
14	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { [BUGGY] [BUGGY] final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	74	74	1	add	
15	[BUG] [BUGGY] final double norm2 = delta.getNormSq(); [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); [BUGGY] final double norm2 = delta.getNormSq(); [BUGGY] if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	replace	
16	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); [BUGGY] [BUGGY] final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	75	75	1	add	
17	[BUG] [BUGGY] if (norm2 == 0.0) { [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); [BUGGY] if (norm2 == 0.0) { [BUGGY] throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	replace	
18	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); [BUGGY] [BUGGY] if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	76	76	1	add	
19	[BUG] [BUGGY] this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } [BUGGY] this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); [BUGGY] zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	replace	
20	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } [BUGGY] [BUGGY] this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	79	79	1	add	
21	[BUG] [BUGGY] zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); [BUGGY] zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); [BUGGY] } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	replace	
22	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); [BUGGY] [BUGGY] zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	80	80	1	add	
23	[BUG] [BUGGY] } [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); [BUGGY] } [BUGGY]  [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	81	81	1	replace	
24	[BUG] [BUGGY] [FE] arrays first differed [CONTEXT] public void reset(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException { final Vector3D delta = p2.subtract(p1); final double norm2 = delta.getNormSq(); if (norm2 == 0.0) { throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM); } this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta); zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta); [BUGGY] [BUGGY] } [CLASS] Line [METHOD] reset [RETURN_TYPE] void  Vector3D p1 Vector3D p2 [VARIABLES] Vector3D delta direction p1 p2 zero double norm2 boolean  	projects/Math9/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java	0.3779644730092272	81	81	1	add	
