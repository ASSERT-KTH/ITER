bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  false);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  false);  [BUGGY]    throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION,  false);	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(rel  <  =  absoluteThreshold)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  if(rel  <  =  absoluteThreshold)  {  [BUGGY]    throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	if(rel  <  =  absoluteThreshold)  {	  if(rel    <    =    MIN_RELATIVE_TOLERANCE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel);  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION,  true,  rel);	      ConvergenceChecker    <    GOLDEN_SECTION,    true);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION;  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION;  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION;	      ConvergenceChecker    <    GOLDEN_SECTION    ||    checker    ==    GOLDEN_SECTION;    	non-compiled	[CE]  >  expected	4	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValue();    	non-compiled	[CE]  >  expected	7	None	replace
6	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION);  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION);  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  &&  checker  ==  GOLDEN_SECTION);	      ConvergenceChecker    <    GOLDEN_SECTION    ||    checker    ==    GOLDEN_SECTION);    	non-compiled	[CE]  >  expected	3	None	replace
7	[BUG]  [BUGGY]  rel  =  checker.doubleValue()  +  abs;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  rel  =  checker.doubleValue()  +  abs;  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	rel  =  checker.doubleValue()  +  abs;	      rel    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  RelativeThreshold  rel  =  checker.getRelativeThreshold(rel);  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	RelativeThreshold  rel  =  checker.getRelativeThreshold(rel);	      RelativeThreshold    rel    =    checker.getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getPartialValue();  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getPartialValue();  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getPartialValue();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValue();    	non-compiled	[CE]  >  expected	7	None	replace
10	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.clone();  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.clone();  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.clone();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValue();    	non-compiled	[CE]  >  expected	7	None	replace
11	[BUG]  [BUGGY]  rel  -=  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  rel  -=  checker.doubleValue();  [BUGGY]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	rel  -=  checker.doubleValue();	      rel    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {  [BUGGY]    throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	if(rel  <  =  MIN_RELATIVE_TOLERANCE  ||  rel  >  MIN_RELATIVE_TOLERANCE)  {	  if(rel    <    =    MIN_RELATIVE_TOLERANCE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    public  BrentOptimizer(double  rel,  double  abs,  ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);    [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  [BUGGY]    throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	double  absoluteThreshold  =  checker.doubleValue();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
