bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(fv,  fw);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  b  =  computeObjectiveValue(fv,  fw);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  b  =  computeObjectiveValue(fv,  fw);	      double    b    =    computeObjectiveValue(fv);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  int  relativeThreshold  =  computeRelativeThreshold(x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  relativeThreshold  =  computeRelativeThreshold(x);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  relativeThreshold  =  computeRelativeThreshold(x);	      if(isMinim)    {    for(int    iter    =    0;    iter    <    relativeThreshold;    iter++)    {    if(!isMinim    &&    isMinim)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  int  relativeThreshold  =  calculateRelativeThreshold(x);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  relativeThreshold  =  calculateRelativeThreshold(x);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  relativeThreshold  =  calculateRelativeThreshold(x);	      if(isMinim)    {    for(int    iter    =    0;    iter    <    relativeThreshold;    iter++)    {    if(!isMinim    &&    isMinim)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(d);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  b  =  computeObjectiveValue(d);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  b  =  computeObjectiveValue(d);	      double    b    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  if(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(isMinim)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(isMinim)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter++)  {  continue;  }  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.next();  iter++)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(x,  fv?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(x,  fv?  fx  :  -fx);  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(x,  fv?  fx  :  -fx);	  UnivariatePointValuePair    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fx    :    -fx);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  fv  =  computeObjectiveValue(x);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  fv  =  computeObjectiveValue(x);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	fv  =  computeObjectiveValue(x);	      if(isMinim)    {    fv    =    computeObjectiveValue(x);    if(!isMinim)    {    fv    =    -fv;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
9	[BUG]  [BUGGY]  double  b  =  getObjectiveValue(fv);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  b  =  getObjectiveValue(fv);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  b  =  getObjectiveValue(fv);	      double    b    =    getObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  double  fv  =  computeObjectiveValue(w);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  fv  =  computeObjectiveValue(w);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  fv  =  computeObjectiveValue(w);	      double    fv    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  double  fv  =  computeObjectiveValue(d);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  fv  =  computeObjectiveValue(d);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  fv  =  computeObjectiveValue(d);	      double    fv    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.get();  iter++)  {  if(!isMinim)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.get();  iter++)  {  if(!isMinim)  {  continue;  }  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter.get();  iter++)  {  if(!isMinim)  {  continue;  }	      if(isMinim)    {    for(int    iter    =    0;    iter    <    iter.next();    iter++)    {    if(!isMinim)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fv  :  -fx);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fv  :  -fx);  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	UnivariatePointValuePair  previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fv  :  -fx);	  UnivariatePointValuePair    previous    =    new    UnivariatePointValuePair(fx,    isMinim?    fx    :    -fx);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(x,  fv);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  b  =  computeObjectiveValue(x,  fv);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  b  =  computeObjectiveValue(x,  fv);	      double    b    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  double  b  =  getObjectiveValue(x,  fv);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  b  =  getObjectiveValue(x,  fv);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  b  =  getObjectiveValue(x,  fv);	      double    b    =    getObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  if(!stop)  {  fv  =  computeObjectiveValue(x);  if(!isMinim)  {  fv  =  fv;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(!stop)  {  fv  =  computeObjectiveValue(x);  if(!isMinim)  {  fv  =  fv;  }  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(!stop)  {  fv  =  computeObjectiveValue(x);  if(!isMinim)  {  fv  =  fv;  }	      if(isMinim)    {    fv    =    computeObjectiveValue(x);    if(!isMinim)    {    fv    =    fv;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  int  relativeThreshold  =  computeObjectiveValue(x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  relativeThreshold  =  computeObjectiveValue(x);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  relativeThreshold  =  computeObjectiveValue(x);	      if(isMinim)    {    for(int    iter    =    0;    iter    <    relativeThreshold;    iter++)    {    if(!isMinim    &&    isMinim)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  int  b  =  computeObjectiveValue(x);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  b  =  computeObjectiveValue(x);  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  b  =  computeObjectiveValue(x);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  int  b  =  getRelativeThreshold();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  b  =  getRelativeThreshold();  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  b  =  getRelativeThreshold();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
20	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  1;  iter  <  iter.next();  iter++)  {  if(!isMinim)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(isMinim)  {  for(int  iter  =  1;  iter  <  iter.next();  iter++)  {  if(!isMinim)  {  continue;  }  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(isMinim)  {  for(int  iter  =  1;  iter  <  iter.next();  iter++)  {  if(!isMinim)  {  continue;  }	      if(isMinim)    {    for(int    iter    =    0;    iter    <    iter.next();    iter++)    {    if(!isMinim)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(!isMinim)  {  fv  =  -fw;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(!isMinim)  {  fv  =  -fw;  }  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(!isMinim)  {  fv  =  -fw;  }	      if(isMinim)    {    fv    =    computeObjectiveValue(x);    if(!isMinim)    {    fv    =    -fw;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  int  a  =  relativeThreshold  *  FastMath.abs(fv);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  a  =  relativeThreshold  *  FastMath.abs(fv);  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  a  =  relativeThreshold  *  FastMath.abs(fv);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  int  a  =  getRelativeThreshold();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  int  a  =  getRelativeThreshold();  [BUGGY]    UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	int  a  =  getRelativeThreshold();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  double  fv  =  computeObjectiveValue(x  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  double  fv  =  computeObjectiveValue(x  +  1);  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	double  fv  =  computeObjectiveValue(x  +  1);	      double    fv    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(!isMinim)  {  fv  =  -fv;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  w  =  x;  double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;    [BUGGY]  if(!isMinim)  {  fv  =  -fv;  }  [BUGGY]    UnivariatePointValuePair  previous  =  null;  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;    [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	if(!isMinim)  {  fv  =  -fv;  }	      if(isMinim)    {    fv    =    computeObjectiveValue(x);    if(!isMinim)    {    fv    =    -fv;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
