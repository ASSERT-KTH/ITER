bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  this.checker.getRelativePointValuePair();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair  checker  =  this.checker.getRelativePointValuePair();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  this.checker.getRelativePointValuePair();	  RelativePointValuePair    checker    =    checker.getRelativePointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  abs);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  abs);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  abs);	  ConvergenceChecker    absoluteThreshold    =    checker.relativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  absoluteThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRange(),  absoluteThreshold;	  ConvergenceChecker    abs    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  rel;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  rel;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRange(),  rel;	  ConvergenceChecker    abs    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  relativeThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  relativeThreshold;	  ConvergenceChecker    absoluteThreshold    =    checker.absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
6	[BUG]  [BUGGY]  rel  =  Math.abs(rel);  relativeThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  rel  =  Math.abs(rel);  relativeThreshold  =  abs;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	rel  =  Math.abs(rel);  relativeThreshold  =  abs;	  if(rel    <    =    GOLDEN_SECTION)    {    double    abs    =    Math.abs(rel);    relativeThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
7	[BUG]  [BUGGY]  rel  =  Math.abs(rel);  relativeThreshold  =  rel;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  rel  =  Math.abs(rel);  relativeThreshold  =  rel;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	rel  =  Math.abs(rel);  relativeThreshold  =  rel;	  if(rel    <    =    GOLDEN_SECTION)    {    double    abs    =    Math.abs(rel);    relativeThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  absoluteThreshold  -=  rel.relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  absoluteThreshold  -=  rel.relativeThreshold;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  -=  rel.relativeThreshold;	  absoluteThreshold    -=    rel;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getRelativeThreshold();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRelativeThreshold();	  ConvergenceChecker    abs    =    checker.getRawConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  relativeThreshold  =  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  relativeThreshold  =  checker.doubleValue();  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	relativeThreshold  =  checker.doubleValue();	  if(relativeThreshold!=    null)    {    double    absoluteThreshold    =    checker.doubleValue();    relativeThreshold    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
11	[BUG]  [BUGGY]  relativeThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  relativeThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	relativeThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;	  if(relativeThreshold!=    null)    {    double    absoluteThreshold    =    checker.doubleValue();    relativeThreshold    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
12	[BUG]  [BUGGY]  absoluteThreshold  =  rel  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  absoluteThreshold  =  rel  +  2;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  =  rel  +  2;	  absoluteThreshold    =    rel    +    1;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
13	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsRelativeThreshold();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbsRelativeThreshold();	  ConvergenceChecker    abs    =    checker.getAbsValueChecker();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
14	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  abs);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  abs);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  abs);	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  rel);	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  checker.setRelativeThreshold(rel  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  checker.setRelativeThreshold(rel  +  1);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	checker.setRelativeThreshold(rel  +  1);	  checker.setRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;	  if(rel    >    relativeThreshold)    {    double    absoluteThreshold    =    checker.doubleValue();    rel    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
18	[BUG]  [BUGGY]  RelativePointValuePair.this.relativeThreshold  =  checker.doubleValue();  rel  =  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair.this.relativeThreshold  =  checker.doubleValue();  rel  =  relativeThreshold;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair.this.relativeThreshold  =  checker.doubleValue();  rel  =  relativeThreshold;	  if(rel    >    relativeThreshold)    {    double    absoluteThreshold    =    checker.doubleValue();    rel    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
19	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  rel;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  rel;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  rel;	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  abs;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  abs;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  abs;	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  this.checker.getValueChecker();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  checker  =  this.checker.getValueChecker();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  checker  =  this.checker.getValueChecker();	  ConvergenceChecker    checker    =    this.checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getValueChecker();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  checker  =  getValueChecker();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  checker  =  getValueChecker();	  ConvergenceChecker    checker    =    checker.getValueChecker();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
23	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  this.checker.getRangePointValuePair();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair  checker  =  this.checker.getRangePointValuePair();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  this.checker.getRangePointValuePair();	  RelativePointValuePair    checker    =    this.checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs(),  relativeThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbs(),  relativeThreshold;	  ConvergenceChecker    abs    =    checker.getAbs();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  RelativePointValuePair  rel  =  checker.getRelativePointValuePair(rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair  rel  =  checker.getRelativePointValuePair(rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  rel  =  checker.getRelativePointValuePair(rel);	  RelativePointValuePair    rel    =    checker.getRelativePointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold,  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold,  absoluteThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold,  absoluteThreshold;	  ConvergenceChecker    abs    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  absoluteThreshold);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel,  absoluteThreshold);	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
28	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker(rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker(rel);	  ConvergenceChecker    abs    =    checker.getAbstractConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
29	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;	  if(relativeThreshold!=    null)    {    double    absoluteThreshold    =    checker.doubleValue();    relativeThreshold    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
30	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  absoluteThreshold);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel,  absoluteThreshold);	  ConvergenceChecker    absoluteThreshold    =    checker.relativeThreshold(rel);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs(rel);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs(rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbs(rel);	  ConvergenceChecker    abs    =    checker.getAbs();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
32	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  absoluteThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  absoluteThreshold;	  ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  relativeThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  relativeThreshold  =  abs;  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	relativeThreshold  =  abs;	  if(rel    <    =    GOLDEN_SECTION)    {    double    abs    =    Math.abs(rel);    relativeThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  relativeThreshold  =  Math.abs(rel);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  relativeThreshold  =  Math.abs(rel);  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	relativeThreshold  =  Math.abs(rel);	  if(rel    <    =    GOLDEN_SECTION)    {    double    abs    =    Math.abs(rel);    relativeThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.relativeThreshold();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  abs  =  checker.relativeThreshold();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.relativeThreshold();	  ConvergenceChecker    abs    =    checker.getAbsValueChecker();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
36	[BUG]  [BUGGY]  RelativePointValuePair  rel  =  checker.relativePointValuePair();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair  rel  =  checker.relativePointValuePair();  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  rel  =  checker.relativePointValuePair();	  RelativePointValuePair    rel    =    checker.getRelativePointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  rel  =  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  rel  =  checker.doubleValue();  [BUGGY]      }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	rel  =  checker.doubleValue();	  if(rel    >    relativeThreshold)    {    double    absoluteThreshold    =    checker.doubleValue();    rel    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
38	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  checker.getRelativePointValuePair(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  RelativePointValuePair  checker  =  checker.getRelativePointValuePair(rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  checker.getRelativePointValuePair(rel);	  RelativePointValuePair    checker    =    checker.getRelativePointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  checker.getValueChecker(rel);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;      [BUGGY]  ConvergenceChecker  checker  =  checker.getValueChecker(rel);  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  checker  =  checker.getValueChecker(rel);	  ConvergenceChecker    checker    =    checker.getValueChecker();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
