bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  this.checker.getValuePair();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  checker  =  this.checker.getValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  checker  =  this.checker.getValuePair();	      ConvergenceChecker    checker    =    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRawConvergenceChecker();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getRawConvergenceChecker();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRawConvergenceChecker();	      ConvergenceChecker    abs    =    checker.getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  RelativePointValuePair  rel  =  checker.getRelativePointValuePair();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  RelativePointValuePair  rel  =  checker.getRelativePointValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  rel  =  checker.getRelativePointValuePair();	      RelativePointValuePair    rel    =    checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  RelativePointValuePair  rel  =  checker.getRangePointValuePair();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  RelativePointValuePair  rel  =  checker.getRangePointValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  rel  =  checker.getRangePointValuePair();	      RelativePointValuePair    rel    =    checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
5	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getRange(),  relativeThreshold;	      ConvergenceChecker    abs    =    checker.getRange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  absoluteThreshold  -=  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  absoluteThreshold  -=  relativeThreshold;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  -=  relativeThreshold;	  absoluteThreshold    -=    abs;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  absoluteThreshold  -=  rel;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  absoluteThreshold  -=  rel;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  -=  rel;	  absoluteThreshold    -=    abs;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getAbs();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbs();	      ConvergenceChecker    abs    =    checker.getConvergence();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  checker.getRelativePointValuePair();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  RelativePointValuePair  checker  =  checker.getRelativePointValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  checker.getRelativePointValuePair();	      RelativePointValuePair    checker    =    checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  this.checker.getPartialPointValuePair();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  RelativePointValuePair  checker  =  this.checker.getPartialPointValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  this.checker.getPartialPointValuePair();	      RelativePointValuePair    checker    =    checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  checker.setRelativeThreshold(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  checker.setRelativeThreshold(rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	checker.setRelativeThreshold(rel);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  if(rel  <  =  GOLDEN_SECTION)  {  double  abs  =  Math.abs(rel);  relativeThreshold  =  abs;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  if(rel  <  =  GOLDEN_SECTION)  {  double  abs  =  Math.abs(rel);  relativeThreshold  =  abs;  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	if(rel  <  =  GOLDEN_SECTION)  {  double  abs  =  Math.abs(rel);  relativeThreshold  =  abs;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  absoluteThreshold  =  absoluteThreshold;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  absoluteThreshold;	      ConvergenceChecker    absoluteThreshold    =    checker.relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
14	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  relativeThreshold;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(),  relativeThreshold;	      ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel);  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.relativeThreshold(rel);	      ConvergenceChecker    absoluteThreshold    =    checker.relativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsValue();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbsValue();	      ConvergenceChecker    abs    =    checker.getConvergence();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel);  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.getRelativeThreshold(rel);	      ConvergenceChecker    absoluteThreshold    =    checker.getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  absoluteThreshold  =  checker.absoluteThreshold;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  absoluteThreshold  =  checker.absoluteThreshold;	      ConvergenceChecker    absoluteThreshold    =    checker.relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  if(relativeThreshold!=  null)  {  double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  if(relativeThreshold!=  null)  {  double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	if(relativeThreshold!=  null)  {  double  absoluteThreshold  =  checker.doubleValue();  relativeThreshold  =  absoluteThreshold;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  checker.getValueChecker();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  checker  =  checker.getValueChecker();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  checker  =  checker.getValueChecker();	      ConvergenceChecker    checker    =    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  checker.getRangePointValuePair();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  RelativePointValuePair  checker  =  checker.getRangePointValuePair();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	RelativePointValuePair  checker  =  checker.getRangePointValuePair();	      RelativePointValuePair    checker    =    checker.getPartialPointValuePair();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  absoluteThreshold  =  rel  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  absoluteThreshold  =  rel  +  1;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  =  rel  +  1;	  absoluteThreshold    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbstractConvergenceChecker();	      ConvergenceChecker    abs    =    checker.getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  absoluteThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  absoluteThreshold  =  absoluteThreshold;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	absoluteThreshold  =  absoluteThreshold;	  absoluteThreshold    =    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsValueChecker();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  ConvergenceChecker  abs  =  checker.getAbsValueChecker();  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	ConvergenceChecker  abs  =  checker.getAbsValueChecker();	      ConvergenceChecker    abs    =    checker.getConvergenceChecker();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(rel  >  relativeThreshold)  {  double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;    [BUGGY]  if(rel  >  relativeThreshold)  {  double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	if(rel  >  relativeThreshold)  {  double  absoluteThreshold  =  checker.doubleValue();  rel  =  absoluteThreshold;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
