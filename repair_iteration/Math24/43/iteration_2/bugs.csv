bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  b  =  getRelativeThreshold(a,  previous);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  int  b  =  getRelativeThreshold(a,  previous);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	int  b  =  getRelativeThreshold(a,  previous);	      int    b    =    getRelativeThreshold(a);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  int  b  =  getRelativeThreshold(previous);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  int  b  =  getRelativeThreshold(previous);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	int  b  =  getRelativeThreshold(previous);	      int    b    =    getRelativeThreshold(a);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fv  :  -fx);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fv  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(x,  isMinim?  fv  :  -fx);	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fv    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fv    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fx  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(fx,  isMinim?  fx  :  -fx);	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(fv,    isMinim?    fx    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(fv,  isMinim?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(fv,  isMinim?  fx  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(fv,  isMinim?  fx  :  -fx);	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(fv,    isMinim?    fx    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  fv?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  fv?  fx  :  -fx);  [BUGGY]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  fv?  fx  :  -fx);	  UnivariatePointValuePair    current    =    new    UnivariatePointValuePair(fx,    isMinim?    fx    :    -fx);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(fw);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  double  b  =  computeObjectiveValue(fw);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	double  b  =  computeObjectiveValue(fw);	      double    b    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(fv);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  double  b  =  computeObjectiveValue(fv);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	double  b  =  computeObjectiveValue(fv);	      double    b    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  isMinim?  fw  :  -fx);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  isMinim?  fw  :  -fx);  [BUGGY]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fx,  isMinim?  fw  :  -fx);	  UnivariatePointValuePair    current    =    new    UnivariatePointValuePair(fw,    isMinim?    fx    :    -fx);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -x);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -x);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -x);	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fw);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fw);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fw);	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous.add(new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(previous!=  null);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  Preconditions.checkState(previous!=  null);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	Preconditions.checkState(previous!=  null);	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous.add(new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  int  a  =  getRelativeThreshold()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  int  a  =  getRelativeThreshold()  +  1;  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	int  a  =  getRelativeThreshold()  +  1;	      int    a    =    getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  double  a  =  getRelativeThreshold();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  double  a  =  getRelativeThreshold();  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	double  a  =  getRelativeThreshold();	      int    a    =    getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  previous  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  null;  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  null;	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous.add(new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fv  :  -fx);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fv  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fv  :  -fx);	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fv    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fx);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fx);	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fx    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fw,  fv?  fx  :  -fx);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fw,  fv?  fx  :  -fx);  [BUGGY]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	UnivariatePointValuePair  current  =  new  UnivariatePointValuePair(fw,  fv?  fx  :  -fx);	  UnivariatePointValuePair    current    =    new    UnivariatePointValuePair(fw,    isMinim?    fx    :    -fx);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  int  a  =  getRelativeThreshold()  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  int  a  =  getRelativeThreshold()  -  1;  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	int  a  =  getRelativeThreshold()  -  1;	      int    a    =    getRelativeThreshold();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fw);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fw);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	previous  =  new  UnivariatePointValuePair(fw,  isMinim?  fx  :  -fw);	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(fv!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  if(fv!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	if(fv!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous.add(new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  if(previous!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  if(previous!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	if(previous!=  null)  {  for(int  x  =  0;  x  <  fv;  ++x)  {  previous.add(new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }	      if(previous!=    null)    {    for(int    x    =    0;    x    <    fv;    ++x)    {    previous.add(new    UnivariatePointValuePair(x,    isMinim?    fx    :    -x);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  if(isMinim)  {  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  if(isMinim)  {  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	if(isMinim)  {  previous  =  new  UnivariatePointValuePair(x,  isMinim?  fx  :  -fx);  }	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(x,    isMinim?    fx    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  double  b  =  computeObjectiveValue(v);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  double  b  =  computeObjectiveValue(v);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	double  b  =  computeObjectiveValue(v);	      double    b    =    computeObjectiveValue(x);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  int  b  =  getRelativeThreshold(relativeThreshold);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  int  b  =  getRelativeThreshold(relativeThreshold);  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	int  b  =  getRelativeThreshold(relativeThreshold);	      int    b    =    getRelativeThreshold(a);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  if(isMinim)  {  previous  =  new  UnivariatePointValuePair(fv,  fw  -  fx);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  d  =  0;  double  e  =  0;  double  fx  =  computeObjectiveValue(x);  if  (!isMinim)  {  fx  =  -fx;  }  double  fv  =  fx;  double  fw  =  fx;  UnivariatePointValuePair  previous  =  null;    [BUGGY]  if(isMinim)  {  previous  =  new  UnivariatePointValuePair(fv,  fw  -  fx);  }  [BUGGY]    UnivariatePointValuePair  current    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	if(isMinim)  {  previous  =  new  UnivariatePointValuePair(fv,  fw  -  fx);  }	      if(previous!=    null)    {    if(isMinim)    {    previous    =    new    UnivariatePointValuePair(fv,    isMinim?    fx    :    -fx);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
