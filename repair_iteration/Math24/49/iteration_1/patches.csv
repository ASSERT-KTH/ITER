bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  continue;  }	      if(!stop)    {    for(int    i    =    0;    i    <    iter;    i++)    {    if(isMinim?    fx    :    -i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(m);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  int  w  =  absoluteThreshold  *  FastMath.abs(m);  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	int  w  =  absoluteThreshold  *  FastMath.abs(m);	      int    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(x);  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(x);	      int    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  if(isMinim)  {  if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(isMinim)  {  if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(isMinim)  {  if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(isMinim?    fx    :    -iter);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
10	[BUG]  [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(isMinim)  {  continue;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  if(stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop  &&  isMinim  &&  isMaximum  &&  isMinim)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  if(stop  &&  isMinim)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop  &&  isMinim)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop  &&  isMinim)  {	  if(stop)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  continue;  }  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  fx  :  -i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  fx  :  -i)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  fx  :  -i)  {  continue;  }	      if(!stop)    {    for(int    i    =    0;    i    <    iter;    ++i)    {    if(isMinim?    fx    :    -i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	for(int  iter  =  0;  iter  <  tol1;  iter++)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  return  false;  }  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  i  =  0;  i  <  iter;  i++)  {  if(isMinim?  fx  :  -i)  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  tol2;  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  tol2;  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  tol2;  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	int  iter  =  0;  iter  <  iter;  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  int  w  =  relativeThreshold  *  FastMath.abs(tol1);  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	int  w  =  relativeThreshold  *  FastMath.abs(tol1);	      int    w    =    relativeThreshold    *    FastMath.abs(m);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum  &&  isMinim)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMinim  &&  isMaximum  &&  isMinim)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  stop)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  stop)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  stop)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  stop)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  stop)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  stop)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  isMaximum)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  isMaximum)  {  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop  &&  isMinim  &&  isMaximum  &&  isMinim  &&  isMinim  &&  isMaximum)  {	  if(!stop    &&    isMinim    &&    isMinim    &&    isMinim    &&    isMaximum)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  if(!stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  m  :  -i)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  m  :  -i)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop)  {  for(int  i  =  0;  i  <  iter;  ++i)  {  if(isMinim?  m  :  -i)  {  continue;  }	      if(!stop)    {    for(int    i    =    0;    i    <    iter;    ++i)    {    if(isMinim?    fx    :    -i)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getOptimizationChecker();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  ConvergenceChecker  checker  =  getOptimizationChecker();  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	ConvergenceChecker  checker  =  getOptimizationChecker();	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  Checker.checkNotNull(iter);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  ConvergenceChecker  checker  =  Checker.checkNotNull(iter);  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	ConvergenceChecker  checker  =  Checker.checkNotNull(iter);	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  ConvergenceChecker  checker  =  getOptimizationChecker();  if(checker!=  null)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  ConvergenceChecker  checker  =  getOptimizationChecker();  if(checker!=  null)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	ConvergenceChecker  checker  =  getOptimizationChecker();  if(checker!=  null)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }  [BUGGY]    double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(stop)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(!stop)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop)  {  for(int  iter  =  0;  iter  <  tol1;  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  tol1.iterator();  iter++)  {  tol1  +=  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop)  {  for(int  iter  =  0;  iter  <  tol1.iterator();  iter++)  {  tol1  +=  1;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop)  {  for(int  iter  =  0;  iter  <  tol1.iterator();  iter++)  {  tol1  +=  1;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    tol1    +=    1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	for(int  iter  =  0;  iter  <  iter;  iter++)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(stop)  {  break;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(stop)  {  break;  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(isMinim)  {  for(int  iter  =  0;  iter  <  iter;  iter++)  {  if(stop)  {  break;  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(!stop)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  if(!stop)  {  for(int  iter  =  1;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    =  new  UnivariatePointValuePair(x,  isMinim  ?  fx  :  -fx);  int  iter  =  0;  while  (true)  {  final  double  m  =  0.5  *  (a  +  b);  final  double  tol1  =  relativeThreshold  *  FastMath.abs(x)  +  absoluteThreshold;  final  double  tol2  =  2  *  tol1;  final  boolean  stop  =  FastMath.abs(x  -  m)  <=  tol2  -  0.5  *  (b  -  a);    [BUGGY]  if(!stop)  {  for(int  iter  =  1;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }  [BUGGY]    if  (!stop)  {  double  p  =  0;  double  q  =  0;  double  r  =  0;  double  u  =  0;  if  (FastMath.abs(e)  >  tol1)  {  //  Fit  parabola.  r  =  (x  -  w)  *  (fx  -  fv);  q  =  (x  -  v)  *  (fx  -  fw);  p  =  (x  -  v)  *  q  -  (x  -  w)  *  r;  q  =  2  *  (q  -  r);  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	if(!stop)  {  for(int  iter  =  1;  iter  <  iter;  iter++)  {  if(isMinim?  fx  :  -iter);  }	      if(!stop)    {    for(int    iter    =    0;    iter    <    iter;    iter++)    {    if(isMinim?    fx    :    -iter);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
