bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  relativeThreshold  =  rels  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  relativeThreshold  =  rels  +  1;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rels  +  1;	  relativeThreshold    =    rels;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs;	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  relativeThreshold;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  relativeThreshold;	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getRange();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.getValue();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  double  absoluteThreshold  =  abs.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  double  absoluteThreshold  =  abs.doubleValue()  +  1;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  abs.doubleValue()  +  1;	      double    absoluteThreshold    =    abs.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  abs;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  abs;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  /  abs;	      double    absoluteThreshold    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs);  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs);	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
8	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  1;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  +  1;	      double    absoluteThreshold    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond();  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getRange();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  relativeThreshold  -=  abs;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  relativeThreshold  -=  abs;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  -=  abs;	  relativeThreshold    =    abs;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value);  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value);	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValue();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  relativeThreshold  =  rels  -  1;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  relativeThreshold  =  rels  -  1;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rels  -  1;	  relativeThreshold    =    rels;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  absoluteThreshold  =  rel;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  absoluteThreshold  =  rel;  [BUGGY]    absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	absoluteThreshold  =  rel;	  relativeThreshold    =    absoluteThreshold;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence();  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence();	      ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValuePair();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  abs;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }    [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  +  abs;  [BUGGY]    relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  +  abs;	      double    absoluteThreshold    =    checker.doubleValue();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
