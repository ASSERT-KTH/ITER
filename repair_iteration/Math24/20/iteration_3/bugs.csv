bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  *  abs;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  *  abs;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  *  abs;	  double    absoluteThreshold    =    checker.doubleValue()    +    abs;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  relativeThreshold  =  abs  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  abs  +  1;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  abs  +  1;	  relativeThreshold    =    rels    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence(),  abs;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence(),  abs;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getValueSequence(),  abs;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValueSequence();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
4	[BUG]  [BUGGY]  absoluteThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  absoluteThreshold  =  abs;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	absoluteThreshold  =  abs;	  absoluteThreshold    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  absoluteThreshold  =  rels;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  absoluteThreshold  =  rels;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	absoluteThreshold  =  rels;	  absoluteThreshold    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  1;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  /  1;	  double    absoluteThreshold    =    checker.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
7	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  rel;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  rel;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  rel;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  abs;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  abs;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  abs;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  relativeThreshold  -=  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  -=  absoluteThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  -=  absoluteThreshold;	  relativeThreshold    -=    abs;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  absoluteThreshold  -=  abs;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  absoluteThreshold  -=  abs;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	absoluteThreshold  -=  abs;	  relativeThreshold    -=    abs;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  double  absoluteThreshold  =  abs.doubleValue()  /  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  double  absoluteThreshold  =  abs.doubleValue()  /  checker.doubleValue();  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  abs.doubleValue()  /  checker.doubleValue();	  double    absoluteThreshold    =    checker.doubleValue()    /    abs;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(rel);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(rel);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.setValue(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value,  abs);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value,  abs);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValue(value,  abs);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.setValue(value);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(rel);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(rel);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(abs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  rel);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  rel);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  rel);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(abs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  relativeThreshold  =  absoluteThreshold  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  absoluteThreshold  -  1;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  absoluteThreshold  -  1;	  relativeThreshold    =    rels    -    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  relativeThreshold;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  relativeThreshold;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(),    abs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
18	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  rel;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  rel;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  rel;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(),    abs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond()  +  1;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getSecond()  +  1;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getSecond();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(rel);	  ConvergenceChecker    <    GOLDEN_SECTION    :    checker.getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  relativeThreshold;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  relativeThreshold;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(),    abs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  abs  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  double  absoluteThreshold  =  checker.doubleValue()  /  abs  +  1;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	double  absoluteThreshold  =  checker.doubleValue()  /  abs  +  1;	  double    absoluteThreshold    =    checker.doubleValue()    /    abs;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  abs);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  abs);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(abs,  abs);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(abs);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  relativeThreshold  =  rel  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  rel  -  1;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rel  -  1;	  relativeThreshold    =    rels    -    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  absoluteThreshold;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getRange(),  absoluteThreshold;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getRange(),    relativeThreshold;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  relativeThreshold  =  rel  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  rel  +  1;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rel  +  1;	  relativeThreshold    =    rels    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(null);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(null);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(null);	  ConvergenceChecker    <    GOLDEN_SECTION    :    checker.getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDENSequence();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDENSequence();  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDENSequence();	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValueSequence();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  absoluteThreshold  =  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  absoluteThreshold  =  relativeThreshold;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	absoluteThreshold  =  relativeThreshold;	  absoluteThreshold    =    rel;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(value);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(value);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  :  checker.setValue(value);	  ConvergenceChecker    <    GOLDEN_SECTION    :    checker.getValue();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  relativeThreshold  =  rels  /  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  rels  /  1;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rels  /  1;	  relativeThreshold    =    rels    -    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  absoluteThreshold;  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.getGOLDEN_SECTION(),  abs,  absoluteThreshold;	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getGOLDEN_SECTION(),    abs;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValueSequence(true);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValueSequence(true);  [BUGGY]      relativeThreshold  =  rel;  absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	ConvergenceChecker  <  GOLDEN_SECTION  =  checker.setValueSequence(true);	  ConvergenceChecker    <    GOLDEN_SECTION    =    checker.getValueSequence();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  relativeThreshold  =  rels  +  2;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      ConvergenceChecker<UnivariatePointValuePair>  checker)  {  super(checker);  if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }      [BUGGY]  relativeThreshold  =  rels  +  2;  [BUGGY]      absoluteThreshold  =  abs;  }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	relativeThreshold  =  rels  +  2;	  relativeThreshold    =    rels    +    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
