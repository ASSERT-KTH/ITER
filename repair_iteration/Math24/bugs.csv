bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (x <= m) { [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  if (u - a < tol2 || b - u < tol2) { [BUGGY] if (x <= m) { [BUGGY] d = tol1; } else { d = -tol1; } } } else {  if (x < m) { e = b - x; } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	183	183	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  if (u - a < tol2 || b - u < tol2) { [BUGGY] [BUGGY] if (x <= m) { d = tol1; } else { d = -tol1; } } } else {  if (x < m) { e = b - x; } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	183	183	1	add	
3	[BUG] [BUGGY] d = tol1; [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  if (u - a < tol2 || b - u < tol2) { if (x <= m) { [BUGGY] d = tol1; [BUGGY] } else { d = -tol1; } } } else {  if (x < m) { e = b - x; } else { e = a - x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  if (u - a < tol2 || b - u < tol2) { if (x <= m) { [BUGGY] [BUGGY] d = tol1; } else { d = -tol1; } } } else {  if (x < m) { e = b - x; } else { e = a - x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	add	
5	[BUG] [BUGGY] u = x + tol1; [FE] AssertionError [CONTEXT] e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; }  if (FastMath.abs(d) < tol1) { if (d >= 0) { [BUGGY] u = x + tol1; [BUGGY] } else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; }  if (FastMath.abs(d) < tol1) { if (d >= 0) { [BUGGY] [BUGGY] u = x + tol1; } else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	add	
7	[BUG] [BUGGY] v = u; [FE] AssertionError [CONTEXT] } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { [BUGGY] v = u; [BUGGY] fv = fu; } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	262	262	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { [BUGGY] [BUGGY] v = u; fv = fu; } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	262	262	1	add	
9	[BUG] [BUGGY] fv = fu; [FE] AssertionError [CONTEXT] } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; [BUGGY] fv = fu; [BUGGY] } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	263	263	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; [BUGGY] [BUGGY] fv = fu; } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	263	263	1	add	
11	[BUG] [BUGGY] b = u; [FE] AssertionError [CONTEXT] if (u < x) { a = u; } else { [BUGGY] b = u; [BUGGY] } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4082482904638631	251	251	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (u < x) { a = u; } else { [BUGGY] [BUGGY] b = u; } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4082482904638631	251	251	1	add	
13	[BUG] [BUGGY] } else if (fu <= fv ||  Precision.equals(v, x) ||    Precision.equals(v, w)) { [FE] AssertionError [CONTEXT] a = u; } else { b = u; } if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw; w = u; fw = fu; [BUGGY] } else if (fu <= fv ||        Precision.equals(v, x) ||                Precision.equals(v, w)) { [BUGGY] Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4082482904638631	259	261	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] a = u; } else { b = u; } if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw; w = u; fw = fu; [BUGGY] [BUGGY] } else if (fu <= fv ||        Precision.equals(v, x) ||                Precision.equals(v, w)) { Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4082482904638631	259	261	1	add	
15	[BUG] [BUGGY] d = p / q; [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  [BUGGY] d = p / q; [BUGGY] u = x + d;  if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	178	178	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  [BUGGY] [BUGGY] d = p / q; u = x + d;  if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	178	178	1	add	
17	[BUG] [BUGGY] u = x + d; [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; [BUGGY] u = x + d; [BUGGY]   if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	179	179	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; [BUGGY] [BUGGY] u = x + d;  if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	179	179	1	add	
19	[BUG] [BUGGY] if (u - a < tol2 || b - u < tol2) { [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  [BUGGY] if (u - a < tol2 || b - u < tol2) { [BUGGY] if (x <= m) { d = tol1; } else { d = -tol1; } } } else {  if (x < m) { e = b - x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	182	182	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {  d = p / q; u = x + d;  [BUGGY] [BUGGY] if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } } else {  if (x < m) { e = b - x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3779644730092272	182	182	1	add	
21	[BUG] [BUGGY] this(rel, abs, null); [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs) { [BUGGY] this(rel, abs, null); [BUGGY] } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] BrentOptimizer(double,double)  double rel double abs [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	104	104	1	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs) { [BUGGY] [BUGGY] this(rel, abs, null); } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] BrentOptimizer(double,double)  double rel double abs [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	104	104	1	add	
23	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs) { this(rel, abs, null); [BUGGY] } [BUGGY]  [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] BrentOptimizer(double,double)  double rel double abs [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	105	105	1	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs) { this(rel, abs, null); [BUGGY] [BUGGY] } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] BrentOptimizer(double,double)  double rel double abs [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	105	105	1	add	
25	[BUG] [BUGGY] p = -p; [FE] AssertionError [CONTEXT] double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { [BUGGY] p = -p; [BUGGY] } else { q = -q; } r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	166	166	1	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { [BUGGY] [BUGGY] p = -p; } else { q = -q; } r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	166	166	1	add	
27	[BUG] [BUGGY] if (d >= 0) { [FE] AssertionError [CONTEXT] if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; }  if (FastMath.abs(d) < tol1) { [BUGGY] if (d >= 0) { [BUGGY] u = x + tol1; } else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; }  if (FastMath.abs(d) < tol1) { [BUGGY] [BUGGY] if (d >= 0) { u = x + tol1; } else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	add	
29	[BUG] [BUGGY] b = x; [FE] AssertionError [CONTEXT] if (checker != null) { if (checker.converged(iter, previous, current)) { return current; } }  if (fu <= fx) { if (u < x) { [BUGGY] b = x; [BUGGY] } else { a = x; } v = w; fv = fw; w = x; fw = fx; x = u; fx = fu; } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	237	237	1	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (checker != null) { if (checker.converged(iter, previous, current)) { return current; } }  if (fu <= fx) { if (u < x) { [BUGGY] [BUGGY] b = x; } else { a = x; } v = w; fv = fw; w = x; fw = fx; x = u; fx = fu; } else { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	237	237	1	add	
31	[BUG] [BUGGY] return current; [FE] AssertionError [CONTEXT] w = u; fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } } else { // Default termination (Brent's criterion). [BUGGY] return current; [BUGGY] } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	267	267	1	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] w = u; fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } } else { // Default termination (Brent's criterion). [BUGGY] [BUGGY] return current; } [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	267	267	1	add	
33	[BUG] [BUGGY] super(checker); [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { [BUGGY] super(checker); [BUGGY]  if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	75	75	1	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { [BUGGY] [BUGGY] super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	75	75	1	add	
35	[BUG] [BUGGY] if (rel < MIN_RELATIVE_TOLERANCE) { [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); [BUGGY] if (rel < MIN_RELATIVE_TOLERANCE) { [BUGGY] throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); [BUGGY] [BUGGY] if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	77	77	1	add	
37	[BUG] [BUGGY] if (abs <= 0) { [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } [BUGGY] if (abs <= 0) { [BUGGY] throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	80	80	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } [BUGGY] [BUGGY] if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	80	80	1	add	
39	[BUG] [BUGGY] relativeThreshold = rel; [FE] AssertionError [CONTEXT] ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } [BUGGY] relativeThreshold = rel; [BUGGY] absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } [BUGGY] [BUGGY] relativeThreshold = rel; absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	84	84	1	add	
41	[BUG] [BUGGY] absoluteThreshold = abs; [FE] AssertionError [CONTEXT] super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; [BUGGY] absoluteThreshold = abs; [BUGGY] } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; [BUGGY] [BUGGY] absoluteThreshold = abs; } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	85	85	1	add	
43	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; [BUGGY] } [BUGGY]  [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; [BUGGY] [BUGGY] } [CLASS] BrentOptimizer [METHOD] <init> [RETURN_TYPE] ConvergenceChecker)  double rel double abs UnivariatePointValuePair> checker [VARIABLES] double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE abs absoluteThreshold rel relativeThreshold ConvergenceChecker checker boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	add	
45	[BUG] [BUGGY] private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); [FE] AssertionError [CONTEXT] [BUGGY] private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); [BUGGY]  [CLASS] BrentOptimizer  [VARIABLES] 	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	42	42	1	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); [CLASS] BrentOptimizer  [VARIABLES] 	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	42	42	1	add	
47	[BUG] [BUGGY] private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); [FE] AssertionError [CONTEXT] [BUGGY] private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); [BUGGY]  [CLASS] BrentOptimizer  [VARIABLES] 	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	46	46	1	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); [CLASS] BrentOptimizer  [VARIABLES] 	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	46	46	1	add	
49	[BUG] [BUGGY] final boolean isMinim = getGoalType() == GoalType.MINIMIZE; [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { [BUGGY] final boolean isMinim = getGoalType() == GoalType.MINIMIZE; [BUGGY] final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	110	110	1	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { [BUGGY] [BUGGY] final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	110	110	1	add	
51	[BUG] [BUGGY] final double lo = getMin(); [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; [BUGGY] final double lo = getMin(); [BUGGY] final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	111	111	1	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; [BUGGY] [BUGGY] final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	111	111	1	add	
53	[BUG] [BUGGY] final double mid = getStartValue(); [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); [BUGGY] final double mid = getStartValue(); [BUGGY] final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	112	112	1	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); [BUGGY] [BUGGY] final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	112	112	1	add	
55	[BUG] [BUGGY] final double hi = getMax(); [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); [BUGGY] final double hi = getMax(); [BUGGY]   final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	113	113	1	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); [BUGGY] [BUGGY] final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	113	113	1	add	
57	[BUG] [BUGGY] final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  [BUGGY] final ConvergenceChecker<UnivariatePointValuePair> checker   = getConvergenceChecker(); [BUGGY] = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	116	117	1	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  [BUGGY] [BUGGY] final ConvergenceChecker<UnivariatePointValuePair> checker   = getConvergenceChecker(); = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	116	117	1	add	
59	[BUG] [BUGGY] if (lo < hi) { [FE] AssertionError [CONTEXT] final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; [BUGGY] if (lo < hi) { [BUGGY] a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	121	121	1	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; [BUGGY] [BUGGY] if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	121	121	1	add	
61	[BUG] [BUGGY] a = lo; [FE] AssertionError [CONTEXT] final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { [BUGGY] a = lo; [BUGGY] b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	122	122	1	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double mid = getStartValue(); final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { [BUGGY] [BUGGY] a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	122	122	1	add	
63	[BUG] [BUGGY] b = hi; [FE] AssertionError [CONTEXT] final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; [BUGGY] b = hi; [BUGGY] } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	123	123	1	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double hi = getMax();  final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; [BUGGY] [BUGGY] b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	123	123	1	add	
65	[BUG] [BUGGY] double x = mid; [FE] AssertionError [CONTEXT] double a; double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } [BUGGY] double x = mid; [BUGGY] double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	129	129	1	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double a; double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } [BUGGY] [BUGGY] double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	129	129	1	add	
67	[BUG] [BUGGY] double v = x; [FE] AssertionError [CONTEXT] double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; [BUGGY] double v = x; [BUGGY] double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx;  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	130	130	1	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; [BUGGY] [BUGGY] double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx;  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	130	130	1	add	
69	[BUG] [BUGGY] double w = x; [FE] AssertionError [CONTEXT] if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; [BUGGY] double w = x; [BUGGY] double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	131	131	1	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; [BUGGY] [BUGGY] double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	131	131	1	add	
71	[BUG] [BUGGY] double d = 0; [FE] AssertionError [CONTEXT] a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; [BUGGY] double d = 0; [BUGGY] double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	132	132	1	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; [BUGGY] [BUGGY] double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	132	132	1	add	
73	[BUG] [BUGGY] double e = 0; [FE] AssertionError [CONTEXT] b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; [BUGGY] double e = 0; [BUGGY] double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	133	133	1	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; [BUGGY] [BUGGY] double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	133	133	1	add	
75	[BUG] [BUGGY] double fx = computeObjectiveValue(x); [FE] AssertionError [CONTEXT] } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; [BUGGY] double fx = computeObjectiveValue(x); [BUGGY] if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	134	134	1	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; [BUGGY] [BUGGY] double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	134	134	1	add	
77	[BUG] [BUGGY] if (!isMinim) { [FE] AssertionError [CONTEXT] a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); [BUGGY] if (!isMinim) { [BUGGY] fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	135	135	1	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); [BUGGY] [BUGGY] if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	135	135	1	add	
79	[BUG] [BUGGY] double fv = fx; [FE] AssertionError [CONTEXT] double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } [BUGGY] double fv = fx; [BUGGY] double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	138	138	1	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } [BUGGY] [BUGGY] double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	138	138	1	add	
81	[BUG] [BUGGY] double fw = fx; [FE] AssertionError [CONTEXT] double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; [BUGGY] double fw = fx; [BUGGY]  UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	139	139	1	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; [BUGGY] [BUGGY] double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	139	139	1	add	
83	[BUG] [BUGGY] UnivariatePointValuePair previous = null; [FE] AssertionError [CONTEXT] double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; [BUGGY] UnivariatePointValuePair previous = null; [BUGGY] UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;   [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; [BUGGY] [BUGGY] UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;   [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	141	141	1	add	
85	[BUG] [BUGGY] UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [FE] AssertionError [CONTEXT] double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; [BUGGY] UnivariatePointValuePair current   = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [BUGGY] = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; [BUGGY] [BUGGY] UnivariatePointValuePair current   = new UnivariatePointValuePair(x, isMinim ? fx : -fx); = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	142	143	1	add	
87	[BUG] [BUGGY] int iter = 0; [FE] AssertionError [CONTEXT] if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [BUGGY] int iter = 0; [BUGGY] while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	145	145	1	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); [BUGGY] [BUGGY] int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	145	145	1	add	
89	[BUG] [BUGGY] final double m = 0.5 * (a + b); [FE] AssertionError [CONTEXT] } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { [BUGGY] final double m = 0.5 * (a + b); [BUGGY] final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	147	147	1	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { [BUGGY] [BUGGY] final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	147	147	1	add	
91	[BUG] [BUGGY] final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [FE] AssertionError [CONTEXT] double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); [BUGGY] final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [BUGGY] final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0;  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	148	148	1	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); [BUGGY] [BUGGY] final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0;  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	148	148	1	add	
93	[BUG] [BUGGY] final double tol2 = 2 * tol1; [FE] AssertionError [CONTEXT] double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [BUGGY] final double tol2 = 2 * tol1; [BUGGY]   final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	149	149	1	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; [BUGGY] [BUGGY] final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	149	149	1	add	
95	[BUG] [BUGGY] final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [FE] AssertionError [CONTEXT] UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  [BUGGY] final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [BUGGY] if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	152	152	1	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  [BUGGY] [BUGGY] final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	152	152	1	add	
97	[BUG] [BUGGY] if (!stop) { [FE] AssertionError [CONTEXT] = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [BUGGY] if (!stop) { [BUGGY] double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); [BUGGY] [BUGGY] if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	153	153	1	add	
99	[BUG] [BUGGY] double p = 0; [FE] AssertionError [CONTEXT] int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { [BUGGY] double p = 0; [BUGGY] double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r);  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	154	154	1	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1;  final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { [BUGGY] [BUGGY] double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r);  [CLASS] BrentOptimizer [METHOD] doOptimize [RETURN_TYPE] UnivariatePointValuePair  [VARIABLES] ConvergenceChecker checker UnivariatePointValuePair current previous boolean isMinim stop double GOLDEN_SECTION MIN_RELATIVE_TOLERANCE a abs absoluteThreshold b d e fu fv fw fx hi lo m mid p q r rel relativeThreshold tol1 tol2 u v w x int iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	154	154	1	add	
