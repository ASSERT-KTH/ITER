bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  u  =  a  -  x;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  -  x;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  -  x;	  u    =    a    -    q;    	non-compiled	[CE]  not  a  statement	15	None	replace
2	[BUG]  [BUGGY]  u  =  b  -  x;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  b  -  x;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  b  -  x;	  u    =    b    -    q;    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  u  =  a  -  m  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  -  m  +  1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  -  m  +  1;	  u    =    a    -    m;    	non-compiled	[CE]  not  a  statement	2	None	replace
4	[BUG]  [BUGGY]  u  =  u  +  tol2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  u  +  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  u  +  tol2;	  u    =    u    +    d;    	non-compiled	[CE]  not  a  statement	8	None	replace
5	[BUG]  [BUGGY]  d  =  a  -  tol2;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  -  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  -  tol2;	  d    =    m    -    tol2;    	non-compiled	[CE]  not  a  statement	5	None	replace
6	[BUG]  [BUGGY]  d  =  p  /  q  *  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  p  /  q  *  1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  p  /  q  *  1;	  d    =    p    /    q    +    1;    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  d  =  a  +  x;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  +  x;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  +  x;	  d    =    a    +    tol1;    	non-compiled	[CE]  not  a  statement	1	None	replace
8	[BUG]  [BUGGY]  d  =  a  +  m;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  +  m;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  +  m;	  d    =    a    +    tol1;    	non-compiled	[CE]  not  a  statement	1	None	replace
9	[BUG]  [BUGGY]  d  =  p  /  m;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  p  /  m;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  p  /  m;	  d    =    p    /    tol2;    	non-compiled	[CE]  not  a  statement	18	None	replace
10	[BUG]  [BUGGY]  d  =  p  -  a;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  p  -  a;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  p  -  a;	  d    =    a    -    p;    	non-compiled	[CE]  not  a  statement	23	None	replace
11	[BUG]  [BUGGY]  d  =  m  /  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  m  /  1;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  m  /  1;	  d    =    m    -    1;    	non-compiled	[CE]  not  a  statement	20	None	replace
12	[BUG]  [BUGGY]  d  =  a  -  tol1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  -  tol1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  -  tol1;	  d    =    a    -    x;    	non-compiled	[CE]  not  a  statement	4	None	replace
13	[BUG]  [BUGGY]  d  =  a  -  m;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  -  m;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  -  m;	  d    =    p    -    m;    	non-compiled	[CE]  not  a  statement	12	None	replace
14	[BUG]  [BUGGY]  d  =  u  -  a;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  u  -  a;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  u  -  a;	  d    =    a    -    u;    	non-compiled	[CE]  not  a  statement	10	None	replace
15	[BUG]  [BUGGY]  d  =  d  +  tol2;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  d  +  tol2;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  d  +  tol2;	  d    =    x    +    tol1;    	non-compiled	[CE]  not  a  statement	22	None	replace
16	[BUG]  [BUGGY]  d  =  d  +  tol1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  d  +  tol1;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  d  +  tol1;	  d    =    x    +    tol1;    	non-compiled	[CE]  not  a  statement	22	None	replace
17	[BUG]  [BUGGY]  d  =  u  -  tol2;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  u  -  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  u  -  tol2;	  d    =    u    -    m;    	non-compiled	[CE]  not  a  statement	9	None	replace
18	[BUG]  [BUGGY]  u  =  u  -  a;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  u  -  a;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  u  -  a;	  u    =    b    -    a;    	non-compiled	[CE]  not  a  statement	24	None	replace
19	[BUG]  [BUGGY]  u  =  a  -  b;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  -  b;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  -  b;	  u    =    b    -    a;    	non-compiled	[CE]  not  a  statement	24	None	replace
20	[BUG]  [BUGGY]  u  =  a  -  tol2;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  -  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  -  tol2;	  u    =    m    -    tol2;    	non-compiled	[CE]  not  a  statement	3	None	replace
21	[BUG]  [BUGGY]  u  =  u  -  tol2;  [CE]  'else'  without  'if'  [FE]                  AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  u  -  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  u  -  tol2;	  u    =    m    -    tol2;    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
22	[BUG]  [BUGGY]  u  =  a  +  tol2;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  +  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  +  tol2;	  u    =    a    +    d;    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
23	[BUG]  [BUGGY]  u  =  x  +  tol2;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  x  +  tol2;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  x  +  tol2;	  u    =    x    +    d;    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
24	[BUG]  [BUGGY]  d  =  p  /  tol1;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  p  /  tol1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  p  /  tol1;	  d    =    p    /    tol2;    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
25	[BUG]  [BUGGY]  u  =  a  -  tol1;  [CE]  'else'  without  'if'  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  a  -  tol1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  a  -  tol1;	  u    =    a    -    q;    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
26	[BUG]  [BUGGY]  u  =  m  -  tol1;  [CE]  'else'  without  'if'  [FE]                AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  m  -  tol1;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  m  -  tol1;	  u    =    m    -    tol2;    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
27	[BUG]  [BUGGY]  d  =  x  +  m;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  x  +  m;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  x  +  m;	  d    =    x    +    tol1;    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
28	[BUG]  [BUGGY]  d  =  u  +  tol1;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  u  +  tol1;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  u  +  tol1;	  d    =    x    +    tol1;    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
29	[BUG]  [BUGGY]  d  =  u  +  tol2;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  u  +  tol2;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  u  +  tol2;	  d    =    a    +    tol2;    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
30	[BUG]  [BUGGY]  u  =  b  -  m;  [CE]  'else'  without  'if'  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  u  =  b  -  m;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	u  =  b  -  m;	  u    =    a    -    m;    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
31	[BUG]  [BUGGY]  d  =  a  -  1;  [CE]  'else'  without  'if'  [FE]            AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  a  -  1;  [BUGGY]      }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  a  -  1;	  d    =    m    -    1;    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
32	[BUG]  [BUGGY]  d  =  tol2  -  m;  [CE]  'else'  without  'if'  [FE]              AssertionError      [CONTEXT]      if  (p  >  q  *  (a  -  x)  &&  p  <  q  *  (b  -  x)  &&  FastMath.abs(p)  <  FastMath.abs(0.5  *  q  *  r))  {  d  =  p  /  q;  u  =  x  +  d;  if  (u  -  a  <  tol2  ||  b  -  u  <  tol2)  {  if  (x  <=  m)  {      [BUGGY]  d  =  tol2  -  m;  [BUGGY]      d  =  tol1;  }  else  {  d  =  -tol1;  }  }  }  else  {  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.5	184	184	1	replace	d  =  tol2  -  m;	  d    =    u    -    m;    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
