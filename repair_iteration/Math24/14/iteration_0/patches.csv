bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(d  >  0)  {  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]  if(d  >  0)  {  [BUGGY]  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  >  0)  {	if  (d  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    [BUGGY]  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	  	if  (d  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d));  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d));  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.abs(fastMath.abs(d));		non-compiled	[CE]  illegal  start  of  type	28	None	add
4	[BUG]  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d)-  tol1);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d)-  tol1);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.abs(fastMath.abs(d)-  tol1);		non-compiled	[CE]  illegal  start  of  type	28	None	add
5	[BUG]  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d)  <  tol1);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.abs(fastMath.abs(d)  <  tol1);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.abs(fastMath.abs(d)  <  tol1);		non-compiled	[CE]  illegal  start  of  type	28	None	add
6	[BUG]  [BUGGY]    int  d  =  Math.min(tol1,  d);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.min(tol1,  d);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.min(tol1,  d);		non-compiled	[CE]  illegal  start  of  type	28	None	add
7	[BUG]  [BUGGY]    int  d  =  Math.min(tol1,  tol2);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.min(tol1,  tol2);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.min(tol1,  tol2);		non-compiled	[CE]  illegal  start  of  type	28	None	add
8	[BUG]  [BUGGY]    int  d  =  Math.min(tol1,  tol1);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    int  d  =  Math.min(tol1,  tol1);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    int  d  =  Math.min(tol1,  tol1);		non-compiled	[CE]  illegal  start  of  type	28	None	add
9	[BUG]  [BUGGY]    d  =  a  -  tol1;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    d  =  a  -  tol1;  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    d  =  a  -  tol1;		non-compiled	[CE]  illegal  start  of  type	28	None	add
10	[BUG]  [BUGGY]    d  =  a  -  tol2;  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    d  =  a  -  tol2;  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    d  =  a  -  tol2;		non-compiled	[CE]  illegal  start  of  type	28	None	add
11	[BUG]  [BUGGY]    d  =  a  -  tol1  +  Math.abs(d);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]    d  =  a  -  tol1  +  Math.abs(d);  [BUGGY]  if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	    d  =  a  -  tol1  +  Math.abs(d);		non-compiled	[CE]  illegal  start  of  type	28	None	add
12	[BUG]  [BUGGY]  if(x  >  0)  {  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  [BUGGY]  if(x  >  0)  {  [BUGGY]  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(x  >  0)  {	if  (d  >=  0)  {  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
