bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  d  =  Math.min(tol2,  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.min(tol2,  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.min(tol2,  tol1);	  double    d    =    Math.min(tol1,    tol1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  d  =  tol1  -  a;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  tol1  -  a;  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  tol1  -  a;	  d    =    tol2    -    a;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  double  d  =  Math.abs(FastMath.abs(d));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.abs(FastMath.abs(d));  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.abs(FastMath.abs(d));	  double    d    =    Math.abs(fastMath.abs(d));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  if(d  <  MIN_RELATIVE_TOLERANCE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(d  <  MIN_RELATIVE_TOLERANCE)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  <  MIN_RELATIVE_TOLERANCE)  {	  if(d    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(d  <  MIN_RELATIVE_TOLERANCE  ||  d  >  MIN_RELATIVE_TOLERANCE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(d  <  MIN_RELATIVE_TOLERANCE  ||  d  >  MIN_RELATIVE_TOLERANCE)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  <  MIN_RELATIVE_TOLERANCE  ||  d  >  MIN_RELATIVE_TOLERANCE)  {	  if(d    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  float  d  =  Math.abs(FastMath.abs(d)  <  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  float  d  =  Math.abs(FastMath.abs(d)  <  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	float  d  =  Math.abs(FastMath.abs(d)  <  tol1);	  float    d    =    Math.abs(fastMath.abs(d)    <    tol1);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  if(d  <  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(d  <  1)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  <  1)  {	  if(d    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  float  d  =  Math.abs(FastMath.abs(d)-  tol1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  float  d  =  Math.abs(FastMath.abs(d)-  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	float  d  =  Math.abs(FastMath.abs(d)-  tol1);	  float    d    =    Math.abs(fastMath.abs(d)-    tol1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
9	[BUG]  [BUGGY]  int  d  =  Math.abs(FastMath.abs(x)  <  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.abs(FastMath.abs(x)  <  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.abs(FastMath.abs(x)  <  tol1);	  int    d    =    Math.abs(FastMath.abs(d)    <    tol1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  double  d  =  Math.abs(FastMath.abs(d)  <  tol1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.abs(FastMath.abs(d)  <  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.abs(FastMath.abs(d)  <  tol1);	  int    d    =    Math.abs(FastMath.abs(d)    <    tol1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  d  =  tol1  -  tol2  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  tol1  -  tol2  +  1;  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  tol1  -  tol2  +  1;	  d    =    tol1    -    tol2;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
12	[BUG]  [BUGGY]  d  =  tol2  -  a  +  Math.abs(d);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  tol2  -  a  +  Math.abs(d);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  tol2  -  a  +  Math.abs(d);	  d    =    a    -    tol2    +    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  double  tol2  =  Math.abs(d);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  tol2  =  Math.abs(d);  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  tol2  =  Math.abs(d);	  int    tol2    =    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
14	[BUG]  [BUGGY]  int  tol2  =  Math.abs(tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  tol2  =  Math.abs(tol1);  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  tol2  =  Math.abs(tol1);	  int    tol2    =    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  int  d  =  Math.abs(FastMath.abs(x));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.abs(FastMath.abs(x));  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.abs(FastMath.abs(x));	  int    d    =    Math.abs(FastMath.abs(d));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  double  d  =  Math.min(tol2,  d);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.min(tol2,  d);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.min(tol2,  d);	  double    d    =    Math.min(tol1,    d);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  d  =  a  -  tol2  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  a  -  tol2  +  1;  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  a  -  tol2  +  1;	  d    =    a    -    tol1    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  d  =  d  -  tol1  +  Math.abs(b);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  d  -  tol1  +  Math.abs(b);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  d  -  tol1  +  Math.abs(b);	  d    =    b    -    tol1    +    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
19	[BUG]  [BUGGY]  int  iter  =  Math.abs(d  -  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  iter  =  Math.abs(d  -  tol1);  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  iter  =  Math.abs(d  -  tol1);	  int    iter    =    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  double  iter  =  Math.abs(d);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  iter  =  Math.abs(d);  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  iter  =  Math.abs(d);	  int    iter    =    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  int  d  =  Math.min(m,  tol1,  d);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.min(m,  tol1,  d);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.min(m,  tol1,  d);	  int    d    =    Math.min(m,    tol1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
22	[BUG]  [BUGGY]  double  d  =  Math.min(m,  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.min(m,  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.min(m,  tol1);	  int    d    =    Math.min(m,    tol1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  int  d  =  Math.abs(FastMath.abs(x)-  tol1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.abs(FastMath.abs(x)-  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.abs(FastMath.abs(x)-  tol1);	  int    d    =    Math.abs(FastMath.abs(d)-    tol1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  double  d  =  Math.abs(FastMath.abs(d)-  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.abs(FastMath.abs(d)-  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.abs(FastMath.abs(d)-  tol1);	  int    d    =    Math.abs(FastMath.abs(d)-    tol1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  d  =  a  -  tol2  +  Math.abs(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  a  -  tol2  +  Math.abs(x);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  a  -  tol2  +  Math.abs(x);	  d    =    a    -    tol1    +    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  d  =  a  -  tol1  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  a  -  tol1  +  2;  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  a  -  tol1  +  2;	  d    =    a    -    tol1    +    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  d  =  tol1  -  tol2  +  Math.abs(d);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  tol1  -  tol2  +  Math.abs(d);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  tol1  -  tol2  +  Math.abs(d);	  d    =    a    -    tol2    +    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  int  d  =  Math.abs(FastMath.abs(d)/  tol1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.abs(FastMath.abs(d)/  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.abs(FastMath.abs(d)/  tol1);	  int    d    =    Math.abs(FastMath.abs(d)-    tol1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
29	[BUG]  [BUGGY]  int  iter  =  Math.abs(tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  iter  =  Math.abs(tol1);  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  iter  =  Math.abs(tol1);	  int    iter    =    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  double  d  =  Math.abs(fastMath.abs(d)/  tol1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  double  d  =  Math.abs(fastMath.abs(d)/  tol1);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	double  d  =  Math.abs(fastMath.abs(d)/  tol1);	  double    d    =    Math.abs(fastMath.abs(d)-    tol1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
31	[BUG]  [BUGGY]  d  =  a  -  tol1  +  Math.abs(b);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  a  -  tol1  +  Math.abs(b);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  a  -  tol1  +  Math.abs(b);	  d    =    b    -    tol1    +    Math.abs(d);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
32	[BUG]  [BUGGY]  if(false)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(false)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(false)  {	  if(x    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  float  d  =  Math.abs(FastMath.abs(d));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  float  d  =  Math.abs(FastMath.abs(d));  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	float  d  =  Math.abs(FastMath.abs(d));	  int    d    =    Math.abs(FastMath.abs(d));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  if(d  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(d  ==  0)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  ==  0)  {	  if(d    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  int  d  =  Math.min(tol1,  m);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  int  d  =  Math.min(tol1,  m);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	int  d  =  Math.min(tol1,  m);	  int    d    =    Math.min(m,    tol1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  e  =  a  -  tol1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  e  =  a  -  tol1  +  1;  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	e  =  a  -  tol1  +  1;	  e    =    a    -    tol1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  d  =  b  -  tol1  +  Math.abs(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  d  =  b  -  tol1  +  Math.abs(x);  [BUGGY]      if  (d  >=  0)  {  u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	d  =  b  -  tol1  +  Math.abs(x);	  d    =    a    -    tol1    +    Math.abs(x);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  if(d  >  e)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (x  <  m)  {  e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {      [BUGGY]  if(d  >  e)  {  [BUGGY]      u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.35355339059327373	210	210	1	replace	if(d  >  e)  {	  if(d    >    1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
