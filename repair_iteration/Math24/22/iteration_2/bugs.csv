bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  checker.getOptimizer(),  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.getOptimizer(),  relativeThreshold;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.getOptimizer(),  relativeThreshold;	  return    checker.getOptimizer();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  absoluteThreshold  =  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  absoluteThreshold;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  absoluteThreshold;	      if(relativeThreshold!=    absoluteThreshold)    {    absoluteThreshold    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.max(relativeThreshold,  rel);	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    else    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold;  absoluteThreshold  =  abs;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold;  absoluteThreshold  =  abs;  }  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold;  absoluteThreshold  =  abs;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold.doubleValue();  absoluteThreshold  =  abs;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold.doubleValue();  absoluteThreshold  =  abs;  }  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	if(rel  >  absoluteThreshold)  {  double  abs  =  relativeThreshold.doubleValue();  absoluteThreshold  =  abs;  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  absoluteThreshold  =  absoluteThreshold  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  absoluteThreshold  +  1;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  absoluteThreshold  +  1;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  absoluteThreshold  =  abs  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  abs  +  1;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  abs  +  1;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
11	[BUG]  [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.min(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.min(relativeThreshold,  rel);	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    absoluteThreshold    =    Math.min(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >=  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold);  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.evaluate(rel,  absoluteThreshold);	  return    checker.evaluate(relativeThreshold,    absoluteThreshold);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold,  abs);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.evaluate(rel,  absoluteThreshold,  abs);  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.evaluate(rel,  absoluteThreshold,  abs);	  return    checker.evaluate(relativeThreshold,    absoluteThreshold);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  return  checker.nextToken()  -  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.nextToken()  -  relativeThreshold;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.nextToken()  -  relativeThreshold;	  return    checker.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  RelativeThreshold  rel  =  Math.abs(relativeThreshold);  absoluteThreshold  =  rel;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  RelativeThreshold  rel  =  Math.abs(relativeThreshold);  absoluteThreshold  =  rel;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	RelativeThreshold  rel  =  Math.abs(relativeThreshold);  absoluteThreshold  =  rel;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  false);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);  absoluteThreshold  =  checker.doubleValue();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);  absoluteThreshold  =  checker.doubleValue();  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);  absoluteThreshold  =  checker.doubleValue();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	RelativePointValuePair  checker  =  getOptionalPointValuePair(rel);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  return  checker.nextToken()  +  absoluteThreshold;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.nextToken()  +  absoluteThreshold;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.nextToken()  +  absoluteThreshold;	  return    checker.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.min(relativeThreshold,  rel);  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.min(relativeThreshold,  rel);	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    else    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  RelativeThreshold  rel  =  relativeThreshold.getRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  RelativeThreshold  rel  =  relativeThreshold.getRelativeThreshold();  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	RelativeThreshold  rel  =  relativeThreshold.getRelativeThreshold();	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  RelativeThreshold  rel  =  absoluteThreshold.getRelativeThreshold();  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  RelativeThreshold  rel  =  absoluteThreshold.getRelativeThreshold();  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	RelativeThreshold  rel  =  absoluteThreshold.getRelativeThreshold();	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
26	[BUG]  [BUGGY]  return  checker.getValuePair();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.getValuePair();  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.getValuePair();	  return    checker.getOptimizer();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  absoluteThreshold  =  abs;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  abs;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  abs;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  absoluteThreshold  =  relativeThreshold  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  relativeThreshold  +  1;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  relativeThreshold  +  1;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  absoluteThreshold);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    absoluteThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.max(relativeThreshold,  rel);  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  }	      if(rel    <    relativeThreshold)    {    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    absoluteThreshold    =    Math.max(relativeThreshold,    rel);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  absoluteThreshold  =  relativeThreshold;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  relativeThreshold;  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  relativeThreshold;	      if(relativeThreshold!=    absoluteThreshold)    {    absoluteThreshold    =    absoluteThreshold;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  GOLDEN_SECTION)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold,  true);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold,    true);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
34	[BUG]  [BUGGY]  return  checker.evaluate(relativeThreshold,  rel);  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.evaluate(relativeThreshold,  rel);  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.evaluate(relativeThreshold,  rel);	  return    checker.evaluate(relativeThreshold,    absoluteThreshold);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.abs(relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.abs(relativeThreshold);  }  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.abs(relativeThreshold);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.min(relativeThreshold,  rel);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.min(relativeThreshold,  rel);  }  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	if(rel  >  absoluteThreshold)  {  absoluteThreshold  =  Math.max(relativeThreshold,  rel);  relativeThreshold  =  Math.min(relativeThreshold,  rel);  }	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
37	[BUG]  [BUGGY]  double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs  +  1;  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	double  abs  =  Math.abs(relativeThreshold);  absoluteThreshold  =  abs  +  1;	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
38	[BUG]  [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold);  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  absoluteThreshold  =  Math.abs(relativeThreshold);  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	absoluteThreshold  =  Math.abs(relativeThreshold);	  if(rel    >    absoluteThreshold)    {    double    abs    =    Math.abs(relativeThreshold);    absoluteThreshold    =    abs    +    1;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }  [BUGGY]    }  [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	rel  <  =  absoluteThreshold)  {  if(rel  >  GOLDEN_SECTION)  {  throw  new  NumberIsTooSmallException(rel,  relativeThreshold);  }	      if(rel    <    =    GOLDEN_SECTION)    {    if(rel    >    GOLDEN_SECTION)    {    throw    new    NumberIsTooSmallException(rel,    relativeThreshold);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  return  checker.relativeThreshold();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (rel  <  MIN_RELATIVE_TOLERANCE)  {  throw  new  NumberIsTooSmallException(rel,  MIN_RELATIVE_TOLERANCE,  true);  }  if  (abs  <=  0)  {  throw  new  NotStrictlyPositiveException(abs);  }  relativeThreshold  =  rel;  absoluteThreshold  =  abs;    [BUGGY]  return  checker.relativeThreshold();  [BUGGY]      [CLASS]  BrentOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  double  rel  double  abs  UnivariatePointValuePair>  checker  [VARIABLES]  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  abs  absoluteThreshold  rel  relativeThreshold  ConvergenceChecker  checker  boolean  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.3333333333333333	86	86	1	replace	return  checker.relativeThreshold();	  return    checker.getOptimizer();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
