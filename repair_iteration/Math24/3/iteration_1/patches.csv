bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  d  =  Math.min(x,  tol1);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  d  =  Math.min(x,  tol1);  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	d  =  Math.min(x,  tol1);	      d    =    Math.min(tol1,    tol2);    	non-compiled	[CE]  ';'  expected	7	None	replace
2	[BUG]  [BUGGY]  e  =  b  -  tol2;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  e  =  b  -  tol2;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	e  =  b  -  tol2;	      e    =    a    -    tol2;    	non-compiled	[CE]  ';'  expected	2	None	replace
3	[BUG]  [BUGGY]  u  =  a  +  d;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  u  =  a  +  d;  [BUGGY]    }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	u  =  a  +  d;	  u    =    a    +    tol1;    	non-compiled	[CE]  ';'  expected	8	None	replace
4	[BUG]  [BUGGY]  e  =  b  -  tol1;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  e  =  b  -  tol1;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	e  =  b  -  tol1;	      e    =    a    -    tol1;    	non-compiled	[CE]  not  a  statement	1	None	replace
5	[BUG]  [BUGGY]  e  =  a  -  x;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  e  =  a  -  x;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	e  =  a  -  x;	      e    =    a    -    tol1;    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  b  =  a  -  tol2;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  b  =  a  -  tol2;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	b  =  a  -  tol2;	      b    =    a    -    tol1;    	non-compiled	[CE]  not  a  statement	6	None	replace
7	[BUG]  [BUGGY]  d  =  Math.abs(d  -  tol1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  d  =  Math.abs(d  -  tol1);  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	d  =  Math.abs(d  -  tol1);	      d    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	3	None	replace
8	[BUG]  [BUGGY]  d  =  Math.abs(tol1);  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  d  =  Math.abs(tol1);  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	d  =  Math.abs(tol1);	      d    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	3	None	replace
9	[BUG]  [BUGGY]  b  =  a  -  x;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  b  =  a  -  x;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	b  =  a  -  x;	      b    =    a    -    tol1;    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  d  =  Math.abs(d  +  tol1);  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  d  =  Math.abs(d  +  tol1);  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	d  =  Math.abs(d  +  tol1);	      d    =    Math.abs(d);    	non-compiled	[CE]  not  a  statement	3	None	replace
11	[BUG]  [BUGGY]  d  =  Math.min(tol1,  tol1);  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  d  =  Math.min(tol1,  tol1);  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	d  =  Math.min(tol1,  tol1);	      d    =    Math.min(tol1,    tol2);    	non-compiled	[CE]  not  a  statement	7	None	replace
12	[BUG]  [BUGGY]  u  =  a  +  tol2;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  u  =  a  +  tol2;  [BUGGY]    }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	u  =  a  +  tol2;	  u    =    x    +    tol2;    	non-compiled	[CE]  not  a  statement	5	None	replace
13	[BUG]  [BUGGY]  b  =  a  -  tol1  +  1;  [CE]  'else'  without  'if'  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  b  =  a  -  tol1  +  1;  [BUGGY]    u  =  x  +  tol1;  }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	b  =  a  -  tol1  +  1;	      b    =    a    -    tol1;    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
14	[BUG]  [BUGGY]  u  =  tol1  +  d;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    e  =  b  -  x;  }  else  {  e  =  a  -  x;  }  d  =  GOLDEN_SECTION  *  e;  }  if  (FastMath.abs(d)  <  tol1)  {  if  (d  >=  0)  {    [BUGGY]  u  =  tol1  +  d;  [BUGGY]    }  else  {  u  =  x  -  tol1;  }  }  else  {  u  =  x  +  d;  }  double  fu  =  computeObjectiveValue(u);  if  (!isMinim)  {  fu  =  -fu;  [CLASS]  BrentOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  UnivariatePointValuePair  [VARIABLES]  ConvergenceChecker  checker  UnivariatePointValuePair  current  previous  boolean  isMinim  stop  double  GOLDEN_SECTION  MIN_RELATIVE_TOLERANCE  a  abs  absoluteThreshold  b  d  e  fu  fv  fw  fx  hi  lo  m  mid  p  q  r  rel  relativeThreshold  tol1  tol2  u  v  w  x  int  iter  	projects/Math24/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java	0.4472135954999579	211	211	1	replace	u  =  tol1  +  d;	  u    =    x    +    d;    	non-compiled	[CE]  ';'  expected	4	None	replace
