projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(4);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashSet<String,ObjectType>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{thrownewIllegalArgumentException("");}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Maps.<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(3);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(5);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(8);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String,ObjectType>properties=newLinkedList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(4);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{thrownewIllegalArgumentException("");}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName);properties.putAll(properties);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.cloneTree());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newFunctionNode(false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkNotNull(functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String,ObjectType>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeVariants());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getFirstChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(isFunctionDeclaration()){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(6);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String>properties=newLinkedHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collections.<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Maps.<String,ObjectType>properties;
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Maps.<String,ObjectType>properties=newTreeMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Maps.<String,ObjectType>properties=newHashMap<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE)+1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE)||getNativeType(UNKNOWN_TYPE));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),getFunctionPrivateName());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newLinkedList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalCollection<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newArrayList<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,t.getModule());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()!=Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,t.getSourceName());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658AnnotatedMap.Entry<String,ObjectType>properties=newAnnotatedMap.Entry<String,ObjectType>(t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getLastChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getFirstChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getLastChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t.getLastChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String,ObjectType>properties=newArrayList<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(4);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newTreeSet<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n.getChildCount());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n.cloneTree());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,type);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(isFunctionDeclaration());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>,ObjectType>properties=newConstructors.HashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>,ObjectType>properties=newConstructorMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658parent.visitFunction(t,n,functionPrivateName,properties);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>,ObjectType>properties=newConstructor<?>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newTreeMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newTreeSet<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newTreeSet<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String,ObjectType>properties=newArrayList<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Traversal.traverse(compiler,n,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.traverse(compiler,n,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,null,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ConstructorTraversal.traverse(compiler,n,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkArgument(n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>t=n.getConstructor();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,event);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658parent.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION||n.getType()==Token.EXPR_RESULT){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION||n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()!=Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||n.getType()==Token.EXPR_RESULT);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION,t.getModule());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||n.getType()==Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName);properties.putAll(
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivate
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,newTypeVariants());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeVariants(),null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeVariants(),functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeFunctions());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeVariants(),t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finallyQualifiedName==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,function
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658parent.visitFunction(t,n,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n==null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ConstructorTraversal.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newTypeCheck(),null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newTypeCheck(),functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Traversal.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newFunctionNode(true));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newFunctionNode(true));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Traversal.traverse(compiler,n,newFunctionNode(true));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.traverse(compiler,n,newFunctionNode(false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor.traverse(compiler,n,newFunctionNode(false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,event);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,functionType);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,true);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n,functionPrivateName,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n,this.functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkNotNull(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(functionPrivateName!=null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(functionPrivateName==null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String,ObjectType>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashSet<String,ObjectType>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalLinkedHashSet<String,ObjectType>properties=newLinkedHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map.Entry<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,type);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,condition);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);}else{thrownewIllegalArgumentException("");}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(7);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalList<String,ObjectType>properties=newArrayList<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkNotNull(properties);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<K,V>n=getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashSet<String,ObjectType>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()!=Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.EXPR_RESULT);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalNodeTraversal.traverse(compiler,n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalNodeTraversal.traverse(compiler,n,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalNodeTraversal.traverse(compiler,n.getType());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName),t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName,functionType));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName),this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName,null));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName,false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName,true));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName),false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n.getType()==Token.NAME);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n.getType()==Token.NAME);finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(n.getType()==Token.NAME);finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount()-1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount()+1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount()-2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.size());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount()*2);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t.cloneTree());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getClass());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getParent());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getLocalName());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getName());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION||n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivate
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(5);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658staticfinalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(4);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658staticfinalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658staticfinalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n==null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Maps.<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getLastChild().getString();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=functionPrivateName==null?0:functionPrivateName.getExtendedInterfaces();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getString();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),false);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),true);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashSet<String,ObjectType>properties=newHashSet<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalinttype=n.getType();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getType();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintn=n.getType();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||NodeUtil.isFunctionDeclaration(n));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION&&NodeUtil.isFunctionDeclaration(n));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newPreconditions());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,functionPrivateName,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,functionPrivate);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newClass<?>());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n!=null){Map<String,ObjectType>properties=newHashMap<String,ObjectType>(n);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(n.cloneTree());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String>properties=newHashSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=functionPrivateName!=null?0:functionPrivateName.getExtendedInterfaces();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=functionPrivateName==null?0:functionPrivateName.getLocalName();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=functionPrivateName==null?0:functionPrivateName.getParent();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkNotNull(functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,this,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,this,newFunctionNodeTraversal());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getTypePrivateName();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalLinkedHashMap<String,ObjectType>properties=newLinkedHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658staticfinalMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,true);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t.getFirstChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,null,newFunctionNode(false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newFunctionNode());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String,ObjectType>properties=newHashSet<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658staticfinalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.cloneTree());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n,functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(functionPrivateName.getType()==Token.FUNCTION);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.GETPROP);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.clone());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getSource());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658&&n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION||n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Collection<String,ObjectType>properties=newArrayList<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalSet<String,ObjectType>properties=newHashSet<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,scope);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(t);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,t,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,null,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658FunctionNodeTraversal.traverse(compiler,n,newPreconditions());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getType();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(3);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getChildCount());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(functionPrivateName!=null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkNotNull(functionPrivateName,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getLastChild();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalstaticHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalNodeTraversal.traverse(compiler,this).traverse(n,newTypeCheck());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=getFunctionDeclaration();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName),null);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(functionPrivateName),true);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newArrayList<String,ObjectType>(8);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),context);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeCheck(),scope);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658||n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName,properties
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION||n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashMap<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Map<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getJSDocInfo());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>t=ConstructorUtil.getFunctionDeclaration(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME&&n.getFirstChild()!=null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME||n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME&&n.getChildCount()>1){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME&&n.getString().equals("function")){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME||n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658LinkedHashMap<String,ObjectType>properties=newLinkedHashMap<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashSet<String,ObjectType>properties=newHashSet<String,ObjectType>(0);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getNext().getString();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getType().getName();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalintfunctionPrivateName=n.getFirstChild().getNext().getType();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME,t.getMessage());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.NAME||n.getType()==Token.VAR);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(functionPrivateName,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeChecks());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeAnnotations());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,this,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Traversal.traverse(compiler,n,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,newTypeDesc());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n!=null){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}else{checkInterfaceConflictProperties(t,n,functionPrivateName
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.VAR){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>();}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658ArrayList<String,ObjectType>properties=newTreeSet<String,ObjectType>();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.removeFirstChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);}else{thrownewIllegalArgumentException("");}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(1);}else{thrownewIllegalArgumentException("");}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n.size());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n.type);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashSet<String,ObjectType>(n.getFirstChild());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658List<String,ObjectType>properties=newArrayList<String,ObjectType>(n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658finalNode<?>n=n.getFirstChild();
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658n.setJSType(getNativeType(UNKNOWN_TYPE),getNativeType(UNKNOWN_TYPE));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Set<String,ObjectType>properties=newHashMap<String,ObjectType>(1);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||n.getType()==Token.VAR);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkArgument(n.getType()==Token.FUNCTION||n.getType()==Token.CATCH);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(4);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(4);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,this);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658NodeTraversal.traverse(compiler,n,null,type);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Traversal.traverse(compiler,n,newFunctionNode(false));
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.VAR);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Preconditions.checkState(n.getType()==Token.FUNCTION||n.getType()==Token.CATCH);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Constructor<?>t=getCurrentScope().getNativeObjectType(UNKNOWN_TYPE);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658Context.checkState(false,"Unknowntype");
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(n.getLocalPart());
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.FUNCTION){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(2);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(n.getType()==Token.NAME){finalHashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(2);}
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t,n);
projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java1658if(t!=null){HashMap<String,ObjectType>properties=newHashMap<String,ObjectType>(t);}
