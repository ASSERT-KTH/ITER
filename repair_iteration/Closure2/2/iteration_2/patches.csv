bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyNames());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyNames());	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
2	[BUG]  [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
3	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  }	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
4	[BUG]  [BUGGY]  currentPropertyNames  =  n.getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  n.getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  n.getOwnerPropertyNames();	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
5	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames();	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
6	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getOwnerPropertyNames();	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
7	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
8	[BUG]  [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
9	[BUG]  [BUGGY]  properties  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  properties  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	properties  =  getImplicitPrototype().getOwnPropertyNames();	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
10	[BUG]  [BUGGY]  properties.put(name,  getImplicitPrototype().getOwnPropertyNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  properties.put(name,  getImplicitPrototype().getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	properties.put(name,  getImplicitPrototype().getOwnPropertyNames());	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
11	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
12	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(propertyName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(propertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(propertyName);	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
13	[BUG]  [BUGGY]  currentPropertyNames  =  properties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.getOwnPropertyNames();	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
14	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
15	[BUG]  [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(properties!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
16	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(propertyName).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(propertyName).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(propertyName).getOwnPropertyNames();	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
17	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(propertyName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(propertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(propertyName);	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
18	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  }  else  {  return;  }	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
19	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  properties.get(currentProperties.getOwnPropertyNames());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  properties.get(currentProperties.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  properties.get(currentProperties.getOwnPropertyNames());	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
20	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  properties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  properties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  properties.getOwnPropertyNames();	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
21	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  Collections.EMPTY_LIST;	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
22	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getNativePropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getNativePropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.getNativePropertyNames();	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
23	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(properties);	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
24	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(false);	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  currentProperties);	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  properties);	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeChecker());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeChecker());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeChecker());	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecker(),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
29	[BUG]  [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  TypeChecker());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  TypeChecker());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ConstructorTraversal.traverse(compiler,  n,  new  TypeChecker());	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
30	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(n).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	11	None	replace
31	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(n).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	11	None	replace
32	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(n).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	11	None	replace
33	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(n).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	11	None	replace
34	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
35	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
36	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  null);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
37	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
38	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  null);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
39	[BUG]  [BUGGY]  ObjectType  implicitProto  =  currentProperties.get(implicitProto).getImplicitPrototype();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  currentProperties.get(implicitProto).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  currentProperties.get(implicitProto).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
40	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(functionName).getImplicitPrototype();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(functionName).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(functionName).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
41	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(compiler).getImplicitPrototype();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(compiler).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(compiler).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
42	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(i).getImplicitPrototype();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(i).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(i).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
43	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(0).getImplicitPrototype();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(0).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(0).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
44	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(name).getImplicitPrototype();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(name).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(name).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
45	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  name);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  name);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
46	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
47	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  this);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  this);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  this);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
48	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
49	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames(),  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.getOwnPropertyNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
50	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  parent);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  parent);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  parent);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
51	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyName()));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyName()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyName()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyName()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
53	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getPropertyName()));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getPropertyName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getPropertyName()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
54	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()  +  1));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()  +  1));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()  +  1));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
55	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReturnType()));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReturnType()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getReturnType()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
56	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  implicitProto.getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
57	[BUG]  [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  currentPropertyNames  =  implicitProto.getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
58	[BUG]  [BUGGY]  Context.checkNotNull(currentPropertyNames);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(currentPropertyNames);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkNotNull(currentPropertyNames);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
59	[BUG]  [BUGGY]  Context.checkState(implicitProto!=  null);  currentPropertyNames  =  implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(implicitProto!=  null);  currentPropertyNames  =  implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(implicitProto!=  null);  currentPropertyNames  =  implicitProto.getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
60	[BUG]  [BUGGY]  CurrentPropertyNames  implicitProto  =  implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  implicitProto  =  implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  implicitProto  =  implicitProto.getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
61	[BUG]  [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
62	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
63	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
64	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
65	[BUG]  [BUGGY]  properties  =  getImplicitPrototype().getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  properties  =  getImplicitPrototype().getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	properties  =  getImplicitPrototype().getOwnPropertyNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
66	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
67	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties,  interfaceType);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  currentProperties));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  currentProperties));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  currentProperties));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  this));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  this));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  this));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  existingProperties));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  existingProperties));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  existingProperties));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  null));  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  null));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  null));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  event));  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  event));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  event));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  type));  [CE]  orphaned  case  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  type));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  type));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
74	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
75	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyNames());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyNames());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
76	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
77	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getConstructor());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getConstructor());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getConstructor());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
78	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyNames());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
79	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReturnType());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReturnType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReturnType());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
80	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  true);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  true);	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  properties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  properties);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  propertyName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  propertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  propertyName);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
87	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getFirstChild());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getFirstChild());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getFirstChild());	  currentPropertyNames    =    properties.get(n.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	32	None	replace
88	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getImmediateParentNode());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getImmediateParentNode());	  currentPropertyNames    =    properties.get(n.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	32	None	replace
89	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getImplicitPropertyName());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getImplicitPropertyName());	  currentPropertyNames    =    properties.get(n.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	32	None	replace
90	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  null);	  currentPropertyNames    =    properties.get(n.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	32	None	replace
91	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
92	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
93	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getProperties();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getProperties();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getProperties();	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
94	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
95	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getProperties(properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getProperties(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getProperties(properties);	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
96	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
97	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
98	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
99	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  new  ObjectType[this.implicitProto.getOwnPropertyNames()  ];  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  new  ObjectType[this.implicitProto.getOwnPropertyNames()  ];  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  new  ObjectType[this.implicitProto.getOwnPropertyNames()  ];  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
100	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
101	[BUG]  [BUGGY]  this.implicitProto  =  currentProperties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  this.implicitProto  =  currentProperties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	this.implicitProto  =  currentProperties.getOwnPropertyNames();	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
102	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getConstructor()));  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getConstructor()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getConstructor()));	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
103	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
104	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getConstructor());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getConstructor());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getConstructor());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
105	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPrototype());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPrototype());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPrototype());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
106	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReturnType());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReturnType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReturnType());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
107	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  true);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
108	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
109	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  true);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
110	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.getImplicitPropertyName());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.getImplicitPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
111	[BUG]  [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto.getImplicitPropertyName());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto.getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  currentProperties.get(implicitProto.getImplicitPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
112	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  +  1);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  +  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  +  1);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
113	[BUG]  [BUGGY]  if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
114	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.properties.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.properties.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.properties.getOwnPropertyNames());	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
115	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  this.properties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  this.properties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  this.properties.getOwnPropertyNames();	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
116	[BUG]  [BUGGY]  currentPropertyNames  =  this.properties.getPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  this.properties.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  this.properties.getPropertyNames();	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
117	[BUG]  [BUGGY]  if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.properties!=  null)  {  currentPropertyNames  =  this.properties.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
118	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
119	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnPropertyName();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnPropertyName();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getOwnPropertyName();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
120	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
121	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getConstructor().getOwnPropertyNames();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
122	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnPropertyName(name);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getOwnPropertyName(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getOwnPropertyName(name);	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.currentProperties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this.currentProperties);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  properties);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  existingProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  existingProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  existingProperties);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  false);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  false);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  propertyNames);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  propertyNames);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  propertyNames);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
128	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
129	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
130	[BUG]  [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
131	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " "));  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
132	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
133	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
134	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
135	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  true);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyNames(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
136	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  true);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
137	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReturnType(),  true);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReturnType(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReturnType(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
138	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	13	None	replace
139	[BUG]  [BUGGY]  Context.checkState(getImplicitPrototype()!=  null);  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(getImplicitPrototype()!=  null);  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(getImplicitPrototype()!=  null);  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	13	None	replace
140	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(name.getOwnPropertyName());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(name.getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(name.getOwnPropertyName());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
141	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(n.getOwnPropertyName());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
142	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getLastChild());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getLastChild());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getLastChild());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
143	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getLocalName());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getLocalName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getLocalName());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
144	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  null);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  null);	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
145	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
146	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  true);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  true);	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
147	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
148	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  this.interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  this.interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames(),  this.interfaceType);	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
149	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyName());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyName());	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
150	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyName());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyName());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
151	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getReturnType());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getReturnType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getReturnType());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
152	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentNode());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentNode());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
153	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getReferenceName());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getReferenceName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getReferenceName());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
154	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getSimpleName());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getSimpleName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getSimpleName());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
155	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getPropertyName());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
156	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getPropertyName());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
157	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
158	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(compiler.getPropertyName());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(compiler.getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(compiler.getPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
159	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyName());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
160	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(name.getPropertyName());  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(name.getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(name.getPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
161	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
162	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
163	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
164	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames(properties);	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
165	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getPropertyNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getPropertyNames());	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
166	[BUG]  [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.implicitProto!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
167	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
168	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getPropertyName());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getPropertyName());	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
169	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  name);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  name);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
170	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implementationProto);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implementationProto);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implementationProto);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
171	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implicitProto);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implicitProto);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  implicitProto);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
172	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
173	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
174	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    currentProperties);    	non-compiled	[CE]  orphaned  case	27	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  exception);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  exception);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  exception);	  NodeTraversal.traverse(compiler,    n,    currentProperties);    	non-compiled	[CE]  orphaned  case	27	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  null);	  NodeTraversal.traverse(compiler,    n,    currentProperties);    	non-compiled	[CE]  orphaned  case	27	None	replace
178	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
179	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties.toString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
180	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  baseUri,  interfaceType.toString());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  baseUri,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  baseUri,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeVisibleProperties());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeVisibleProperties());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  new  TypeVisibleProperties());	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  currentProperties);	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVisibleProperties());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVisibleProperties());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeVisibleProperties());	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  properties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVisibleProperties(),  properties);	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  typeFactory,  new  TypeVisibleProperties());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  typeFactory,  new  TypeVisibleProperties());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  typeFactory,  new  TypeVisibleProperties());	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
186	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
187	[BUG]  [BUGGY]  Context.checkState(implicitProto!=  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(implicitProto!=  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(implicitProto!=  null);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
188	[BUG]  [BUGGY]  Context.checkState(currentPropertyNames!=  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentPropertyNames!=  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(currentPropertyNames!=  null);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
189	[BUG]  [BUGGY]  Context.checkState(currentPropertyNames  ==  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentPropertyNames  ==  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(currentPropertyNames  ==  null);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
190	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyNames()));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyNames()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(n.getOwnPropertyNames()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
191	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyNames()));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyNames()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getImplicitPropertyNames()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
192	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  null));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  null));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames(),  null));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
193	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
194	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
195	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString(),  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString(),  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  interfaceType.toString(),  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
196	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString()));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
197	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
198	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  null;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
199	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
200	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
201	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getPropertyNames()  :  null;  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getPropertyNames()  :  null;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getPropertyNames()  :  null;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
202	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
203	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
204	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  false);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
205	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  true);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyName(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
206	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  true);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
207	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  null,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
208	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  currentProperties.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
209	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  currentProperties,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
210	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
211	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  interfaceType.toString());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  scope,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
212	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
213	[BUG]  [BUGGY]  Context.checkState(getImplicitPrototype()!=  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(getImplicitPrototype()!=  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(getImplicitPrototype()!=  null);	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype(),  new  Runnable());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype(),  new  Runnable());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  getImplicitPrototype(),  new  Runnable());	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
215	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
216	[BUG]  [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.implicitProto!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
217	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
218	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
219	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
220	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();	  ObjectType    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	10	None	replace
221	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();	  ObjectType    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	10	None	replace
222	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();	  ObjectType    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	10	None	replace
223	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();	  ObjectType    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	10	None	replace
224	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
225	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
226	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
227	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
228	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype().getOwnPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype().getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  getImplicitPrototype().getOwnPropertyNames());	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
230	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getPropertyNames();	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
231	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(properties);	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
232	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getReturnType().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getReturnType().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getReturnType().getOwnPropertyNames();	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
233	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(false);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(false);	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
234	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
235	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
236	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
237	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReturnType();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReturnType();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReturnType();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
238	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getProperties();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getProperties();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getProperties();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
239	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
240	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  true);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
241	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  false);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
242	[BUG]  [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto.getImmediateParentNode());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  currentProperties.get(implicitProto.getImmediateParentNode());	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
243	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(n.getImmediateParentNode());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(n.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(n.getImmediateParentNode());	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
244	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    null);    	non-compiled	[CE]  orphaned  case	3	None	replace
245	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  this);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  this);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  this);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    null);    	non-compiled	[CE]  orphaned  case	3	None	replace
246	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    null);    	non-compiled	[CE]  orphaned  case	3	None	replace
247	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
248	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
249	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
250	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getImplicitPropertyNames());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getImplicitPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getImplicitPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
251	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyNames());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getImplicitPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
252	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
253	[BUG]  [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(properties!=  null)  {  currentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(properties).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	8	None	replace
254	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getPropertyNames());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
255	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(compiler.getPropertyNames());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(compiler.getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(compiler.getPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
256	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
257	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getPropertyNames());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
258	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
259	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
260	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyName(properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyName(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertyName(properties);	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
261	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
262	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertyNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
263	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyName(name);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyName(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertyName(name);	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
264	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(name);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(name);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
265	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(this.implicitProto);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(this.implicitProto);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
266	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.interfaceType);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
267	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto)+  1;  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto)+  1;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto)+  1;	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
268	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto,  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto,  null);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
269	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
270	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(name);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(name);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
271	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(currentPropertyName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(currentPropertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(currentPropertyName);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
272	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName  +  1);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName  +  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(functionName  +  1);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
273	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName,  true);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName,  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(functionName,  true);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
274	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(properties.size());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(properties.size());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(properties.size());	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
275	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(properties);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(properties);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
276	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getOwnPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getOwnPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
277	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.getOwnPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
278	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  +  1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  +  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  +  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
279	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  *  1);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  *  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  *  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
280	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
281	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
282	[BUG]  [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(properties!=  null)  {  currentPropertyNames  =  properties.get(0).getPropertyNames();  }	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
283	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(0).getPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(0).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(0).getPropertyNames();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
284	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getPropertyName();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getPropertyName();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getPropertyName();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
285	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getPropertyName(name);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getPropertyName(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getPropertyName(name);	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
286	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getPropertyNames();  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(0).getPropertyNames();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
287	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
288	[BUG]  [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(properties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(properties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
289	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
290	[BUG]  [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
291	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  null;  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  null;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  null;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
292	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
293	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
294	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto  ==  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
295	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
296	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getConstructors();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getConstructors();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getConstructors();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	18	None	replace
297	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
298	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(0);  }	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
299	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(n);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
300	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.size()  -  1);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.size()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.size()  -  1);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
301	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
302	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
303	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
304	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(n);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(n);	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
305	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
306	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getType()  -  1);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getType()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getType()  -  1);	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
307	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getFirstChild().getType());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getFirstChild().getType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getFirstChild().getType());	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
308	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getString());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getString());	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
309	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getType(),  null);	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
310	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getType());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n.getType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(n.getType());	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
311	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  name);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getType(),  name);	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
312	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  true);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getType(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getType(),  true);	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  currentProperties);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  properties);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  propertyName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  propertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  propertyName);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
318	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitProto().getPropertyNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  getImplicitProto().getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  getImplicitProto().getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
319	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
320	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n).getPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n).getPropertyNames();	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
321	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
322	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  currentProperties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  currentProperties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  currentProperties.getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
323	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(n.getOwnPropertyNames());	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
324	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  n.getPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
325	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getConstructor().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getConstructor().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  n.getConstructor().getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
326	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	67	None	replace
327	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	67	None	replace
328	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyName());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(compiler.getOwnPropertyName());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	67	None	replace
329	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  null);	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	67	None	replace
330	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
331	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
332	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
333	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
334	[BUG]  [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(getImplicitPrototype()!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
335	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(n);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getReferenceNames(n);	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
336	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getReturnType();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getReturnType();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getReturnType();	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
337	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getConstructor().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getConstructor().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getConstructor().getOwnPropertyNames();	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
338	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(properties);	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
339	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(name);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyName(name);	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
340	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  null);	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	4	None	replace
341	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
342	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceName()));  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceName()));	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
343	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getReferenceName());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getReferenceName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getReferenceName());	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
344	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  +  1);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  +  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  +  1);	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
345	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
346	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(name).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(name).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
347	[BUG]  [BUGGY]  Constructor  <?>  currentPropertyNames  =  properties.get(implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentPropertyNames  =  properties.get(implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <?>  currentPropertyNames  =  properties.get(implicitProto).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
348	[BUG]  [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  currentProperties.get(implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  currentProperties.get(implicitProto).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
349	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(properties).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(properties).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
350	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(0).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(0).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
351	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
352	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
353	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  return;  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  InterfaceConflictProperties());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  InterfaceConflictProperties());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  InterfaceConflictProperties());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class  <?>());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class  <?>());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class  <?>());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
357	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
358	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getParent());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getParent());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getParent());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
359	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
360	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getUnknownPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getUnknownPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getUnknownPropertyNames();  }	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
361	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
362	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
363	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties).getOrphanedPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties).getOrphanedPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties).getOrphanedPropertyNames();	  currentPropertyNames    =    properties.get(properties).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	8	None	replace
364	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(getImplicitPrototype().getPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(getImplicitPrototype().getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(getImplicitPrototype().getPropertyNames());	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
365	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype().getPropertyNames());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype().getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  getImplicitPrototype().getPropertyNames());	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
367	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getLowerCase());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getLowerCase());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getLowerCase());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
368	[BUG]  [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());  }	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
369	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getReferenceName());    	non-compiled	[CE]  orphaned  case	48	None	replace
370	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(propertyNames);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(propertyNames);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(propertyNames);	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
371	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.getOwnPropertyNames());	  currentPropertyNames    =    propertyNames.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	52	None	replace
372	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
373	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  -  1);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
374	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
375	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    null);    	non-compiled	[CE]  orphaned  case	34	None	replace
376	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getPropertyNames());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(interfaceType.getPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
377	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
378	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceNames());	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  type);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
380	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(1).getOwnPropertyNames());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(1).getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(1).getOwnPropertyNames());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
381	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getType());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getType());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
382	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getNodeType());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getNodeType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getNodeType());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
383	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getRawClass());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getRawClass());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getRawClass());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
384	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n  +  1);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n  +  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n  +  1);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
385	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(functionName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(functionName);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
386	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
387	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n  -  1);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n  -  1);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
388	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
389	[BUG]  [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames());  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
390	[BUG]  [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
391	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  implicitProto  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  implicitProto  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  implicitProto  =  getImplicitPrototype().getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
392	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
393	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
394	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  }  else  {  return;  }	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
395	[BUG]  [BUGGY]  CurrentPropertyNames  currentProperties  =  currentProperties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentProperties  =  currentProperties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentProperties  =  currentProperties.getOwnPropertyNames();	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
396	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getObjectType();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getObjectType();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.getObjectType();	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
397	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(functionName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.getOwnPropertyNames(functionName);	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
398	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
399	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(interfaceType!=  null)  {  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  interfaceType);  }	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
400	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interface);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interface);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interface);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
401	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getParent());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getParent());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getParent());	  currentPropertyNames    =    properties.get(n.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	32	None	replace
402	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getPropertyNames();  }	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
403	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getReferenceName());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	67	None	replace
404	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
405	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(this.implicitProto);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(this.implicitProto);	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
406	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
407	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
408	[BUG]  [BUGGY]  Context.report(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.report(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.report(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
409	[BUG]  [BUGGY]  Context.report(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.report(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.report(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
410	[BUG]  [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
411	[BUG]  [BUGGY]  Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
412	[BUG]  [BUGGY]  Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Context.checkState(implicitProto!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
413	[BUG]  [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE));	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
414	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(i).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
415	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(0).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
416	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(i).getOrphanedPropertyNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(i).getOrphanedPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(i).getOrphanedPropertyNames();	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
417	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  true);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getOwnPropertyName(),  true);	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	4	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
420	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyNames(),  interfaceType);	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
421	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
422	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
423	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(this.implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	73	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  interfaceType));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  interfaceType));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  interfaceType));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeChangeEvent(this));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeChangeEvent(this));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  TypeChangeEvent(this));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
426	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
427	[BUG]  [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(this.implicitProto!=  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
428	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.properties.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  this.properties.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  this.properties.getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
429	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
430	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  Collections.EMPTY_LIST;	  CurrentPropertyNames    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	40	None	replace
431	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getReferenceNames();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	18	None	replace
432	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  -  1));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  -  1));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  -  1));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
433	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  +  1));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  +  1));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()  +  1));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
434	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceNames()));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceNames()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getReferenceNames()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
435	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  propertyNames.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  propertyNames.getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
436	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getOwnPropertyNames(properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  n.getOwnPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  n.getOwnPropertyNames(properties);	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
437	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  n.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  n.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  n.getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
438	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeChecker());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeChecker());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeChecker());	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassChecker());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassChecker());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassChecker());	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
441	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getPropertyName());    	non-compiled	[CE]  orphaned  case	24	None	replace
442	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
443	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype(),  currentPropertyNames);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  getImplicitPrototype(),  currentPropertyNames);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  getImplicitPrototype(),  currentPropertyNames);	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	13	None	replace
445	[BUG]  [BUGGY]  n  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  n  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	n  =  getImplicitPrototype().getOwnPropertyNames();	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	13	None	replace
446	[BUG]  [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype().getOwnPropertyNames();	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	13	None	replace
447	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  this.implicitProto;  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  this.implicitProto;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  this.implicitProto;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
448	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
449	[BUG]  [BUGGY]  if(n!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(n!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
450	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  n.getPropertyNames();  }  else  {  return;  }	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
451	[BUG]  [BUGGY]  currentPropertyNames  =  n.getPropertyNames(properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  n.getPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  n.getPropertyNames(properties);	  currentPropertyNames    =    n.getPropertyNames();    	non-compiled	[CE]  orphaned  case	20	None	replace
452	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
453	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getReferenceNames();	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
454	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getNativePropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getNativePropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getNativePropertyNames();	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
455	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(functionName,  null);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
456	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName  -  1);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(functionName  -  1);	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
457	[BUG]  [BUGGY]  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(n);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(n);	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
458	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyName());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnerPropertyName());	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
459	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  properties;  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  properties;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  properties;	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
460	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  true);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceNames(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
461	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getNativePropertyNames(),  true);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getNativePropertyNames(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getNativePropertyNames(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
462	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getNodeType(),  true);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getNodeType(),  true);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getNodeType(),  true);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
463	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  null,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
464	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
465	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  NullPointerException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  NullPointerException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  NullPointerException( " ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
466	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getType()));  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(n.getType()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(n.getType()));	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
467	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  properties.get(n).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(n).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	11	None	replace
468	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.properties.getOwnPropertyName());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.properties.getOwnPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.properties.getOwnPropertyName());	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
469	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
470	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(getImplicitPrototype().getOwnPropertyNames());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(getImplicitPrototype().getOwnPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(getImplicitPrototype().getOwnPropertyNames());	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
471	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(n);	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassVisibleProperties());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassVisibleProperties());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassVisibleProperties());	  NodeTraversal.traverse(compiler,    n,    new    TypeVisibleProperties());    	non-compiled	[CE]  orphaned  case	71	None	replace
473	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getRawClass()));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getRawClass()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getRawClass()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
474	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getInitialValue()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getInitialValue()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getInitialValue()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
475	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getParent();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getParent();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getParent();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
476	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getNodeType();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getNodeType();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getNodeType();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
477	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getReferenceNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getReferenceNames();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
478	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getImplicitPropertyName();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getImplicitPropertyName();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getImplicitPropertyName();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
479	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  aughtExceptionHandler.handleMissingName(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	aughtExceptionHandler.handleMissingName(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
480	[BUG]  [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName));	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
481	[BUG]  [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE))  {  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE))  {  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	aught(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE))  {	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
482	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
483	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
484	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertyNames(n);	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
485	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getPropertyNames();  }  else  {  return;  }	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
486	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(interfaceType).getImplicitPrototype();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(interfaceType).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(interfaceType).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
487	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(actualPropertyNames).getImplicitPrototype();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(actualPropertyNames).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(actualPropertyNames).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
488	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
489	[BUG]  [BUGGY]  CurrentPropertyNames  oType  =  getImplicitPrototype().getProperties();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  oType  =  getImplicitPrototype().getProperties();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  oType  =  getImplicitPrototype().getProperties();	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
490	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
491	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getProperties();  }  else  {  return;  }	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
492	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.size()  -  1).getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.size()  -  1).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.size()  -  1).getPropertyNames();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
493	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(i).getPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(i).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(i).getPropertyNames();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
494	[BUG]  [BUGGY]  t.makeError(n,  NON_OBJECT_TYPE,  functionName,  interfaceType.toString());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  NON_OBJECT_TYPE,  functionName,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  NON_OBJECT_TYPE,  functionName,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
495	[BUG]  [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
496	[BUG]  [BUGGY]  t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  interfaceType.toString());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
497	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames()  -  1);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
498	[BUG]  [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
499	[BUG]  [BUGGY]  ObjectType  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  interfaceType  =  properties.get(implicitProto).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
500	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(currentProperties);	  currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames(properties);    	non-compiled	[CE]  orphaned  case	45	None	replace
501	[BUG]  [BUGGY]  Constructor  <  ObjectType>  currentProperties  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  currentProperties  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  currentProperties  =  getImplicitPrototype().getOwnPropertyNames();	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  this).traverse(properties);	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
503	[BUG]  [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	Constructor  <  ObjectType>  interfaceType  =  getImplicitPrototype();	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
504	[BUG]  [BUGGY]  t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  UNKNOWN_EXPR_TYPE,  functionName,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
505	[BUG]  [BUGGY]  t.makeError(n,  null,  functionName,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  null,  functionName,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  null,  functionName,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
506	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  properties,  null);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  properties,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  properties,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
507	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
508	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
509	[BUG]  [BUGGY]  n  =  this.implicitProto.getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  n  =  this.implicitProto.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	n  =  this.implicitProto.getOwnPropertyNames();	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
510	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getName());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getName());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	4	None	replace
511	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentPointer());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentPointer());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getImmediateParentPointer());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	4	None	replace
512	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
513	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
514	[BUG]  [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName)?  properties.get(functionName):  null;  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentProperties  =  properties.get(functionName)?  properties.get(functionName):  null;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentProperties  =  properties.get(functionName)?  properties.get(functionName):  null;	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
515	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(t,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(t,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(t,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
516	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  compiler.report(t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
517	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentProperties!=  null)  {  ObjectType  currentProperties  =  properties.get(functionName);  }  else  {  throw  new  IllegalStateException( " ");  }	  ObjectType    currentProperties    =    properties.get(functionName);    	non-compiled	[CE]  orphaned  case	72	None	replace
518	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyNames());    	non-compiled	[CE]  orphaned  case	65	None	replace
519	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  properties));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  properties));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this,  properties));	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this),  t);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this),  t);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChangeEvent(this),  t);	  NodeTraversal.traverse(compiler,    n,    new    TypeChangeEvent(this));    	non-compiled	[CE]  orphaned  case	31	None	replace
521	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getDeclaredPropertyNames());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(0).getDeclaredPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(0).getDeclaredPropertyNames());	  currentPropertyNames    =    properties.get(properties.get(0).getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	33	None	replace
522	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getOwnPropertyName(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
523	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(n);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
524	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(name);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(name);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(name);	  currentPropertyNames    =    properties.get(n);    	non-compiled	[CE]  orphaned  case	44	None	replace
525	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerProperties();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerProperties();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnerProperties();	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
526	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getProperties();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getProperties();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getProperties();	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
527	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getProperties(null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getProperties(null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getProperties(null);	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
528	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertiesWithType(PROPERTY);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertiesWithType(PROPERTY);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertiesWithType(PROPERTY);	  currentPropertyNames    =    getImplicitPrototype().getProperties();    	non-compiled	[CE]  orphaned  case	64	None	replace
529	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
530	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(getImplicitPrototype()!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
531	[BUG]  [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames();	  CurrentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	63	None	replace
532	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames());	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
533	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames()  -  1);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
534	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  -  1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getReferenceName()  -  1);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames()    -    1);    	non-compiled	[CE]  orphaned  case	59	None	replace
535	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
536	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
537	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
538	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(this.implicitProto);  }  else  {  return;  }	  currentPropertyNames    =    properties.get(this.implicitProto);    	non-compiled	[CE]  orphaned  case	74	None	replace
539	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getReferenceNames(null);	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
540	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getReferenceNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getReferenceNames(properties);	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
541	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().findPropertyName(functionName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().findPropertyName(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().findPropertyName(functionName);	  currentPropertyNames    =    getImplicitPrototype().getReferenceNames();    	non-compiled	[CE]  orphaned  case	47	None	replace
542	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);	  currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	15	None	replace
543	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNames(null);	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
544	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNamesWithBase(properties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNamesWithBase(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getPropertyNamesWithBase(properties);	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getPropertyNames();    	non-compiled	[CE]  orphaned  case	46	None	replace
545	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  existingProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  existingProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  this,  existingProperties);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	26	None	replace
546	[BUG]  [BUGGY]  ObjectType  implicitProto  =  properties.get(properties).getImplicitPrototype();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  implicitProto  =  properties.get(properties).getImplicitPrototype();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  implicitProto  =  properties.get(properties).getImplicitPrototype();	  ObjectType    implicitProto    =    properties.get(implicitProto).getImplicitPrototype();    	non-compiled	[CE]  orphaned  case	69	None	replace
547	[BUG]  [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  getImplicitPrototype().getOwnerPropertyNames(null);	  currentPropertyNames    =    getImplicitPrototype().getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	62	None	replace
548	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(functionName).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
549	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
550	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(i).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(i).getOwnPropertyNames();	  CurrentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	68	None	replace
551	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
552	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(name).getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  currentPropertyNames    =    properties.get(name).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	7	None	replace
553	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto).getPropertyNames();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto).getPropertyNames();	  currentPropertyNames    =    this.implicitProto.getPropertyNames();    	non-compiled	[CE]  orphaned  case	21	None	replace
554	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(implicitProto.getImplicitPropertyName());	  currentPropertyNames    =    properties.get(implicitProto.getImplicitPropertyName());    	non-compiled	[CE]  orphaned  case	2	None	replace
555	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getReferenceName();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getReferenceName();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getReferenceName();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
556	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getImmediateParentPointer();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getImmediateParentPointer();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getImmediateParentPointer();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
557	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getImmediateParentNode();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getImmediateParentNode();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getImmediateParentNode();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
558	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(0).getAssignedPropertyNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(0).getAssignedPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(0).getAssignedPropertyNames();	  currentPropertyNames    =    properties.get(0).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	9	None	replace
559	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  null);	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
560	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getPropertyNames(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getPropertyNames());    	non-compiled	[CE]  orphaned  case	60	None	replace
561	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
562	[BUG]  [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	28	None	replace
563	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto).getOwnerPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto).getOwnerPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto).getOwnerPropertyNames();	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
564	[BUG]  [BUGGY]  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  this.implicitProto.getOwnerPropertyNames(properties);	  currentPropertyNames    =    this.implicitProto.getOwnerPropertyNames();    	non-compiled	[CE]  orphaned  case	75	None	replace
565	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyName()));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyName()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
566	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyName()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyName()));    	non-compiled	[CE]  orphaned  case	6	None	replace
567	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getImmediateParentNode());  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.implicitProto.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.implicitProto.getImmediateParentNode());	  currentPropertyNames    =    properties.get(this.implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	38	None	replace
568	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(functionName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames(functionName);	  ObjectType    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	16	None	replace
569	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	39	None	replace
570	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(this.properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(this.properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(this.properties);	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
571	[BUG]  [BUGGY]  currentPropertyNames  =  this.properties.get(properties.size()  -  1);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  this.properties.get(properties.size()  -  1);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  this.properties.get(properties.size()  -  1);	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
572	[BUG]  [BUGGY]  currentPropertyNames  =  this.properties.get(functionName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  this.properties.get(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  this.properties.get(functionName);	  currentPropertyNames    =    this.properties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	56	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  existingProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  existingProperties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  existingProperties);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	25	None	replace
574	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
575	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  return;  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
576	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
577	[BUG]  [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(functionName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(functionName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null  &&  implicitProto.hasProperty(functionName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	23	None	replace
578	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
579	[BUG]  [BUGGY]  if(implicitProto!=  null  &&  implicitProto.isConstructor())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null  &&  implicitProto.isConstructor())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null  &&  implicitProto.isConstructor())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	22	None	replace
580	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  null;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
581	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  null;  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  null;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnerPropertyNames()  :  null;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    null;    	non-compiled	[CE]  orphaned  case	54	None	replace
582	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =  this.implicitProto.getOwnPropertyNames();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
583	[BUG]  [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames!=  null)  {  currentPropertyNames  =  properties.get(this.implicitProto.getOwnPropertyNames());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(this.implicitProto!=    null)    {    currentPropertyNames    =    this.implicitProto.getOwnPropertyNames();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	41	None	replace
584	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnPropertyNames()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
585	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyNames()));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyNames()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties.get(implicitProto.getOwnerPropertyNames()));	  currentPropertyNames    =    properties.get(properties.get(implicitProto.getOwnPropertyNames()));    	non-compiled	[CE]  orphaned  case	37	None	replace
586	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getRawClass());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getRawClass());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getRawClass());	  ObjectType    currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames());    	non-compiled	[CE]  orphaned  case	35	None	replace
587	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(compiler).getOwnPropertyNames();	  CurrentPropertyNames    currentPropertyNames    =    properties.get(implicitProto).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	57	None	replace
588	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(interfaceType.getOwnPropertyName(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
589	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getConstructor(),  interfaceType);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyName(),    interfaceType);    	non-compiled	[CE]  orphaned  case	50	None	replace
590	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  properties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  properties);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  currentPropertyNames,  properties);	  NodeTraversal.traverse(compiler,    n,    currentPropertyNames);    	non-compiled	[CE]  orphaned  case	58	None	replace
591	[BUG]  [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(currentPropertyNames  ==  null)  {  currentPropertyNames  =(this.implicitProto!=  null)?  this.implicitProto.getOwnPropertyNames()  :  properties;  }	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
592	[BUG]  [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  properties;  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  properties;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =(this.implicitProto!=  null)?  properties.getOwnPropertyNames()  :  properties;	  currentPropertyNames    =(this.implicitProto!=    null)?    this.implicitProto.getOwnPropertyNames()    :    properties;    	non-compiled	[CE]  orphaned  case	55	None	replace
593	[BUG]  [BUGGY]  t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
594	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString(),  interfaceType.toString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString(),  interfaceType.toString());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType.toString(),  interfaceType.toString());	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    interfaceType.toString());    	non-compiled	[CE]  orphaned  case	51	None	replace
595	[BUG]  [BUGGY]  if(implicitProto!=  null  &&  implicitProto.isInterface())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null  &&  implicitProto.isInterface())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null  &&  implicitProto.isInterface())  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
596	[BUG]  [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(propertyName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(propertyName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null  &&  implicitProto.hasProperty(propertyName))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
597	[BUG]  [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(name))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(implicitProto!=  null  &&  implicitProto.hasProperty(name))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	if(implicitProto!=  null  &&  implicitProto.hasProperty(name))  {  currentPropertyNames  =  implicitProto.getPropertyNames();  }	  if(implicitProto!=    null)    {    currentPropertyNames    =    implicitProto.getPropertyNames();    }    	non-compiled	[CE]  orphaned  case	19	None	replace
598	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getJSType());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getJSType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getJSType());	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
599	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(name.getType());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(name.getType());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(name.getType());	  currentPropertyNames    =    properties.get(n.getType());    	non-compiled	[CE]  orphaned  case	43	None	replace
600	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties).getReferenceNames();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties).getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties).getReferenceNames();	  currentPropertyNames    =    properties.get(properties).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	8	None	replace
601	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(properties).getOrphanPropertyNames();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(properties).getOrphanPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(properties).getOrphanPropertyNames();	  currentPropertyNames    =    properties.get(properties).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	8	None	replace
602	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getName());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getName());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getName());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
603	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getRawClass());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getRawClass());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getRawClass());	  currentPropertyNames    =    properties.get(implicitProto.getConstructor());    	non-compiled	[CE]  orphaned  case	49	None	replace
604	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  properties.get(n);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  properties.get(n);	  CurrentPropertyNames    currentPropertyNames    =    n.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	53	None	replace
605	[BUG]  [BUGGY]  RecentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  RecentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	RecentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getOwnPropertyNames();	  if(currentPropertyNames!=    null)    {    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    }    	non-compiled	[CE]  orphaned  case	14	None	replace
606	[BUG]  [BUGGY]  t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(t,  n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
607	[BUG]  [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
608	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType);	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null);    	non-compiled	[CE]  orphaned  case	29	None	replace
609	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames(),  false);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames(),  false);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getOwnerPropertyNames(),  false);	  currentPropertyNames    =    properties.get(implicitProto.getOwnPropertyNames(),    true);    	non-compiled	[CE]  orphaned  case	36	None	replace
610	[BUG]  [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getRawClass();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getRawClass();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  currentPropertyNames  =  getImplicitPrototype().getRawClass();	  CurrentPropertyNames    currentPropertyNames    =    getImplicitPrototype().getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	18	None	replace
611	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(i).getReferenceNames();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(i).getReferenceNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(i).getReferenceNames();	  currentPropertyNames    =    properties.get(i).getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	12	None	replace
612	[BUG]  [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	ObjectType  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode());	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
613	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  propertyName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  propertyName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(implicitProto.getImmediateParentNode(),  propertyName);	  currentPropertyNames    =    properties.get(implicitProto.getImmediateParentNode());    	non-compiled	[CE]  orphaned  case	66	None	replace
614	[BUG]  [BUGGY]  currentPropertyNames  =  properties.get(n.getJSDocInfo());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  currentPropertyNames  =  properties.get(n.getJSDocInfo());  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	currentPropertyNames  =  properties.get(n.getJSDocInfo());	  currentPropertyNames    =    properties.get(n.getOwnPropertyName());    	non-compiled	[CE]  orphaned  case	1	None	replace
615	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties.get(functionName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties.get(functionName);  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties.get(functionName);	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
616	[BUG]  [BUGGY]  CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  n;  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  n;  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  n  =  currentProperties!=  null?  currentProperties.getOwnPropertyNames()  :  n;	  CurrentPropertyNames    n    =    currentProperties.getOwnPropertyNames();    	non-compiled	[CE]  orphaned  case	42	None	replace
617	[BUG]  [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  interfaceType,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
618	[BUG]  [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  NON_GLOBAL_EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
619	[BUG]  [BUGGY]  t.makeError(n,  EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  t.makeError(n,  EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	t.makeError(n,  EXTENDED_PROPERTY_TYPE,  functionName,  null,  interfaceType.toString()));	  t.makeError(n,    INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,    functionName,    null,    interfaceType.toString()));    	non-compiled	[CE]  orphaned  case	30	None	replace
620	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(0));  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecker(0));  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecker(0));	  NodeTraversal.traverse(compiler,    n,    new    TypeChecker());    	non-compiled	[CE]  orphaned  case	70	None	replace
621	[BUG]  [BUGGY]  CurrentPropertyNames  =  properties.get(0).getPropertyNames();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CurrentPropertyNames  =  properties.get(0).getPropertyNames();  [BUGGY]      for  (String  name  :  currentPropertyNames)  {  ObjectType  oType  =  properties.get(name);  if  (oType  !=  null)  {  if  (!interfaceType.getPropertyType(name).isEquivalentTo(  oType.getPropertyType(name)))  {  compiler.report(  t.makeError(n,  INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,  functionName,  name,  oType.toString(),  interfaceType.toString()));  }  [CLASS]  TypeCheck  [METHOD]  checkInterfaceConflictProperties  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  String  functionName  ObjectType>  properties  ObjectType>  currentProperties  ObjectType  interfaceType  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1574	1574	1	replace	CurrentPropertyNames  =  properties.get(0).getPropertyNames();	  currentPropertyNames    =    properties.get(0).getPropertyNames();    	non-compiled	[CE]  orphaned  case	61	None	replace
