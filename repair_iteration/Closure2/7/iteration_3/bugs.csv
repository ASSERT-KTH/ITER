bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
3	[BUG]  [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
6	[BUG]  [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
7	[BUG]  [BUGGY]  checkNotNull(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkNotNull(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	157	None	replace
8	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkNotNull(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	157	None	replace
9	[BUG]  [BUGGY]  checkNotNull(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkNotNull(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	157	None	replace
10	[BUG]  [BUGGY]  checkNotNull(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkNotNull(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	157	None	replace
11	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
12	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
13	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
14	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
15	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
16	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
17	[BUG]  [BUGGY]  Parchet.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
18	[BUG]  [BUGGY]  Parchet.checkNotNull(n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(n);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
19	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  n.getType();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  n.getType();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  n.getType();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
20	[BUG]  [BUGGY]  safeName.setAssign(n.getType());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssign(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssign(n.getType());	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
21	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	25	None	replace
22	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	25	None	replace
23	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentType);	  checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	25	None	replace
24	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
25	[BUG]  [BUGGY]  checkDeclaration(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
26	[BUG]  [BUGGY]  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  this.functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
27	[BUG]  [BUGGY]  checkState(n,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
28	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
29	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
30	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
31	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
32	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
33	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  return;  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  return;  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  return;	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
34	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
38	[BUG]  [BUGGY]  checkState(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
39	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
40	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
41	[BUG]  [BUGGY]  checkPermission(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
42	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
43	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
44	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  properties,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
45	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
46	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
47	[BUG]  [BUGGY]  checkState(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
48	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
49	[BUG]  [BUGGY]  checkArgument(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
50	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
51	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  status);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  status);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  status);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
52	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  status,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  status,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  status,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
53	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
54	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  status,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  status,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  status,  properties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
55	[BUG]  [BUGGY]  Context.checkState(n,  status,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  status,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  status,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeCheck(),  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeCheck(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  new  TypeCheck(),  interfaceType);	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
57	[BUG]  [BUGGY]  Constructor.traverse(compiler,  t,  new  TypeCheck());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor.traverse(compiler,  t,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor.traverse(compiler,  t,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
59	[BUG]  [BUGGY]  ConstructorTraversal.traverse(compiler,  t,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ConstructorTraversal.traverse(compiler,  t,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ConstructorTraversal.traverse(compiler,  t,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
60	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Traversal.traverse(compiler,  n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
61	[BUG]  [BUGGY]  Parchet.checkState(this.null  ==  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(this.null  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(this.null  ==  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
62	[BUG]  [BUGGY]  Parchet.checkState(this.null!=  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(this.null!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(this.null!=  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
63	[BUG]  [BUGGY]  Parchet.checkState(t,  n  ==  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(t,  n  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(t,  n  ==  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
64	[BUG]  [BUGGY]  Parchet.checkState(currentProperties  ==  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(currentProperties  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(currentProperties  ==  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
65	[BUG]  [BUGGY]  Parchet.checkState(currentProperties!=  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(currentProperties!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(currentProperties!=  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  interfaceType);	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  null);	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  interfaceType,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  interfaceType,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  interfaceType,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  null,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
71	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
72	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
73	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentType,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentType,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentType,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
74	[BUG]  [BUGGY]  parseFunctionName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
75	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
76	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
77	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
78	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
79	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
80	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
81	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
82	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
83	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentStructure();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentStructure();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentStructure();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
84	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getFunctionProperties();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getFunctionProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getFunctionProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
85	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getNativeType(UNKNOWN_TYPE);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getNativeType(UNKNOWN_TYPE);	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
86	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getSupportedProperties();  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getSupportedProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getSupportedProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
87	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperties(interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperties(interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperties(interfaceType);	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
88	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getImplicitProperties();  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getImplicitProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getImplicitProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
89	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
90	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
91	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(t.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(t.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
92	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
93	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
94	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
95	[BUG]  [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
96	[BUG]  [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
97	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
98	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  functionPrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
99	[BUG]  [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
100	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentType);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
101	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
102	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
103	[BUG]  [BUGGY]  testFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  testFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
104	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
105	[BUG]  [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
106	[BUG]  [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)&&  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)&&  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)&&  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
107	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
108	[BUG]  [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssignmentOp(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
109	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
110	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
111	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
112	[BUG]  [BUGGY]  parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  interfaceType);	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeVariants());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeVariants());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeVariants());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeVariants());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeVariants());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  new  TypeVariants());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeVariants());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeVariants());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  TypeVariants());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
118	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
119	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
120	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
121	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
122	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
123	[BUG]  [BUGGY]  checkDeclaration(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  null,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
124	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
125	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
126	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  functionPrivateName);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
127	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
128	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
129	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
130	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
131	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
132	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
133	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalArgumentException( " ");	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
134	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
135	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
136	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
137	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
138	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
139	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
140	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()!=  Token.FUNCTION);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
141	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
142	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
143	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
144	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
145	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
146	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
147	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
148	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
149	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
150	[BUG]  [BUGGY]  Parchet.checkState(this.functionPrivateName!=  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(this.functionPrivateName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(this.functionPrivateName!=  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
151	[BUG]  [BUGGY]  Parchet.checkState(interfaceType!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(interfaceType!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(interfaceType!=  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
152	[BUG]  [BUGGY]  Parchet.checkState(functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(functionPrivateName  ==  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
153	[BUG]  [BUGGY]  Parchet.checkState(null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
154	[BUG]  [BUGGY]  Parchet.checkState(interfaceType  ==  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(interfaceType  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(interfaceType  ==  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
155	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
156	[BUG]  [BUGGY]  checkPermission(t,  n,  1,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
157	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
158	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfacePrivateName,  functionType);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
159	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getType()  ==  Token.FUNCTION);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
160	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
161	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
163	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
164	[BUG]  [BUGGY]  checkState(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
165	[BUG]  [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
166	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
167	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
168	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
169	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
170	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
171	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
172	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
173	[BUG]  [BUGGY]  checkNotFound(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
174	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
175	[BUG]  [BUGGY]  Context.checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
176	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
177	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
178	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
179	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
180	[BUG]  [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
181	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionType);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
182	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
183	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
184	[BUG]  [BUGGY]  Parchet.checkState(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
185	[BUG]  [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
186	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
187	[BUG]  [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
188	[BUG]  [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ConstructorVisitor.checkArgument(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
189	[BUG]  [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ConstructorVisitor.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
190	[BUG]  [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
191	[BUG]  [BUGGY]  checkArgument(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
192	[BUG]  [BUGGY]  validateArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  validateArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	validateArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
193	[BUG]  [BUGGY]  parseArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
194	[BUG]  [BUGGY]  testArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
195	[BUG]  [BUGGY]  testArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionType);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	47	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	47	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  this);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	47	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	47	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  type);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	47	None	replace
201	[BUG]  [BUGGY]  testArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
202	[BUG]  [BUGGY]  parseArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  parseArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
203	[BUG]  [BUGGY]  checkArgument(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
204	[BUG]  [BUGGY]  checkArgument(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
205	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
206	[BUG]  [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
207	[BUG]  [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
208	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
209	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
210	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
211	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
212	[BUG]  [BUGGY]  checkState(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
213	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
214	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this.interfaceType);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  n,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.interface);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.interface);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this.interface);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_ERROR "));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_ERROR "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_ERROR "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Property "));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Property "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Property "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_TYPE "));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_TYPE "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "JSC_INTERFACE_TYPE "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
225	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
226	[BUG]  [BUGGY]  checkDeclaration(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
227	[BUG]  [BUGGY]  checkDeclaration(t,  n,  this.nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  this.nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  this.nameNode,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
228	[BUG]  [BUGGY]  checkDeclaration(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
229	[BUG]  [BUGGY]  tate(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  tate(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	tate(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
230	[BUG]  [BUGGY]  State  state  =  n.getState();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  State  state  =  n.getState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	State  state  =  n.getState();	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
231	[BUG]  [BUGGY]  state.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  state.getType()  ==  Token.FUNCTION;  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	state.getType()  ==  Token.FUNCTION;	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
232	[BUG]  [BUGGY]  safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
233	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
234	[BUG]  [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
235	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
236	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
237	[BUG]  [BUGGY]  safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
238	[BUG]  [BUGGY]  safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
239	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
240	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
241	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
242	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
243	[BUG]  [BUGGY]  testState(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
244	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkState(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
245	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
246	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
247	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivate);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
248	[BUG]  [BUGGY]  parseFunctionType(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionType(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionType(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
249	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
250	[BUG]  [BUGGY]  checkState(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
251	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
252	[BUG]  [BUGGY]  verifyInterfaceType(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceType(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceType(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
253	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
254	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivate);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivate);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
255	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
256	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
257	[BUG]  [BUGGY]  safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
258	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
259	[BUG]  [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
260	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  null);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  null);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  null);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
261	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
262	[BUG]  [BUGGY]  testArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
263	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
264	[BUG]  [BUGGY]  verifyArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
265	[BUG]  [BUGGY]  parseArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  parseArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
266	[BUG]  [BUGGY]  validateArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  validateArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	validateArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
267	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
268	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
269	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
270	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
271	[BUG]  [BUGGY]  checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
272	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.NAME);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.NAME);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.NAME);  }	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
273	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
274	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
275	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
276	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
277	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
278	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
279	[BUG]  [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
280	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
281	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
282	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
283	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
284	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
285	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
286	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
287	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
288	[BUG]  [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceName!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	132	None	replace
289	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	132	None	replace
290	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	132	None	replace
291	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	132	None	replace
292	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
293	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentType,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
294	[BUG]  [BUGGY]  testState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
295	[BUG]  [BUGGY]  parseStatement(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseStatement(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseStatement(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
296	[BUG]  [BUGGY]  Context.checkState(n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
297	[BUG]  [BUGGY]  testFunction(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  testFunction(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunction(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
298	[BUG]  [BUGGY]  checkState(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
299	[BUG]  [BUGGY]  checkState(n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
300	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
301	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
302	[BUG]  [BUGGY]  parseFunctionDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
303	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  functionPrivateName,  properties,  currentType,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
304	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	183	None	replace
305	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	183	None	replace
306	[BUG]  [BUGGY]  testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	183	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
308	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
309	[BUG]  [BUGGY]  if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
310	[BUG]  [BUGGY]  if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
311	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
312	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
313	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
314	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
315	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
316	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
317	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
318	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  type,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
319	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
320	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
321	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
322	[BUG]  [BUGGY]  checkInterface(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  parent,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
323	[BUG]  [BUGGY]  checkInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  null);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  orphaned  case	50	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  interfaceType);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  orphaned  case	50	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  type);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  type);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  orphaned  case	50	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  t);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  t);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  orphaned  case	50	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  null);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  null);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  orphaned  case	50	None	replace
329	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
330	[BUG]  [BUGGY]  safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  currentProperties))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
331	[BUG]  [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
332	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
333	[BUG]  [BUGGY]  safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getCode()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
334	[BUG]  [BUGGY]  safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getSourceName()))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
335	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
336	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
337	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
338	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
339	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
340	[BUG]  [BUGGY]  checkState(t,  n,  state.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getType()  ==  Token.FUNCTION);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
341	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  interfaceType);	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
342	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n,  n.getLastChild());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n,  n.getLastChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n,  n.getLastChild());	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
343	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  null);	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
344	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n,  n.getFirstChild());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n,  n.getFirstChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n,  n.getFirstChild());	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
345	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
346	[BUG]  [BUGGY]  checkState(t.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t.getType()  ==  Token.FUNCTION,  interfaceType);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
347	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
348	[BUG]  [BUGGY]  checkState(n.getType()!=  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(n.getType()!=  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n.getType()!=  Token.FUNCTION,  interfaceType);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
349	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
350	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION,  interfaceType);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
351	[BUG]  [BUGGY]  Context.checkNotNull(n);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(n);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
352	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  t.getConstructor();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  t.getConstructor();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  t.getConstructor();	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
353	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
354	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
355	[BUG]  [BUGGY]  safeName.setAssign(n.getType())  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssign(n.getType())  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssign(n.getType())  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
356	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
357	[BUG]  [BUGGY]  checkArgument(t,  n,  1L,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1L,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1L,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
358	[BUG]  [BUGGY]  checkPermission(t,  n,  2L,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  2L,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  2L,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
359	[BUG]  [BUGGY]  checkPermission(t,  n,  1L,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1L,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1L,  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
360	[BUG]  [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
361	[BUG]  [BUGGY]  checkPermission(t,  n,  2,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  2,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  2,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
362	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
363	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
364	[BUG]  [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
365	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
366	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
367	[BUG]  [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
368	[BUG]  [BUGGY]  ParchetState.checkArgument(functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(functionPrivateName  ==  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
369	[BUG]  [BUGGY]  ParchetState.checkArgument(interfaceType!=  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(interfaceType!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(interfaceType!=  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
370	[BUG]  [BUGGY]  ParchetState.checkArgument(this.functionPrivateName!=  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(this.functionPrivateName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(this.functionPrivateName!=  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
371	[BUG]  [BUGGY]  ParchetState.checkArgument(null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
372	[BUG]  [BUGGY]  ParchetState.checkArgument(currentProperties!=  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(currentProperties!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(currentProperties!=  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
373	[BUG]  [BUGGY]  ParchetState.checkArgument(interfaceType  ==  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(interfaceType  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(interfaceType  ==  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
374	[BUG]  [BUGGY]  ParchetState.checkNotNull(interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(interfaceType);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
375	[BUG]  [BUGGY]  ParchetState.checkNotNull(currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(currentProperties,  interfaceType);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
376	[BUG]  [BUGGY]  ParchetState.checkNotNull(interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(interfaceType,  currentProperties);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
377	[BUG]  [BUGGY]  ParchetState.checkNotNull(properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(properties);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
378	[BUG]  [BUGGY]  ParchetState.checkNotNull(interface);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(interface);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(interface);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
379	[BUG]  [BUGGY]  ParchetState.checkNotNull(n);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(n);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
380	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
381	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  type);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  type);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
382	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
383	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  typeFunctionType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  typeFunctionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  typeFunctionType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
384	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
385	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
386	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
387	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
388	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
389	[BUG]  [BUGGY]  testFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  testFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
390	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  currentProperties,  interfaceType);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
391	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
392	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
393	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
394	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  interfaceType,  properties,  currentProperties,  currentType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
395	[BUG]  [BUGGY]  checkArgument(t,  n  ==  null,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n  ==  null,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n  ==  null,  currentType,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
396	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
397	[BUG]  [BUGGY]  testArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
398	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  properties,  currentType,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
399	[BUG]  [BUGGY]  checkArgument(t,  n  ==  null,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n  ==  null,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n  ==  null,  interfaceType,  properties,  currentProperties,  currentType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
400	[BUG]  [BUGGY]  checkState(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
401	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
402	[BUG]  [BUGGY]  parseFunctionDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
403	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
404	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
405	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
406	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
407	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
408	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
409	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
410	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
411	[BUG]  [BUGGY]  Parchet.checkNotNull(interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(interfaceType);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
412	[BUG]  [BUGGY]  Parchet.checkNotNull(interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(interfaceType,  currentProperties);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
413	[BUG]  [BUGGY]  Parchet.checkNotNull(currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(currentProperties,  interfaceType);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
414	[BUG]  [BUGGY]  Parchet.checkNotNull(interface);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(interface);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(interface);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
415	[BUG]  [BUGGY]  Context.checkState(this.functionPrivateName!=  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(this.functionPrivateName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(this.functionPrivateName!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
416	[BUG]  [BUGGY]  Context.checkState(functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(functionPrivateName  ==  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
417	[BUG]  [BUGGY]  Context.checkState(currentProperties!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentProperties!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(currentProperties!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
418	[BUG]  [BUGGY]  Context.checkState(interfaceType!=  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(interfaceType!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(interfaceType!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
419	[BUG]  [BUGGY]  Context.checkState(null!=  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(null!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(null!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
420	[BUG]  [BUGGY]  Context.checkState(this.functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(this.functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(this.functionPrivateName  ==  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
421	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
422	[BUG]  [BUGGY]  checkDeclaration(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
423	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
424	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
425	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
426	[BUG]  [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
427	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
428	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
429	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
430	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  nameNode);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  n,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  n,  interfaceType);	  NodeTraversal.traverse(compiler,    this,    n);    	non-compiled	[CE]  orphaned  case	51	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  null,  n);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  null,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  null,  n);	  NodeTraversal.traverse(compiler,    this,    n);    	non-compiled	[CE]  orphaned  case	51	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  n);	  NodeTraversal.traverse(compiler,    this,    n);    	non-compiled	[CE]  orphaned  case	51	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  n);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  t,  n);	  NodeTraversal.traverse(compiler,    this,    n);    	non-compiled	[CE]  orphaned  case	51	None	replace
435	[BUG]  [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
436	[BUG]  [BUGGY]  checkArgument(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
437	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
438	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
439	[BUG]  [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
440	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
441	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
442	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
443	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
444	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
445	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
446	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	54	None	replace
447	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);	  checkInterfaceName(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	54	None	replace
448	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	54	None	replace
449	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
450	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  interfaceType);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
451	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  functionPrivateName);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
452	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionName.getString(),  n);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionName.getString(),  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionName.getString(),  n);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
453	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  functionPrivateName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  functionPrivateName);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
454	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString());	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
455	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionType);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
456	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
457	[BUG]  [BUGGY]  checkState(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
458	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  properties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
459	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
460	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
461	[BUG]  [BUGGY]  ParchetState  state  =  getCurrentState();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getCurrentState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getCurrentState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
462	[BUG]  [BUGGY]  ParchetState  state  =  getState().getOwnState();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState().getOwnState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState().getOwnState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
463	[BUG]  [BUGGY]  ParchetState  state  =  getState().getOwnerState();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState().getOwnerState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState().getOwnerState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
464	[BUG]  [BUGGY]  ParchetState  state  =  getFunctionState();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getFunctionState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getFunctionState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
465	[BUG]  [BUGGY]  ParchetState  state  =  getState().getActualState();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState().getActualState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState().getActualState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
466	[BUG]  [BUGGY]  ParchetState  state  =  getState().getAndClearBuffer();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState().getAndClearBuffer();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState().getAndClearBuffer();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
467	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
468	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
469	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
470	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
471	[BUG]  [BUGGY]  Parchet.checkState(t,  n!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(t,  n!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(t,  n!=  null);	  Parchet.checkState(n!=    null);    	non-compiled	[CE]  orphaned  case	10	None	replace
472	[BUG]  [BUGGY]  Parchet.checkState(n  >=  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n  >=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n  >=  null);	  Parchet.checkState(n!=    null);    	non-compiled	[CE]  orphaned  case	10	None	replace
473	[BUG]  [BUGGY]  safeGetProp(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
474	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
475	[BUG]  [BUGGY]  safeAddProp(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeAddProp(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAddProp(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
476	[BUG]  [BUGGY]  safeGetProp(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
477	[BUG]  [BUGGY]  safeGetProp(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  interfaceType,  properties,  currentProperties);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
478	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
479	[BUG]  [BUGGY]  testArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
480	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
481	[BUG]  [BUGGY]  checkArgument(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  type,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
482	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
483	[BUG]  [BUGGY]  Parchetal.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchetal.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchetal.checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
484	[BUG]  [BUGGY]  ParchetUtil.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ParchetUtil.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetUtil.checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
485	[BUG]  [BUGGY]  Parchetal.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchetal.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchetal.checkState(n.getType()  ==  Token.FUNCTION);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
486	[BUG]  [BUGGY]  Parchet.checkState(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n.getType()!=  Token.FUNCTION);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
487	[BUG]  [BUGGY]  ParchetUtil.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetUtil.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetUtil.checkArgument(n.getType()!=  Token.FUNCTION);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
488	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfaceType,  properties);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
489	[BUG]  [BUGGY]  testArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
490	[BUG]  [BUGGY]  parseArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parseArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
491	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
492	[BUG]  [BUGGY]  verifyArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
493	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  name,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  name,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  name,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
494	[BUG]  [BUGGY]  safeInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
495	[BUG]  [BUGGY]  safeMultiply(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
496	[BUG]  [BUGGY]  safeMultiply(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  interfaceType,  properties,  currentProperties);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
497	[BUG]  [BUGGY]  safeMultiply(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
498	[BUG]  [BUGGY]  Context.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
499	[BUG]  [BUGGY]  Parchet.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
500	[BUG]  [BUGGY]  Context.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
501	[BUG]  [BUGGY]  Node  currentProperty  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Node  currentProperty  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Node  currentProperty  =  n.getFirstChild();	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
502	[BUG]  [BUGGY]  Context.checkArgument(n.getFirstChild().getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getFirstChild().getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getFirstChild().getType()!=  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
503	[BUG]  [BUGGY]  checkNotFound(t,  n,  1,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  1,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  1,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
504	[BUG]  [BUGGY]  tryFunction(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  tryFunction(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	tryFunction(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
505	[BUG]  [BUGGY]  checkNotFound(t,  n,  2,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  2,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  2,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
506	[BUG]  [BUGGY]  checkNotFound(t,  n,  1,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  1,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  1,  properties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
507	[BUG]  [BUGGY]  aughtException.from(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
508	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
509	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
510	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
511	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
512	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
513	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
514	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
515	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
516	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
517	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
518	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
519	[BUG]  [BUGGY]  parseFunctionName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
520	[BUG]  [BUGGY]  parseFunctionName(t,  n,  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  signature,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
521	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
522	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
523	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
524	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
525	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
526	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
527	[BUG]  [BUGGY]  checkState(true,  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(true,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(true,  null);	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
528	[BUG]  [BUGGY]  checkState(false,  interfaceType!=  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  interfaceType!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  interfaceType!=  null);	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
529	[BUG]  [BUGGY]  checkState(false,  interfaceType  ==  null);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  interfaceType  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  interfaceType  ==  null);	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
530	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkState(false,  null);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkState(false,  null);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkState(false,  null);  }	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
531	[BUG]  [BUGGY]  checkState(false,  null,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  null,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  null,  interfaceType);	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
532	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkState(false,  null);  }  else  {  properties.putAll(interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkState(false,  null);  }  else  {  properties.putAll(interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkState(false,  null);  }  else  {  properties.putAll(interfaceType);  }	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
533	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
534	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
535	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
536	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
537	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
538	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
539	[BUG]  [BUGGY]  Parchet.checkNotNull(currentProperties,  propertyName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(currentProperties,  propertyName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(currentProperties,  propertyName);	  Parchet.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	12	None	replace
540	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
541	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
542	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
543	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
544	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  this,  interfaceType);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
545	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  interfaceType);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  null);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
547	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  this,  null);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  getClass());  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  getClass());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  getClass());	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type);  [CE]  orphaned  case  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  this,  type);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
550	[BUG]  [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
551	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
552	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
553	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceType,  properties);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
554	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
555	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
556	[BUG]  [BUGGY]  checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
557	[BUG]  [BUGGY]  verifyInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
558	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
559	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
560	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
561	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
562	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
563	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
564	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
565	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
566	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getReturnType(),  properties,  currentProperties,  state);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getReturnType(),  properties,  currentProperties,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType.getReturnType(),  properties,  currentProperties,  state);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
567	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
568	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
569	[BUG]  [BUGGY]  CheckState.checkState(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()!=  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
570	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
571	[BUG]  [BUGGY]  State.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  State.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	State.checkState(n.getType()  ==  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
572	[BUG]  [BUGGY]  CheckState.checkState(t.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(t.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(t.getType()  ==  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
573	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
574	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
575	[BUG]  [BUGGY]  testState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
576	[BUG]  [BUGGY]  parseStatement(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseStatement(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseStatement(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
577	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
578	[BUG]  [BUGGY]  Context.checkState(n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
579	[BUG]  [BUGGY]  test(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  test(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	test(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
580	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
581	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
582	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
583	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
584	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
585	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
586	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
587	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  operationPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  operationPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  operationPrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
588	[BUG]  [BUGGY]  checkArgument(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
589	[BUG]  [BUGGY]  checkState(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
590	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionType,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
591	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  operationType,  properties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
592	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
593	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
594	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
595	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
596	[BUG]  [BUGGY]  Status.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Status.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Status.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
597	[BUG]  [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
598	[BUG]  [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
599	[BUG]  [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
600	[BUG]  [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
601	[BUG]  [BUGGY]  checkState(n,  state.getMessage());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getMessage());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getMessage());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
602	[BUG]  [BUGGY]  checkState(t,  n,  state.getCode());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getCode());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getCode());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
603	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfaceType);	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
604	[BUG]  [BUGGY]  Context.checkState(n,  state.getMessage());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  state.getMessage());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  state.getMessage());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
605	[BUG]  [BUGGY]  checkState(t,  n,  state.getReturnType());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getReturnType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getReturnType());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
606	[BUG]  [BUGGY]  checkState(t,  n,  state.getLineno());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getLineno());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getLineno());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
607	[BUG]  [BUGGY]  checkState(false,  false,  null,   "Unknown  type ");  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  false,  null,   "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  false,  null,   "Unknown  type ");	  checkState(false,    true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	65	None	replace
608	[BUG]  [BUGGY]  checkState(true,  false,   "Unknown  type ");  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(true,  false,   "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(true,  false,   "Unknown  type ");	  checkState(false,    true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	65	None	replace
609	[BUG]  [BUGGY]  checkState(false,  true,  null,   "Unknown  type ");  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  true,  null,   "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  true,  null,   "Unknown  type ");	  checkState(false,    true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	65	None	replace
610	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);  break;	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
611	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.reportCodeChange();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.reportCodeChange();	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
612	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  interfaceType);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
613	[BUG]  [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(t.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(t.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
614	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()!=  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
615	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
616	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getModule());	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
617	[BUG]  [BUGGY]  Context.checkState(currentProperties.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentProperties.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(currentProperties.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
618	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
619	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
620	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfaceType,  properties);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
621	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
622	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
623	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return;  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
624	[BUG]  [BUGGY]  testArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  testArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
625	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  break;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  break;  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
626	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return  null;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  return  null;  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
627	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
628	[BUG]  [BUGGY]  parseFunctionName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
629	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  name);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  name);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionType,  properties,  currentProperties,  name);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
630	[BUG]  [BUGGY]  parseFunctionName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
631	[BUG]  [BUGGY]  parseFunctionName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  null,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
632	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
633	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
634	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
635	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  null);	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
636	[BUG]  [BUGGY]  checkState(n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
637	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
638	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
639	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  nameNode,  properties,  currentProperties);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
640	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  null);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
641	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
642	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
643	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
644	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
645	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
646	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
647	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
648	[BUG]  [BUGGY]  verifyArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
649	[BUG]  [BUGGY]  testArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  testArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
650	[BUG]  [BUGGY]  Context.checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
651	[BUG]  [BUGGY]  checkArgument(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
652	[BUG]  [BUGGY]  parseArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  parseArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
653	[BUG]  [BUGGY]  checkArgument(n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
654	[BUG]  [BUGGY]  validateArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  validateArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	validateArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
655	[BUG]  [BUGGY]  testArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
656	[BUG]  [BUGGY]  checkArgument(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  null,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  null,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
657	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  functionPrivateName);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
658	[BUG]  [BUGGY]  checkState(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
659	[BUG]  [BUGGY]  checkState(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
660	[BUG]  [BUGGY]  Context.checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
661	[BUG]  [BUGGY]  testState(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
662	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
663	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
664	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
665	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
666	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
667	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
668	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
669	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
670	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
671	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
672	[BUG]  [BUGGY]  safeGet(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  null,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
673	[BUG]  [BUGGY]  safeGet(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
674	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
675	[BUG]  [BUGGY]  safeGet(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
676	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
677	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
678	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()!=  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
679	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
680	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
681	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
682	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
683	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
684	[BUG]  [BUGGY]  checkArgument(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
685	[BUG]  [BUGGY]  checkState(false, "Unknown  type ",  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(false, "Unknown  type ",  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false, "Unknown  type ",  null);	  checkState(true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	63	None	replace
686	[BUG]  [BUGGY]  checkState(false, ",Unknown  type ");  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(false, ",Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false, ",Unknown  type ");	  checkState(true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	63	None	replace
687	[BUG]  [BUGGY]  checkState(false, "Unknown  type. ");  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(false, "Unknown  type. ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false, "Unknown  type. ");	  checkState(true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	63	None	replace
688	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
689	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
690	[BUG]  [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
691	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
692	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
693	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNode);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNode);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
694	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	122	None	replace
695	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	122	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  interfaceType);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeCheck());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
698	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
699	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
700	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
701	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
702	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
703	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
704	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
705	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
706	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
707	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
708	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()!=  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
709	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
710	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
711	[BUG]  [BUGGY]  aughtException.from(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
712	[BUG]  [BUGGY]  aughtException.from(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
713	[BUG]  [BUGGY]  t.visitFunction(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  t.visitFunction(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	t.visitFunction(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
714	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentProperties,  functionPrivateName,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
715	[BUG]  [BUGGY]  aughtException.from(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
716	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
717	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
718	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
719	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
720	[BUG]  [BUGGY]  testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunctionName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
721	[BUG]  [BUGGY]  safeGetProp(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
722	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
723	[BUG]  [BUGGY]  safeGetProp(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
724	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
725	[BUG]  [BUGGY]  safeGetProp(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
726	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
727	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
728	[BUG]  [BUGGY]  checkState(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
729	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
730	[BUG]  [BUGGY]  checkDeclaredProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaredProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaredProperties(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
731	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getString(),  interfaceType);	  Parchet    pn    =    getPropertyPrivate(n.getString());    	non-compiled	[CE]  orphaned  case	144	None	replace
732	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getString(),  null);	  Parchet    pn    =    getPropertyPrivate(n.getString());    	non-compiled	[CE]  orphaned  case	144	None	replace
733	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  this);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getString(),  this);	  Parchet    pn    =    getPropertyPrivate(n.getString());    	non-compiled	[CE]  orphaned  case	144	None	replace
734	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString()  + "_ ");  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString()  + "_ ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getString()  + "_ ");	  Parchet    pn    =    getPropertyPrivate(n.getString());    	non-compiled	[CE]  orphaned  case	144	None	replace
735	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivate);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
736	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
737	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
738	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
739	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
740	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  null);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
741	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
742	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
743	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
744	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
745	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  functionPrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
746	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
747	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
748	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
749	[BUG]  [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
750	[BUG]  [BUGGY]  safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  currentProperties)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
751	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
752	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
753	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
754	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  checkPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  }	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
755	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
756	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
757	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
758	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
759	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	35	None	replace
760	[BUG]  [BUGGY]  CheckArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  CheckArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	35	None	replace
761	[BUG]  [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);	  checkState(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	23	None	replace
762	[BUG]  [BUGGY]  checkState(t,  n,  state.getSourceName(),  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSourceName(),  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSourceName(),  currentProperties,  functionPrivateName);	  checkState(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	23	None	replace
763	[BUG]  [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionPrivateName,  properties,  currentType,  functionPrivateName);	  checkState(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	23	None	replace
764	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
765	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
766	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
767	[BUG]  [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
768	[BUG]  [BUGGY]  checkDeclaration(t,  n,  null,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  null,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  null,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
769	[BUG]  [BUGGY]  checkState(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
770	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
771	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
772	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  null,  properties,  currentProperties,  interfaceType);  }	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
773	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  null,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
774	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
775	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
776	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
777	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  false);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  false);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
778	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(),  interfaceType);	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
779	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  this);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(),  this);	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
780	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  null);  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(),  null);	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
781	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  null,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
782	[BUG]  [BUGGY]  checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
783	[BUG]  [BUGGY]  checkInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
784	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
785	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
786	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
787	[BUG]  [BUGGY]  state.getMessage(),  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  state.getMessage(),  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	state.getMessage(),  n,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
788	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  name,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  name,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  name,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
789	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
790	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
791	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
792	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
793	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
794	[BUG]  [BUGGY]  testState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
795	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  properties,  currentType,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
796	[BUG]  [BUGGY]  parent.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parent.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
797	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
798	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
799	[BUG]  [BUGGY]  checkInterfaceConflict(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflict(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflict(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkInterfaceConflict(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	139	None	replace
800	[BUG]  [BUGGY]  checkInterfaceConflict(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflict(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflict(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflict(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	139	None	replace
801	[BUG]  [BUGGY]  checkConflict(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkConflict(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkConflict(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflict(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	139	None	replace
802	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
803	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
804	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
805	[BUG]  [BUGGY]  Context.checkNotNull(interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(interfaceType);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
806	[BUG]  [BUGGY]  Context.checkNotNull(currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(currentProperties,  interfaceType);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
807	[BUG]  [BUGGY]  Context.checkNotNull(interface);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(interface);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(interface);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
808	[BUG]  [BUGGY]  Context.checkState(currentProperties  ==  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentProperties  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(currentProperties  ==  null);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
809	[BUG]  [BUGGY]  Context.checkNotNull(interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(interfaceType,  currentProperties);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
810	[BUG]  [BUGGY]  Context.checkNotNull(properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(properties);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
811	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
812	[BUG]  [BUGGY]  checkNotNull(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
813	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  properties,  currentType,  interfaceType);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
814	[BUG]  [BUGGY]  checkArgument(n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  null,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
815	[BUG]  [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
816	[BUG]  [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	while(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
817	[BUG]  [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
818	[BUG]  [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	while(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
819	[BUG]  [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().endsWith( "__ "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().endsWith( "__ "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	while(n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().endsWith( "__ "))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
825	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
826	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
827	[BUG]  [BUGGY]  if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
828	[BUG]  [BUGGY]  if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
829	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
830	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
831	[BUG]  [BUGGY]  checkState(t,  n,  state.getSourceName(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSourceName(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSourceName(),  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
832	[BUG]  [BUGGY]  checkState(t,  n,  DEFAULT_NAME,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  DEFAULT_NAME,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  DEFAULT_NAME,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
833	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
834	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
835	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
836	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
837	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
838	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getName(),  properties,  currentType,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
839	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName,  null);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
840	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
841	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  null,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  null,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  null,  properties,  currentProperties,  functionPrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
842	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType,  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
843	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  false);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  false);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  false);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
844	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  this);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  this);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
845	[BUG]  [BUGGY]  Context.checkState(propertyName!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(propertyName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(propertyName!=  null);	  Context.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	172	None	replace
846	[BUG]  [BUGGY]  Context.checkState(propertyName  ==  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(propertyName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(propertyName  ==  null);	  Context.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	172	None	replace
847	[BUG]  [BUGGY]  ConstructorVisibility.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ConstructorVisibility.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ConstructorVisibility.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
848	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
849	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkNotFound(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	205	None	replace
850	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	205	None	replace
851	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getName(),  properties,  currentType,  interfaceType);	  checkNotFound(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	205	None	replace
852	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  properties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
853	[BUG]  [BUGGY]  testFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  testFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunctionName(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
854	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
855	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  functionType);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
856	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
857	[BUG]  [BUGGY]  Context.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()!=  Token.FUNCTION);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
858	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
859	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
860	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionDeclaration(n));	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
861	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
862	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfaceType,  properties);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
863	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
864	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
865	[BUG]  [BUGGY]  Parchet.checkArgument(properties!=  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(properties!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(properties!=  null);	  Parchet.checkNotNull(properties);    	non-compiled	[CE]  orphaned  case	8	None	replace
866	[BUG]  [BUGGY]  Parchet.checkNotNull(properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(properties,  interfaceType);	  Parchet.checkNotNull(properties);    	non-compiled	[CE]  orphaned  case	8	None	replace
867	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
868	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
869	[BUG]  [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
870	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
871	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
872	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  properties);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
873	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
874	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
875	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
876	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
877	[BUG]  [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
878	[BUG]  [BUGGY]  safeGet(t,  n,  getType()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  getType()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  getType()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
879	[BUG]  [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
880	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
881	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
882	[BUG]  [BUGGY]  safeName.setAssignmentOp(n.getType()  {  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssignmentOp(n.getType()  {  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssignmentOp(n.getType()  {  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
883	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
884	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	131	None	replace
885	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getMessage(),  currentName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	131	None	replace
886	[BUG]  [BUGGY]  checkState(n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  currentName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	131	None	replace
887	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	137	None	replace
888	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	137	None	replace
889	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getName(),  properties,  interfaceType);	  checkInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	137	None	replace
890	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
891	[BUG]  [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  this.functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
892	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
893	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
894	[BUG]  [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
895	[BUG]  [BUGGY]  safeGet(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
896	[BUG]  [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  sourceName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
897	[BUG]  [BUGGY]  checkName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
898	[BUG]  [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
899	[BUG]  [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
900	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
901	[BUG]  [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
902	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
903	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
904	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
905	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
906	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
907	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
908	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
909	[BUG]  [BUGGY]  checkNotFound(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  type,  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
910	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getNext());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getNext());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getNext());	  Parchet    pn    =    getPropertyPrivate(n.getFirstChild());    	non-compiled	[CE]  orphaned  case	147	None	replace
911	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getType());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getType());	  Parchet    pn    =    getPropertyPrivate(n.getFirstChild());    	non-compiled	[CE]  orphaned  case	147	None	replace
912	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  interfaceType);	  Parchet    pn    =    getPropertyPrivate(n.getFirstChild());    	non-compiled	[CE]  orphaned  case	147	None	replace
913	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getFirstChild(),  null);	  Parchet    pn    =    getPropertyPrivate(n.getFirstChild());    	non-compiled	[CE]  orphaned  case	147	None	replace
914	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
915	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
916	[BUG]  [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.visitFunction(t,  n,  state.getName(),  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
917	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeDesc());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeDesc());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  interfaceType,  new  TypeDesc());	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
918	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(),  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(),  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeDesc(),  interfaceType);	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
919	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeDesc());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t,  new  TypeDesc());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  t,  new  TypeDesc());	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
920	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(interfaceType));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(interfaceType));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeDesc(interfaceType));	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
921	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeDesc());  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeDesc());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeDesc());	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
922	[BUG]  [BUGGY]  safeMultiply(t,  n,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
923	[BUG]  [BUGGY]  safeInterface(t,  n,  functionPrivateName);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeInterface(t,  n,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeInterface(t,  n,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
924	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
925	[BUG]  [BUGGY]  safeName(t,  n,  functionPrivateName);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeName(t,  n,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName(t,  n,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
926	[BUG]  [BUGGY]  safeMultiply(t,  n,  null);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  null);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
927	[BUG]  [BUGGY]  safeAdd(t,  n,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  functionPrivateName,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
928	[BUG]  [BUGGY]  checkState(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
929	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
930	[BUG]  [BUGGY]  checkState(t,  n,  1,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  functionPrivateName,  properties,  interfaceType);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
931	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionName);    	non-compiled	[CE]  orphaned  case	154	None	replace
932	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionName);    	non-compiled	[CE]  orphaned  case	154	None	replace
933	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionName);    	non-compiled	[CE]  orphaned  case	154	None	replace
934	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getName(),  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	206	None	replace
935	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	206	None	replace
936	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getName(),  properties,  interfaceType);	  checkPermission(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	206	None	replace
937	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
938	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
939	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  functionType,  properties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
940	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
941	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfacePrivateName);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
942	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
943	[BUG]  [BUGGY]  passts.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  passts.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	passts.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
944	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivate);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivate);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
945	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
946	[BUG]  [BUGGY]  checkInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	165	None	replace
947	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getMessage(),  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getMessage(),  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getMessage(),  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	165	None	replace
948	[BUG]  [BUGGY]  checkInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	165	None	replace
949	[BUG]  [BUGGY]  parent.visitFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parent.visitFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.visitFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
950	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
951	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
952	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
953	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
954	[BUG]  [BUGGY]  testFunctionName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  testFunctionName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testFunctionName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
955	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
956	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
957	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getName  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getName  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  state.getName	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
958	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interfaceType));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interfaceType));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(interfaceType));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
959	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(this));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(this));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  new  TypeCheck(this));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
960	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(this,  interfaceType));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(this,  interfaceType));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(this,  interfaceType));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
961	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interface));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interface));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(interface));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
962	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(this));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(this));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(this));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
963	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interfaces));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(interfaces));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(interfaces));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
964	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(type));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(type));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(type));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
965	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
966	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  properties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
967	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
968	[BUG]  [BUGGY]  checkArgument(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
969	[BUG]  [BUGGY]  testState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  testState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	219	None	replace
970	[BUG]  [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	219	None	replace
971	[BUG]  [BUGGY]  test(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  test(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	test(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	219	None	replace
972	[BUG]  [BUGGY]  Constructor  <  Node>  n  =  n.getConstructor();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  Node>  n  =  n.getConstructor();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <  Node>  n  =  n.getConstructor();	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
973	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
974	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  functionPrivate,  interfaceType);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
975	[BUG]  [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionType,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
976	[BUG]  [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionType,  properties,  currentProperties,  interfacePrivate);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
977	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	46	None	replace
978	[BUG]  [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkState(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	46	None	replace
979	[BUG]  [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);	  checkState(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	46	None	replace
980	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
981	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
982	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
983	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionName,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
984	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  functionType);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
985	[BUG]  [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	128	None	replace
986	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateType);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	128	None	replace
987	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  null);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	128	None	replace
988	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
989	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
990	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
991	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
992	[BUG]  [BUGGY]  checkState(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
993	[BUG]  [BUGGY]  checkState(n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
994	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
995	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
996	[BUG]  [BUGGY]  Context.checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
997	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  }  else  {  return;  }	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
998	[BUG]  [BUGGY]  parseFunctionName(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
999	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1000	[BUG]  [BUGGY]  checkState(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1001	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1002	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1003	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivate);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1004	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1005	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1006	[BUG]  [BUGGY]  checkDeclaration(t,  n,  moduleName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  moduleName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  moduleName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1007	[BUG]  [BUGGY]  checkState(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1008	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkDeclaration(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1009	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getModule(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getModule(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getModule(),  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1010	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1011	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1012	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1013	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceType(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  super.visitFunction(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1014	[BUG]  [BUGGY]  checkState(true,  null, "Unknown  type ");  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(true,  null, "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(true,  null, "Unknown  type ");	  checkState(false,    null,       "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	66	None	replace
1015	[BUG]  [BUGGY]  checkState(false,  null,  interfaceType, "Unknown  type ");  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  null,  interfaceType, "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  null,  interfaceType, "Unknown  type ");	  checkState(false,    null,       "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	66	None	replace
1016	[BUG]  [BUGGY]  checkState(false,  null,   "Unknown  type ",  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  null,   "Unknown  type ",  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  null,   "Unknown  type ",  interfaceType);	  checkState(false,    null,       "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	66	None	replace
1017	[BUG]  [BUGGY]  checkState(false,  null,   "Unknown  type. ");  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  null,   "Unknown  type. ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  null,   "Unknown  type. ");	  checkState(false,    null,       "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	66	None	replace
1018	[BUG]  [BUGGY]  checkPermission(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  DEFAULT_TYPE,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1019	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  properties,  nameNode,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1020	[BUG]  [BUGGY]  checkPermission(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  nameNode,  properties,  interfaceType,  currentProperties);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1021	[BUG]  [BUGGY]  checkPermission(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  parent,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1022	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1023	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1024	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1025	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1026	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
1027	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
1028	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
1029	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1030	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1031	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1032	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1033	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1034	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivate,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
1035	[BUG]  [BUGGY]  checkState(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
1036	[BUG]  [BUGGY]  CheckState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CheckState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivate);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
1037	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkInterfaceName(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	54	None	replace
1038	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1039	[BUG]  [BUGGY]  safeGetProp(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1040	[BUG]  [BUGGY]  safeAccess(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeAccess(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAccess(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1041	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
1042	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  interfaceType,  properties);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1043	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1044	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1045	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceName,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfaceName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  interfaceName,  properties);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1046	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfacePrivateName,  properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  interfacePrivateName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  interfacePrivateName,  properties);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1047	[BUG]  [BUGGY]  ParchetState.checkNotNull(interfaces);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(interfaces);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(interfaces);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
1048	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1049	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1050	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1051	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1052	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1053	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1054	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1055	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
1056	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  functionPrivateType);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
1057	[BUG]  [BUGGY]  verifyArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
1058	[BUG]  [BUGGY]  checkNotState(t,  n,  status,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotState(t,  n,  status,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotState(t,  n,  status,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
1059	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
1060	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
1061	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	60	None	replace
1062	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  t);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  t);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  this,  t);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
1063	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  node,  this,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
1064	[BUG]  [BUGGY]  checkState(false,  true,  false, "Unknown  type ");  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  true,  false, "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  true,  false, "Unknown  type ");	  checkState(false,    true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	65	None	replace
1065	[BUG]  [BUGGY]  checkPermission(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  interfaceType,  properties,  currentProperties,  nameNode);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1066	[BUG]  [BUGGY]  checkPermission(t,  n,  nameNode,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  nameNode,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  nameNode,  properties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1067	[BUG]  [BUGGY]  checkNotState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	219	None	replace
1068	[BUG]  [BUGGY]  CheckState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CheckState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	219	None	replace
1069	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);	  checkDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	122	None	replace
1070	[BUG]  [BUGGY]  checkDeclaration(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);	  checkDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	122	None	replace
1071	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
1072	[BUG]  [BUGGY]  checkName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
1073	[BUG]  [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
1074	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1075	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1076	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1077	[BUG]  [BUGGY]  safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1078	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfaceType,  properties);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1079	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1080	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1081	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceName,  properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfaceName,  properties);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1082	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
1083	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
1084	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
1085	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  operationType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  operationType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  operationType);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
1086	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  operationType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
1087	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1088	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1089	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1090	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1091	[BUG]  [BUGGY]  safely(t,  n)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1092	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  protocolType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getString(),  protocolType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getString(),  protocolType);	  Parchet    pn    =    getPropertyPrivate(n.getString());    	non-compiled	[CE]  orphaned  case	144	None	replace
1093	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1094	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1095	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1096	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  return;  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1097	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
1098	[BUG]  [BUGGY]  checkInterface(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
1099	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
1100	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionType);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
1101	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    functionName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	109	None	replace
1102	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
1103	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
1104	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
1105	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
1106	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
1107	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionName,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
1108	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
1109	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
1110	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
1111	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
1112	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
1113	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1114	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1115	[BUG]  [BUGGY]  verifyArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1116	[BUG]  [BUGGY]  testArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  testArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testArgument(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1117	[BUG]  [BUGGY]  checkState(false,  null, ",Unknown  type ");  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  null, ",Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  null, ",Unknown  type ");	  checkState(false,    null,       "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	66	None	replace
1118	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1119	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1120	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1121	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1122	[BUG]  [BUGGY]  aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1123	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1124	[BUG]  [BUGGY]  aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aught(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	18	None	replace
1125	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1126	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  functionPrivateName);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1127	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfacePrivateName,  properties,  functionType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1128	[BUG]  [BUGGY]  ParchetState.checkArgument(functionPrivateId!=  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(functionPrivateId!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(functionPrivateId!=  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
1129	[BUG]  [BUGGY]  checkName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
1130	[BUG]  [BUGGY]  checkArgument(interfaceType.getType()  ==  Token.FUNCTION,  n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(interfaceType.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(interfaceType.getType()  ==  Token.FUNCTION,  n);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1131	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1132	[BUG]  [BUGGY]  checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkNotNull(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	157	None	replace
1133	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getParent());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getParent());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getParent());	  Parchet    pn    =    getPropertyPrivate(n.getFirstChild());    	non-compiled	[CE]  orphaned  case	147	None	replace
1134	[BUG]  [BUGGY]  checkNotNull(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
1135	[BUG]  [BUGGY]  checkDeclaration(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
1136	[BUG]  [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  INVALID_TYPE,  properties,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
1137	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
1138	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
1139	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    	non-compiled	[CE]  orphaned  case	43	None	replace
1140	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1141	[BUG]  [BUGGY]  CheckState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CheckState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1142	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentName,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentName,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1143	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1144	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
1145	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
1146	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
1147	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
1148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  ctxt,  n);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  ctxt,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  ctxt,  n);	  NodeTraversal.traverse(compiler,    this,    n);    	non-compiled	[CE]  orphaned  case	51	None	replace
1149	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionObjectCall(n));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionObjectCall(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionObjectCall(n));	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
1150	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(n));	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
1151	[BUG]  [BUGGY]  ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1152	[BUG]  [BUGGY]  ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1153	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
1154	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
1155	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	165	None	replace
1156	[BUG]  [BUGGY]  checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
1157	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
1158	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getName(),  properties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
1159	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
1160	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
1161	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
1162	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
1163	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	15	None	replace
1164	[BUG]  [BUGGY]  checkState(false,, "Unknown  type ");  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,, "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,, "Unknown  type ");	  checkState(true,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	63	None	replace
1165	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
1166	[BUG]  [BUGGY]  Parchet.checkNotNull(interfaces);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(interfaces);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(interfaces);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
1167	[BUG]  [BUGGY]  Parchet.checkNotNull(connectType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(connectType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(connectType);	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
1168	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
1169	[BUG]  [BUGGY]  checkDeclaration(t,  n,  signature,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  signature,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  signature,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
1170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this.n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this.n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
1171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.node,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this.node,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this.node,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
1172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this.null,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this.null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	53	None	replace
1173	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
1174	[BUG]  [BUGGY]  checkPermission(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
1175	[BUG]  [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
1176	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionPrivateType,  properties,  currentProperties,  currentType);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
1177	[BUG]  [BUGGY]  checkPermission(t,  n,  1L,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1L,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1L,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
1178	[BUG]  [BUGGY]  Magimizer.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Magimizer.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Magimizer.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
1179	[BUG]  [BUGGY]  Constructor  <  Object>  currentProperties  =  getCurrentProperty(n.getType());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  Object>  currentProperties  =  getCurrentProperty(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <  Object>  currentProperties  =  getCurrentProperty(n.getType());	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
1180	[BUG]  [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  null,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  parent.visitFunction(t,  n,  state.getName(),  properties,  null,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parent.visitFunction(t,  n,  state.getName(),  properties,  null,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
1181	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1182	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1183	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1184	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1185	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1186	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  existingProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  existingProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  interfaceType,  existingProperties);	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
1187	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType,  state);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType,  state);	  checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	71	None	replace
1188	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getName());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getName());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getName());	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1189	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getType());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getType());	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1190	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  name);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  name);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionType.getString(),  n.getString(),  name);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1191	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1192	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1193	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1194	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1195	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1196	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1197	[BUG]  [BUGGY]  ParchetUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ParchetUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetUtil.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1198	[BUG]  [BUGGY]  safely(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
1199	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	77	None	replace
1200	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
1201	[BUG]  [BUGGY]  checkInterfaceFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionName);    	non-compiled	[CE]  orphaned  case	154	None	replace
1202	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);	  checkInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	131	None	replace
1203	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	131	None	replace
1204	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
1205	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
1206	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
1207	[BUG]  [BUGGY]  checkState(t,  n,  STRING_NOT_IMPLEMENTED,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_NOT_IMPLEMENTED,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_NOT_IMPLEMENTED,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
1208	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  interfaceType,  currentProperties);	  checkState(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	106	None	replace
1209	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  signature,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
1210	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfacePrivateName,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
1211	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  interfaceName,  properties,  currentProperties,  functionPrivateType);	  checkDeclaration(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	27	None	replace
1212	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1213	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1214	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1215	[BUG]  [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1216	[BUG]  [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1217	[BUG]  [BUGGY]  verifyInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  verifyInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	137	None	replace
1218	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  currentType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  currentType);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1219	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1220	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivate);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1221	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1222	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceName,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1223	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1224	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1225	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1226	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1227	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1228	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName,  currentProperties);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
1229	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1230	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1231	[BUG]  [BUGGY]  checkInterfaceConflict(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflict(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflict(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1232	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getSourceName(),  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1233	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1234	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1235	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1236	[BUG]  [BUGGY]  safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1237	[BUG]  [BUGGY]  safeGet(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1238	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  currentType);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1239	[BUG]  [BUGGY]  checkInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1240	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1241	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfacePrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfacePrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfacePrivateName,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1242	[BUG]  [BUGGY]  Parchet.checkState(this.node!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(this.node!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(this.node!=  null);	  Parchet.checkState(n!=    null);    	non-compiled	[CE]  orphaned  case	10	None	replace
1243	[BUG]  [BUGGY]  Parchet.checkState(n  [Delete]  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n  [Delete]  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n  [Delete]  null);	  Parchet.checkState(n!=    null);    	non-compiled	[CE]  orphaned  case	10	None	replace
1244	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  currentProperties,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
1245	[BUG]  [BUGGY]  test(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  test(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	test(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
1246	[BUG]  [BUGGY]  checkNotState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
1247	[BUG]  [BUGGY]  CheckState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CheckState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
1248	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
1249	[BUG]  [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Faces.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Faces.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
1250	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
1251	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
1252	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
1253	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
1254	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	41	None	replace
1255	[BUG]  [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
1256	[BUG]  [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
1257	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
1258	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1259	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1260	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1261	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1262	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1263	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1264	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  return;  }  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1265	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentProperties,  properties,  currentType,  interfaceType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
1266	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
1267	[BUG]  [BUGGY]  tryFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  tryFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	tryFunction(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
1268	[BUG]  [BUGGY]  safeInsertion(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeInsertion(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeInsertion(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
1269	[BUG]  [BUGGY]  safeGet(t,  n)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
1270	[BUG]  [BUGGY]  checkNotNull(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1271	[BUG]  [BUGGY]  checkDeclaration(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1272	[BUG]  [BUGGY]  checkPermission(t,  n,  1,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1273	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceName,  properties,  currentProperties,  currentName);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
1274	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
1275	[BUG]  [BUGGY]  checkNotState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotState(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
1276	[BUG]  [BUGGY]  checkInterfaceDeclaration(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceDeclaration(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceDeclaration(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflict(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	139	None	replace
1277	[BUG]  [BUGGY]  checkInterfaceFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflict(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	139	None	replace
1278	[BUG]  [BUGGY]  CheckState.checkState(currentProperties.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(currentProperties.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(currentProperties.getType()  ==  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1279	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1280	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1281	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName,  null);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  currentProperties,  interfaceName,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
1282	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  name,  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  name,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  name,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
1283	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName,    null);    	non-compiled	[CE]  orphaned  case	168	None	replace
1284	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1285	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1286	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1287	[BUG]  [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1288	[BUG]  [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1289	[BUG]  [BUGGY]  safeGet(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1290	[BUG]  [BUGGY]  Parchet  t  =  getStatement(n.getFirstChild());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchet  t  =  getStatement(n.getFirstChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  t  =  getStatement(n.getFirstChild());	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
1291	[BUG]  [BUGGY]  Parchet  t  =  getStatement(n.getType());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet  t  =  getStatement(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  t  =  getStatement(n.getType());	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
1292	[BUG]  [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceName!=  null)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceName!=  null)  {  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  }	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
1293	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
1294	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  null);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
1295	[BUG]  [BUGGY]  parse(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  parse(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parse(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
1296	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
1297	[BUG]  [BUGGY]  parseFunctionName(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  1,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
1298	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  functionPrivateName);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
1299	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
1300	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
1301	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	115	None	replace
1302	[BUG]  [BUGGY]  ParchetState  state  =  getArgumentState();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getArgumentState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getArgumentState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1303	[BUG]  [BUGGY]  ParchetState  state  =  getOwnState();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getOwnState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getOwnState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1304	[BUG]  [BUGGY]  ParchetState  state  =  getActualState();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getActualState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getActualState();	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1305	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
1306	[BUG]  [BUGGY]  facerilor.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  facerilor.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	facerilor.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
1307	[BUG]  [BUGGY]  passts.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  passts.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	passts.checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  fits.checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	169	None	replace
1308	[BUG]  [BUGGY]  checkNotFound(t,  n,  4,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  4,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  4,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
1309	[BUG]  [BUGGY]  checkNotFound(t,  n,  0,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  0,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  0,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
1310	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Opcodes.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Opcodes.traverse(compiler,  n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
1311	[BUG]  [BUGGY]  Constructor.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor.traverse(compiler,  n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
1312	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.traverse(compiler,  n,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
1313	[BUG]  [BUGGY]  Context.checkNotNull(interfaces);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(interfaces);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(interfaces);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
1314	[BUG]  [BUGGY]  Context.checkNotNull(connectType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(connectType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(connectType);	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
1315	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  functionType);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
1316	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
1317	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfacePrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
1318	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
1319	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  nameNodeType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  nameNodeType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceName,  properties,  nameNodeType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	99	None	replace
1320	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
1321	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
1322	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
1323	[BUG]  [BUGGY]  safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  1))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
1324	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceName,  properties);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1325	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  interfaceName,  functionPrivateName);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1326	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivate);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
1327	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivate);    	non-compiled	[CE]  orphaned  case	114	None	replace
1328	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  currentType,  properties,  interfaceType,  currentProperties);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
1329	[BUG]  [BUGGY]  verifyArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  verifyArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyArgument(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
1330	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1331	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  currentType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1332	[BUG]  [BUGGY]  validateInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  validateInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	validateInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1333	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  currentProperties,  interfaceType,  properties);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1334	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1335	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  currentName);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
1336	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
1337	[BUG]  [BUGGY]  checkInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1338	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1339	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1340	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  properties,  null);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1341	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1342	[BUG]  [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1343	[BUG]  [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1344	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  Preconditions.checkNotNull(interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  Preconditions.checkNotNull(interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  }  else  {  Preconditions.checkNotNull(interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1345	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfaceName,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfaceName,  functionPrivateName);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
1346	[BUG]  [BUGGY]  checkPermission(t,  n,  interfaceType,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  interfaceType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  interfaceType,  functionPrivateName);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
1347	[BUG]  [BUGGY]  checkPermission(t,  n,  currentProperties,  interfacePrivateName,  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentProperties,  interfacePrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentProperties,  interfacePrivateName,  null);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
1348	[BUG]  [BUGGY]  checkState(t,  n,  FunctionType.FUNCTION,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  FunctionType.FUNCTION,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  FunctionType.FUNCTION,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	46	None	replace
1349	[BUG]  [BUGGY]  checkState(true,  true,   "Unknown  type ");  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(true,  true,   "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(true,  true,   "Unknown  type ");	  checkState(false,    false,   "Unknown    type   ");    	non-compiled	[CE]  orphaned  case	64	None	replace
1350	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  null);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1351	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.toString());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.toString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.toString());	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1352	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.getString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.getString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName.getString());	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1353	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1354	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getStandardProperties();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getStandardProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getStandardProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
1355	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getConstructors();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getConstructors();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getConstructors();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
1356	[BUG]  [BUGGY]  safeTwins(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1357	[BUG]  [BUGGY]  Parchet.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1358	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1359	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  this);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyPrivate(n.getLastChild(),  this);	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
1360	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1361	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.type);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this.type);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
1363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.connectionType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.connectionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this.connectionType);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
1364	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1365	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1366	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1367	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1368	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
1369	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  currentName)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
1370	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.NAME))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
1371	[BUG]  [BUGGY]  ParchetState.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1372	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1373	[BUG]  [BUGGY]  CheckArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  CheckArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1374	[BUG]  [BUGGY]  checkPermission(t,  n,  null,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  null,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  null,  currentProperties,  interfaceType);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
1375	[BUG]  [BUGGY]  checkInterfaceDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  currentProperties);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
1376	[BUG]  [BUGGY]  checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
1377	[BUG]  [BUGGY]  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  null);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
1378	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1379	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  super.visitFunction(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  super.visitFunction(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  super.visitFunction(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1380	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(currentProperties!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1381	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  interfaceType,  currentType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  interfaceType,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  interfaceType,  currentType);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1382	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  nameNode);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
1383	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  nameNode.toString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  nameNode.toString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  nameNode.toString());	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
1384	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
1385	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
1386	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  state.getMessage(),  properties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
1387	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1388	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1389	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1390	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1391	[BUG]  [BUGGY]  safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1392	[BUG]  [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1393	[BUG]  [BUGGY]  safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1394	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1395	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1396	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1397	[BUG]  [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1398	[BUG]  [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()!=  Token.FUNCTION))  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1399	[BUG]  [BUGGY]  safeGet(n.getType())  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n.getType())  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n.getType())  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	36	None	replace
1400	[BUG]  [BUGGY]  checkState(n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  functionPrivate,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  functionPrivate,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
1401	[BUG]  [BUGGY]  checkState(functionPrivate,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(functionPrivate,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(functionPrivate,  n,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
1402	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  currentName);	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1403	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1404	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1405	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  name);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  name);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  name);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1406	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1407	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  nameNode);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  nameNode);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1408	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionType,  properties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1409	[BUG]  [BUGGY]  checkInterfaceDeclaration(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceDeclaration(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceDeclaration(t,  n,  state.getReturnType(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getReturnType(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	74	None	replace
1410	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
1411	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
1412	[BUG]  [BUGGY]  checkState(interfaceType.getType()  ==  Token.FUNCTION,  n);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(interfaceType.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(interfaceType.getType()  ==  Token.FUNCTION,  n);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
1413	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
1414	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  null);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
1415	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
1416	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceName,  properties,  currentProperties,  null);	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
1417	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	110	None	replace
1418	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
1419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeDesc());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeDesc());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  TypeDesc());	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
1420	[BUG]  [BUGGY]  checkInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1421	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  null);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1422	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties.getName(),  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1423	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
1424	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
1425	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  return;	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
1426	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
1427	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  false);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  false);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
1428	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  break;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  break;  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
1429	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  break;  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  break;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  break;  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
1430	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()!=  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
1431	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  null);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
1432	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
1433	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  null,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  null,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  null,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
1434	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties,  interfaceName);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	128	None	replace
1435	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionPrivateType,  properties,  currentProperties);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	128	None	replace
1436	[BUG]  [BUGGY]  Parchet.checkNotNull(type);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(type);	  Parchet.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	12	None	replace
1437	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state.getMessage(),  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state.getMessage(),  moduleName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1438	[BUG]  [BUGGY]  checkArgument(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1439	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  moduleName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  moduleName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  moduleName);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1440	[BUG]  [BUGGY]  checkDeclaration(t,  n,  currentProperties,  moduleName,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  currentProperties,  moduleName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  currentProperties,  moduleName,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1441	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  functionPrivateName,  properties,  currentProperties);	  checkInterfaceType(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	107	None	replace
1442	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
1443	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
1444	[BUG]  [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()!=  Token.FUNCTION))  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
1445	[BUG]  [BUGGY]  checkState(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  type,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  type,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	23	None	replace
1446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
1447	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  null);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1448	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  false);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  false);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  false);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1449	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNodeName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNodeName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameNodeName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1450	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameEnd);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameEnd);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  nameEnd);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1451	[BUG]  [BUGGY]  CheckArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  CheckArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckArgument(n.getType()!=  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
1452	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentProperties,  properties,  functionPrivateName,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
1453	[BUG]  [BUGGY]  aughtException.from(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
1454	[BUG]  [BUGGY]  aughtException.from(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  1,  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
1455	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return;  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
1456	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
1457	[BUG]  [BUGGY]  Context.checkState(null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
1458	[BUG]  [BUGGY]  Context.checkState(this.functionPrivate!=  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(this.functionPrivate!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(this.functionPrivate!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
1459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( " "));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( " "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  RuntimeException( " "));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  interfaceType,  new  RuntimeException( " "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  interfaceType,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " ")));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1464	[BUG]  [BUGGY]  Context.checkNotNull(interfaceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(interfaceName);	  Context.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	172	None	replace
1465	[BUG]  [BUGGY]  Context.checkNotNull(type);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(type);	  Context.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	172	None	replace
1466	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
1467	[BUG]  [BUGGY]  checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
1468	[BUG]  [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  this.functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  this.functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  interfaceType,  properties,  currentProperties,  this.functionPrivateName);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1469	[BUG]  [BUGGY]  checkDeclaration(t,  n,  currentProperties,  properties,  this.functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  currentProperties,  properties,  this.functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  currentProperties,  properties,  this.functionPrivateName,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1470	[BUG]  [BUGGY]  checkArgument(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1471	[BUG]  [BUGGY]  checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfacePrivateName);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1472	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
1473	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  functionPrivateName);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
1474	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  properties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1475	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  null,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  null,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  null,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1476	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1477	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  properties,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1478	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  null);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceType,  null);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1479	[BUG]  [BUGGY]  checkNotFound(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  functionIndex,  properties,  currentProperties,  interfaceName);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
1480	[BUG]  [BUGGY]  checkState(n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1481	[BUG]  [BUGGY]  checkState(false,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1482	[BUG]  [BUGGY]  checkState(n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  null,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1483	[BUG]  [BUGGY]  checkState(functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1484	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceName);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	183	None	replace
1485	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceName,  properties,  currentType,  functionPrivateName);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	183	None	replace
1486	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
1487	[BUG]  [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	verifyInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
1488	[BUG]  [BUGGY]  checkName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
1489	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentType,  properties,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
1490	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties,  currentType);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
1491	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  currentType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
1492	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
1493	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceName,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	132	None	replace
1494	[BUG]  [BUGGY]  checkState(null,  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(null,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(null,  null);	  checkState(false,    null);    	non-compiled	[CE]  orphaned  case	67	None	replace
1495	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1496	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfaceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  properties,  functionType,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1497	[BUG]  [BUGGY]  checkInterfaceFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceFunctionName(t,  n,  functionType,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1498	[BUG]  [BUGGY]  Parchet.checkState(this.node  ==  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(this.node  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(this.node  ==  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
1499	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  nameNode,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1500	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1501	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  interfacePrivateName,  properties,  currentProperties,  functionPrivateType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1502	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1503	[BUG]  [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType!=  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1504	[BUG]  [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(interfaceType  ==  null)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1505	[BUG]  [BUGGY]  checkInterface(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  currentProperties,  interfaceType,  properties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1506	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1507	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  functionType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  functionType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  functionType);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
1508	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1509	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1510	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  super.visitFunction(t,  n,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  super.visitFunction(t,  n,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  super.visitFunction(t,  n,  interfaceType);  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1511	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfacePrivateName,  properties,  currentProperties);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1512	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(functionPrivateName!=  null)  {  checkInterfaceName(t,  n,  functionPrivateName,  properties,  currentProperties);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1513	[BUG]  [BUGGY]  checkDeclaration(t,  n,  nameNode,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  nameNode,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  nameNode,  interfaceType,  properties);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
1514	[BUG]  [BUGGY]  checkDeclaration(t,  n,  nameNode,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  nameNode,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  nameNode,  properties,  interfaceType);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
1515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(n,  this));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(n,  this));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(n,  this));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
1516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(this),  n);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(this),  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(this),  n);	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
1517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(n),  this);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(n),  this);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(n),  this);	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
1518	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1519	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1520	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1521	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  null,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getName(),  properties,  null,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getName(),  properties,  null,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
1522	[BUG]  [BUGGY]  check(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  check(n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	check(n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
1523	[BUG]  [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1524	[BUG]  [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1525	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1526	[BUG]  [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType())>  0)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1527	[BUG]  [BUGGY]  safeGet(t,  n.getType())  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType())  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType())  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1528	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceName))  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1529	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  interfaceName)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  interfaceName)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  interfaceName)  {  checkInterfaceConflictProperties(t,  n,  interfaceName,  properties,  currentProperties,  functionPrivateName);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1530	[BUG]  [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1531	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1532	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1533	[BUG]  [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1534	[BUG]  [BUGGY]  safeAdd(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safeAdd(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeAdd(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1535	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
1536	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
1537	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(n));	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
1538	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
1539	[BUG]  [BUGGY]  Context.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n!=  null  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
1540	[BUG]  [BUGGY]  checkInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1541	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1542	[BUG]  [BUGGY]  checkArgument(t,  n  ==  null,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n  ==  null,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n  ==  null,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1543	[BUG]  [BUGGY]  State  state  =  getState(n.getType());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  State  state  =  getState(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	State  state  =  getState(n.getType());	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
1544	[BUG]  [BUGGY]  checkState(t,  n,  1,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1545	[BUG]  [BUGGY]  checkNotState(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotState(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotState(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1546	[BUG]  [BUGGY]  checkState(t,  n,  2,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  2,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  2,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1547	[BUG]  [BUGGY]  checkState(t,  n,  4,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  4,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  4,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1548	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1549	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentType,  currentProperties);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1550	[BUG]  [BUGGY]  checkState(t,  n,  DETERMINISTIC_FACTOR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  DETERMINISTIC_FACTOR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  DETERMINISTIC_FACTOR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1551	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  interfaceType,  properties);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1552	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1553	[BUG]  [BUGGY]  Context.checkNotNull(t,  n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(t,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(t,  n);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
1554	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1555	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1556	[BUG]  [BUGGY]  if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
1557	[BUG]  [BUGGY]  if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n!=  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
1558	[BUG]  [BUGGY]  checkState(false,  n,  state.getMessage());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(false,  n,  state.getMessage());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(false,  n,  state.getMessage());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
1559	[BUG]  [BUGGY]  checkState(t,  n,  state.getType());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getType());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
1560	[BUG]  [BUGGY]  Context.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n!=  null  &&  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
1561	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  NodeUtil.isFunctionDeclaration(n));	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
1562	[BUG]  [BUGGY]  Context.checkState(currentProperties.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentProperties.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(currentProperties.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
1563	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getName(),  properties,  currentType,  interfaceType);	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
1564	[BUG]  [BUGGY]  checkState(t,  n,  state.getType(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getType(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getType(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
1565	[BUG]  [BUGGY]  checkState(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getName(),  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getName(),  properties,  currentType,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
1566	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1567	[BUG]  [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n.getType()))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1568	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1569	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
1570	[BUG]  [BUGGY]  safeTwins(t,  n.getType(),  state.getName()))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeTwins(t,  n.getType(),  state.getName()))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeTwins(t,  n.getType(),  state.getName()))  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
1571	[BUG]  [BUGGY]  checkDeclaration(t,  n,  null,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  null,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  null,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
1572	[BUG]  [BUGGY]  checkDeclaration(t,  n,  null,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  null,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  null,  properties,  interfaceType);	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
1573	[BUG]  [BUGGY]  checkDeclaration(t,  n,  null,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  null,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  null,  properties,  currentType,  interfaceType);	  checkDeclaration(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	29	None	replace
1574	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getMessage());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME,  t.getMessage());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME,  t.getMessage());	  Context.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	199	None	replace
1575	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	84	None	replace
1576	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);	  checkInterfaceType(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	70	None	replace
1577	[BUG]  [BUGGY]  checkPermission(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  operationType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
1578	[BUG]  [BUGGY]  checkPermission(t,  n,  operationType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  operationType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  operationType,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    operationType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	135	None	replace
1579	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
1580	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT  ||  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT  ||  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT  ||  currentType  ==  FunctionNode.FUNCTION_NOT_OBJECT);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
1581	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName.toString());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName.toString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  currentProperties,  functionPrivateName.toString());	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	119	None	replace
1582	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  type);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  type);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
1583	[BUG]  [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  parseFunctionName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	55	None	replace
1584	[BUG]  [BUGGY]  aughtException.from(t,  n,  state.getName(),  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  state.getName(),  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  state.getName(),  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
1585	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentPropertyType(n.getFirstChild());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentPropertyType(n.getFirstChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentPropertyType(n.getFirstChild());	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    super.visitFunction(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	76	None	replace
1586	[BUG]  [BUGGY]  Context.checkState(t.getModule()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(t.getModule()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(t.getModule()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
1587	[BUG]  [BUGGY]  Context.checkNotNull(t);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(t);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(t);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
1588	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	14	None	replace
1589	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	118	None	replace
1590	[BUG]  [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  functionPrivateName,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
1591	[BUG]  [BUGGY]  checkDeclaration(t,  n,  1,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  1,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  1,  properties,  interfaceType,  currentProperties);	  checkDeclaration(t,    n,    functionPrivateName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	30	None	replace
1592	[BUG]  [BUGGY]  test(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  test(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	test(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1593	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentValues,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentValues,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentValues,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPECTED_ERROR,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	191	None	replace
1594	[BUG]  [BUGGY]  Context.checkState(null, "functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(null, "functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(null, "functionPrivateName  ==  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
1595	[BUG]  [BUGGY]  Context.checkState(currentName!=  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(currentName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(currentName!=  null);	  Context.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	170	None	replace
1596	[BUG]  [BUGGY]  safely(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  name)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1597	[BUG]  [BUGGY]  safely(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  state.getMessage()))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1598	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	88	None	replace
1599	[BUG]  [BUGGY]  checkAndFixInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceName(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	108	None	replace
1600	[BUG]  [BUGGY]  Parchet  pn  =  getPropertyValue(n.getFirstChild());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet  pn  =  getPropertyValue(n.getFirstChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet  pn  =  getPropertyValue(n.getFirstChild());	  Parchet    pn    =    getPropertyPrivate(n.getLastChild());    	non-compiled	[CE]  orphaned  case	148	None	replace
1601	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1602	[BUG]  [BUGGY]  safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    }    	non-compiled	[CE]  orphaned  case	160	None	replace
1603	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  moduleName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1604	[BUG]  [BUGGY]  checkModule(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkModule(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkModule(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1605	[BUG]  [BUGGY]  checkDeclaration(t,  n,  moduleName,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  moduleName,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  moduleName,  properties,  currentType,  interfaceType);	  checkDeclaration(t,    n,    moduleName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	217	None	replace
1606	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  Token.NAME);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
1607	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  checkArgument(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	221	None	replace
1608	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1609	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1610	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getCode(),  properties,  currentProperties,  interfaceName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfaceName);    	non-compiled	[CE]  orphaned  case	42	None	replace
1611	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	State  state  =  n.getFirstChild();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	101	None	replace
1612	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentProperties,  interfacePrivateName,  properties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfacePrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	112	None	replace
1613	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  type);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  type);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	201	None	replace
1614	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1615	[BUG]  [BUGGY]  turnNullPointerException(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  turnNullPointerException(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	turnNullPointerException(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1616	[BUG]  [BUGGY]  Constructor  <?>  c  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  c  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  c  =  n.getFirstChild();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1617	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.VAR);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	91	None	replace
1618	[BUG]  [BUGGY]  checkAndFixAccess(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixAccess(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixAccess(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	205	None	replace
1619	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1620	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  false);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  false);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1621	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  sourceName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  sourceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName,  sourceName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	202	None	replace
1622	[BUG]  [BUGGY]  safeGet(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
1623	[BUG]  [BUGGY]  safeGet(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  1,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
1624	[BUG]  [BUGGY]  safeGet(t,  n,  DEFAULT_NAME_REASON,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  DEFAULT_NAME_REASON,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  DEFAULT_NAME_REASON,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	163	None	replace
1625	[BUG]  [BUGGY]  checkAndFixPermission(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixPermission(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixPermission(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	206	None	replace
1626	[BUG]  [BUGGY]  safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1627	[BUG]  [BUGGY]  safeName(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeName(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGetProp(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	162	None	replace
1628	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(null));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  new  TypeCheck(null));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  new  TypeCheck(null));	  NodeTraversal.traverse(compiler,    new    TypeCheck(this));    	non-compiled	[CE]  orphaned  case	126	None	replace
1629	[BUG]  [BUGGY]  Constructor  <?>  currentType  =  n.getType();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentType  =  n.getType();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentType  =  n.getType();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1630	[BUG]  [BUGGY]  safeName.printStackTrace();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safeName.printStackTrace();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.printStackTrace();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1631	[BUG]  [BUGGY]  aughtException.printStackTrace();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  aughtException.printStackTrace();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.printStackTrace();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1632	[BUG]  [BUGGY]  safeName.setAssignmentTo(n.getType());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeName.setAssignmentTo(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeName.setAssignmentTo(n.getType());	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	44	None	replace
1633	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  node);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  node);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  orphaned  case	52	None	replace
1634	[BUG]  [BUGGY]  State  state  =  t.getState();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  State  state  =  t.getState();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	State  state  =  t.getState();	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
1635	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.EMPTY);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    }    	non-compiled	[CE]  orphaned  case	121	None	replace
1636	[BUG]  [BUGGY]  checkAndFixInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceType(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
1637	[BUG]  [BUGGY]  checkNotNull(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	138	None	replace
1638	[BUG]  [BUGGY]  Parchet.checkNotNull(connector);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(connector);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(connector);	  Parchet.checkNotNull(properties);    	non-compiled	[CE]  orphaned  case	8	None	replace
1639	[BUG]  [BUGGY]  Context.checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkAndFixInterface(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
1640	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
1641	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
1642	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	16	None	replace
1643	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getNativeProperties();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getNativeProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getNativeProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
1644	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getProperties();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getProperties();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getProperties();	  Constructor    <?>    currentProperties    =    getCurrentProperties();    	non-compiled	[CE]  orphaned  case	174	None	replace
1645	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1646	[BUG]  [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1647	[BUG]  [BUGGY]  checkNotFound(t,  n,  state,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state,  properties,  functionPrivateName,  interfaceType);	  checkNotFound(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	61	None	replace
1648	[BUG]  [BUGGY]  safeMultiply(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	94	None	replace
1649	[BUG]  [BUGGY]  Context.checkNotNull(getCurrentNode());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(getCurrentNode());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(getCurrentNode());	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
1650	[BUG]  [BUGGY]  Context.checkState(false, "Unknown  type ");  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(false, "Unknown  type ");  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(false, "Unknown  type ");	  Context.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	171	None	replace
1651	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	35	None	replace
1652	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  checkArgument(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	35	None	replace
1653	[BUG]  [BUGGY]  turnNullPointerException(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  turnNullPointerException(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	turnNullPointerException(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1654	[BUG]  [BUGGY]  turnNullPointerException(t,  n.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  turnNullPointerException(t,  n.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	turnNullPointerException(t,  n.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	75	None	replace
1655	[BUG]  [BUGGY]  checkAndFixInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceType(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	166	None	replace
1656	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
1657	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	56	None	replace
1658	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	218	None	replace
1659	[BUG]  [BUGGY]  safeMultiply(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  1,  properties,  currentProperties,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
1660	[BUG]  [BUGGY]  safeMultiply(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  state.getMessage(),  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	196	None	replace
1661	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1662	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1663	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1664	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1665	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  else  {  return;  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	96	None	replace
1666	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state,  currentName,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
1667	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
1668	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	188	None	replace
1669	[BUG]  [BUGGY]  checkAndFixPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixPermission(t,  n,  INVALID_TYPE,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
1670	[BUG]  [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentNames,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  INVALID_TYPE,  properties,  currentNames,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  INVALID_TYPE,  properties,  currentNames,  interfaceType);	  checkPermission(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	186	None	replace
1671	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  break;  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
1672	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }	  checkState(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	5	None	replace
1673	[BUG]  [BUGGY]  checkName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
1674	[BUG]  [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	156	None	replace
1675	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1676	[BUG]  [BUGGY]  safely())  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely())  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely())  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1677	[BUG]  [BUGGY]  safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  null))  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	87	None	replace
1678	[BUG]  [BUGGY]  checkPermission(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  1,  properties,  currentProperties,  functionPrivateName);	  checkPermission(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	78	None	replace
1679	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  properties,  interfacePrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	158	None	replace
1680	[BUG]  [BUGGY]  Constructor  <?>  current  =  n.getType();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  current  =  n.getType();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  current  =  n.getType();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	89	None	replace
1681	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1682	[BUG]  [BUGGY]  CheckState.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkArgument(n.getType()  ==  Token.FUNCTION);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1683	[BUG]  [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  CheckState.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	6	None	replace
1684	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1685	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.FUNCTION)  {  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1686	[BUG]  [BUGGY]  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getFirstChild().getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1687	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getLastChild().getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getLastChild().getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  checkArgument(n.getLastChild().getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getFirstChild().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
1688	[BUG]  [BUGGY]  checkAndFixInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1689	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  type);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName,  type);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1690	[BUG]  [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  interfaceType,  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	180	None	replace
1691	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
1692	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	195	None	replace
1693	[BUG]  [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	fits.checkInterfaceConflictProperties(t,  n,  currentProperties,  interfacePrivateName,  interfaceType);	  fits.checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	173	None	replace
1694	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceName(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	54	None	replace
1695	[BUG]  [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
1696	[BUG]  [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION,  interfaceType);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
1697	[BUG]  [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
1698	[BUG]  [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.NAME);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.NAME);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.NAME);	  checkState(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	120	None	replace
1699	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1700	[BUG]  [BUGGY]  aughtException.from(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  functionPrivateName,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1701	[BUG]  [BUGGY]  aughtException.from(t,  n,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  functionPrivateName);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	100	None	replace
1702	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  visitFunction(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
1703	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
1704	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
1705	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkArgument(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	208	None	replace
1706	[BUG]  [BUGGY]  state  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  state  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	state  =  n.getFirstChild();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	72	None	replace
1707	[BUG]  [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentInfo,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  INVALID_TYPE,  properties,  currentInfo,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  INVALID_TYPE,  properties,  currentInfo,  interfaceType);	  checkState(t,    n,    INVALID_TYPE,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	104	None	replace
1708	[BUG]  [BUGGY]  safeGetProp(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1709	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1710	[BUG]  [BUGGY]  safeGetProp(t,  n,  DEFAULT_POLICY_TYPE,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGetProp(t,  n,  DEFAULT_POLICY_TYPE,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGetProp(t,  n,  DEFAULT_POLICY_TYPE,  properties,  currentProperties,  interfaceType);	  safeGetProp(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	159	None	replace
1711	[BUG]  [BUGGY]  checkAndFixPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixPermission(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
1712	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  properties,  currentType,  interfaceType);	  checkPermission(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	185	None	replace
1713	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  property,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  property,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  property,  interfaceType,  currentProperties);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1714	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  interfaceType,  properties);	  checkInterfaceName(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	58	None	replace
1715	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
1716	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
1717	[BUG]  [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);	  Parchet.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	7	None	replace
1718	[BUG]  [BUGGY]  checkState(t,  n,  currentType  ==  null,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentType  ==  null,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentType  ==  null,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1719	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentReferenceType,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentReferenceType,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentReferenceType,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	117	None	replace
1720	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(type));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeDesc(type));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeDesc(type));	  NodeTraversal.traverse(compiler,    n,    new    TypeDesc());    	non-compiled	[CE]  orphaned  case	212	None	replace
1721	[BUG]  [BUGGY]  parseFunctionName(t,  n,  baseUri,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  baseUri,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  baseUri,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
1722	[BUG]  [BUGGY]  parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  moduleName,  properties,  currentProperties,  interfaceType);	  parseFunctionName(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	32	None	replace
1723	[BUG]  [BUGGY]  Parchet.checkState(null!=  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(null!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(null!=  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
1724	[BUG]  [BUGGY]  Parchet.checkState(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n.getType()  ==  Token.VAR);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
1725	[BUG]  [BUGGY]  Parchet.checkState(null  ==  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(null  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(null  ==  null);	  Parchet.checkState(n    ==    null);    	non-compiled	[CE]  orphaned  case	13	None	replace
1726	[BUG]  [BUGGY]  checkPermission(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1727	[BUG]  [BUGGY]  checkPermission(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1728	[BUG]  [BUGGY]  checkPermission(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	141	None	replace
1729	[BUG]  [BUGGY]  checkState(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state,  properties,  currentProperties,  functionPrivateName);	  checkState(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	23	None	replace
1730	[BUG]  [BUGGY]  CheckState.checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  CheckState.checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState.checkNotNull(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
1731	[BUG]  [BUGGY]  checkAndClearBuffer(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkAndClearBuffer(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndClearBuffer(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	177	None	replace
1732	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  functionPrivateName,  interfaceType);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
1733	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  functionPrivateName,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  functionPrivateName,  currentProperties);	  checkInterfaceName(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	33	None	replace
1734	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  intertypeType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  intertypeType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  intertypeType);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
1735	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCheck());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ClassCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  ClassCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	48	None	replace
1736	[BUG]  [BUGGY]  checkAndFixInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceName(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	178	None	replace
1737	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    Preconditions.checkArgument(n.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  orphaned  case	181	None	replace
1738	[BUG]  [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  functionType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	21	None	replace
1739	[BUG]  [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  signature))  {  checkInterfaceConflictProperties(t,  n,  interfaceType,  properties,  currentProperties);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	161	None	replace
1740	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1741	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType,  properties);  }  else  {  throw  new  IllegalStateException( " ");  }	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1742	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfaceType,  properties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfaceType,  properties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentProperties,  interfaceType,  properties);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType,    properties);    	non-compiled	[CE]  orphaned  case	98	None	replace
1743	[BUG]  [BUGGY]  checkDeclaration(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  parent,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
1744	[BUG]  [BUGGY]  checkState(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  parent,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  parent,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	123	None	replace
1745	[BUG]  [BUGGY]  safeMultiply(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1746	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1747	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentType,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentType,  properties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	19	None	replace
1748	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  break;  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);  break;	  if(n.getType()    ==    Token.FUNCTION)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    else    {    break;    }    	non-compiled	[CE]  orphaned  case	38	None	replace
1749	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	211	None	replace
1750	[BUG]  [BUGGY]  checkAndFixPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixPermission(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1751	[BUG]  [BUGGY]  checkAndClearBuffer(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndClearBuffer(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndClearBuffer(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1752	[BUG]  [BUGGY]  checkAndCheck(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkAndCheck(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndCheck(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	81	None	replace
1753	[BUG]  [BUGGY]  Context.checkState(n!=  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n!=  null);	  if(n!=    null)    {    checkArgument(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	152	None	replace
1754	[BUG]  [BUGGY]  ParchetState  state  =  getState(n);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState(n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState(n);	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1755	[BUG]  [BUGGY]  ParchetState  state  =  getState(n.getFirstChild());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState(n.getFirstChild());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState(n.getFirstChild());	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1756	[BUG]  [BUGGY]  ParchetState  state  =  super.visitFunction(t,  n);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  super.visitFunction(t,  n);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  super.visitFunction(t,  n);	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1757	[BUG]  [BUGGY]  ParchetState  state  =  getState(n.getType());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ParchetState  state  =  getState(n.getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState  state  =  getState(n.getType());	  ParchetState    state    =    getState();    	non-compiled	[CE]  orphaned  case	145	None	replace
1758	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);	  checkState(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	46	None	replace
1759	[BUG]  [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfacePrivateName);	  checkArgument(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	31	None	replace
1760	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getSourceName(),  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getSourceName(),  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getSourceName(),  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	80	None	replace
1761	[BUG]  [BUGGY]  parseFunctionName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);	  parseFunctionName(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	22	None	replace
1762	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	82	None	replace
1763	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1764	[BUG]  [BUGGY]  checkModifiers(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkModifiers(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkModifiers(t,  n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1765	[BUG]  [BUGGY]  checkArgument(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getSourceName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    state.getSourceName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	220	None	replace
1766	[BUG]  [BUGGY]  ParchetState.checkArgument(null!=  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(null!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(null!=  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
1767	[BUG]  [BUGGY]  ParchetState.checkArgument(null, "functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkArgument(null, "functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkArgument(null, "functionPrivateName  ==  null);	  ParchetState.checkArgument(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	143	None	replace
1768	[BUG]  [BUGGY]  Parchet.checkState(n!=  null,  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(n!=  null,  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(n!=  null,  n.getType()  ==  Token.FUNCTION);	  Parchet.checkState(n!=    null);    	non-compiled	[CE]  orphaned  case	10	None	replace
1769	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  state.getMessage(),  properties,  currentProperties,  interfacePrivateName);	  checkInterfaceConflictProperties(t,    n,    functionType,    properties,    currentProperties,    interfacePrivateName);    	non-compiled	[CE]  orphaned  case	95	None	replace
1770	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()  ==  null);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
1771	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
1772	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
1773	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  ==  1);	  Context.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	197	None	replace
1774	[BUG]  [BUGGY]  checkArgument(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
1775	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getSourceName(),  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	24	None	replace
1776	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  parent,  properties,  currentProperties,  nameNode);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  parent,  properties,  currentProperties,  nameNode);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  parent,  properties,  currentProperties,  nameNode);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
1777	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  interfaceType,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    nameNode);    	non-compiled	[CE]  orphaned  case	136	None	replace
1778	[BUG]  [BUGGY]  parseFunctionName(t,  n,  functionNode,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  parseFunctionName(t,  n,  functionNode,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	parseFunctionName(t,  n,  functionNode,  properties,  currentProperties,  interfacePrivateName);	  parseFunctionName(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	45	None	replace
1779	[BUG]  [BUGGY]  aughtException.from(t,  n,  currentName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  currentName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  currentName,  properties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1780	[BUG]  [BUGGY]  Constructor  <?>  current  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  current  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  current  =  n.getFirstChild();	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	187	None	replace
1781	[BUG]  [BUGGY]  checkNotFound(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state,  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    currentType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	200	None	replace
1782	[BUG]  [BUGGY]  test(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  test(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	test(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1783	[BUG]  [BUGGY]  checkState(t,  n,  1,  properties,  currentType,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  1,  properties,  currentType,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  1,  properties,  currentType,  interfaceType);	  checkState(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	189	None	replace
1784	[BUG]  [BUGGY]  testState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  testState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	testState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    return;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
1785	[BUG]  [BUGGY]  checkState(t,  n,  state.getLineno(),  state.getCharno(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getLineno(),  state.getCharno(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getLineno(),  state.getCharno(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	204	None	replace
1786	[BUG]  [BUGGY]  Context.checkAndFixInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkAndFixInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkAndFixInterface(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1787	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1788	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	73	None	replace
1789	[BUG]  [BUGGY]  Parchet.checkNotNull(getType());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(getType());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(getType());	  Parchet.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	11	None	replace
1790	[BUG]  [BUGGY]  checkArgument(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkInterfaceName(t,    n,    state.getMessage(),    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	179	None	replace
1791	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1792	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state,  properties,  currentProperties,  interfaceType);	  checkInterfaceType(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	130	None	replace
1793	[BUG]  [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
1794	[BUG]  [BUGGY]  checkNotNull(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkNotNull(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	215	None	replace
1795	[BUG]  [BUGGY]  checkAndFixInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterfaceDeclaration(t,  n,  interfaceName,  properties,  currentProperties,  interfaceType);	  checkInterfaceDeclaration(t,    n,    interfaceName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	111	None	replace
1796	[BUG]  [BUGGY]  CheckState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  CheckState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1797	[BUG]  [BUGGY]  checkArgument(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  STRING_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1798	[BUG]  [BUGGY]  checkState(t,  n,  TRUE_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  TRUE_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  TRUE_LITERAL_EXPR_RESULT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    STRING_LITERAL_EXPR_RESULT,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	193	None	replace
1799	[BUG]  [BUGGY]  aughtException.from(t,  n,  1L,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  1L,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  1L,  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
1800	[BUG]  [BUGGY]  aughtException.from(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  aughtException.from(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	aughtException.from(t,  n,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  aughtException.from(t,    n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	194	None	replace
1801	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  intertypeType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  intertypeType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  this,  new  TypeCheck(),  intertypeType);	  NodeTraversal.traverse(compiler,    this,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	49	None	replace
1802	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  interfaceType,  properties,  currentProperties,  functionPrivateName);	  checkInterfaceType(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	69	None	replace
1803	[BUG]  [BUGGY]  safeMultiply(t,  n,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  functionPrivateName,  interfaceType);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
1804	[BUG]  [BUGGY]  safeMultiply(t,  n,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeMultiply(t,  n,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeMultiply(t,  n,  functionPrivateName,  null);	  safeMultiply(t,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	198	None	replace
1805	[BUG]  [BUGGY]  checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	151	None	replace
1806	[BUG]  [BUGGY]  checkAndFixPermission(t,  n,  null,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixPermission(t,  n,  null,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixPermission(t,  n,  null,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    null,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	79	None	replace
1807	[BUG]  [BUGGY]  checkArgument(n.getType()!=  Token.FUNCTION,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()!=  Token.FUNCTION,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()!=  Token.FUNCTION,  interfaceType);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1808	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType,  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION,  interfaceType,  null);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1809	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  name);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  name);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION,  name);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1810	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  signature);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION,  signature);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION,  signature);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1811	[BUG]  [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(n.getType()  ==  Token.FUNCTION  ||  interfaceType  ==  Token.EXPR_RESULT);	  checkArgument(n.getType()    ==    Token.FUNCTION,    interfaceType);    	non-compiled	[CE]  orphaned  case	40	None	replace
1812	[BUG]  [BUGGY]  checkDeclaration(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	124	None	replace
1813	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  currentProperties,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  currentProperties,  properties,  functionPrivateName);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1814	[BUG]  [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkName(t,  n,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkName(t,  n,  functionPrivateName,  properties,  interfaceType);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1815	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  properties,  currentProperties);	  checkInterfaceName(t,    n,    functionPrivateName,    properties,    currentProperties);    	non-compiled	[CE]  orphaned  case	134	None	replace
1816	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
1817	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkArgument(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	93	None	replace
1818	[BUG]  [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1819	[BUG]  [BUGGY]  checkArgument(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1,  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1,  properties,  functionPrivateName,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1820	[BUG]  [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1821	[BUG]  [BUGGY]  checkArgument(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1,  currentProperties,  functionPrivateName,  properties,  interfaceType);	  checkArgument(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	213	None	replace
1822	[BUG]  [BUGGY]  validateName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  validateName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	validateName(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName);	  verifyInterfaceName(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	155	None	replace
1823	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  interfaceType,  properties,  functionPrivateName);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
1824	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  functionPrivateName,  properties,  interfaceType);	  checkState(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    	non-compiled	[CE]  orphaned  case	214	None	replace
1825	[BUG]  [BUGGY]  checkPermission(t,  n,  4,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  4,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  4,  properties,  currentProperties,  interfaceType);	  checkPermission(t,    n,    1L,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	184	None	replace
1826	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceType,  properties,  functionPrivateName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	116	None	replace
1827	[BUG]  [BUGGY]  checkState(t,  state.getMessage(),  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  state.getMessage(),  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  state.getMessage(),  n,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1828	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  FunctionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  FunctionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  FunctionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    state.getMessage(),    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	192	None	replace
1829	[BUG]  [BUGGY]  checkState(t,  n,  state,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
1830	[BUG]  [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentProperties,  properties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentProperties,  properties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
1831	[BUG]  [BUGGY]  checkArgument(t,  n,  status,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  status,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  status,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    status,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	105	None	replace
1832	[BUG]  [BUGGY]  Context.checkNotNull(n,  propertyName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkNotNull(n,  propertyName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkNotNull(n,  propertyName);	  Context.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	172	None	replace
1833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  SortCheck());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  SortCheck());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  SortCheck());	  NodeTraversal.traverse(compiler,    t,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	210	None	replace
1834	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  intertype);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  intertype);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  this,  intertype);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
1835	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  null,  interfaceType);	  NodeTraversal.traverse(compiler,    n,    interfaceType);    	non-compiled	[CE]  orphaned  case	125	None	replace
1836	[BUG]  [BUGGY]  ParchetState.checkNotNull(connector);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ParchetState.checkNotNull(connector);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	ParchetState.checkNotNull(connector);	  ParchetState.checkNotNull(currentProperties);    	non-compiled	[CE]  orphaned  case	146	None	replace
1837	[BUG]  [BUGGY]  Parchet.checkNotNull(n,  propertyName);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkNotNull(n,  propertyName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkNotNull(n,  propertyName);	  Parchet.checkNotNull(propertyName);    	non-compiled	[CE]  orphaned  case	12	None	replace
1838	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  checkArgument(n.getType()!=  Token.FUNCTION);  }  else  {  return  null;  }	  checkArgument(n.getType()!=    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	153	None	replace
1839	[BUG]  [BUGGY]  checkState(t,  n,  state.getLineNumber());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getLineNumber());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getLineNumber());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
1840	[BUG]  [BUGGY]  checkState(t,  n,  state.getReturnCode());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getReturnCode());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getReturnCode());	  checkState(t,    n,    state.getMessage());    	non-compiled	[CE]  orphaned  case	190	None	replace
1841	[BUG]  [BUGGY]  CheckState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  CheckState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	CheckState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
1842	[BUG]  [BUGGY]  state  =  n.getType();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  state  =  n.getType();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	state  =  n.getType();	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  orphaned  case	1	None	replace
1843	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
1844	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Preconditions());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Preconditions());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  Preconditions());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
1845	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecks());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecks());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecks());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	209	None	replace
1846	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
1847	[BUG]  [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	57	None	replace
1848	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1849	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1850	[BUG]  [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  interfaceType,  properties,  currentProperties,  currentName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    currentName);    	non-compiled	[CE]  orphaned  case	92	None	replace
1851	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1852	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName)  {  checkInterfaceConflictProperties(t,  n,  properties,  currentProperties,  interfaceType);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1853	[BUG]  [BUGGY]  safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	83	None	replace
1854	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  null);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1855	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  sourceName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  sourceName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  sourceName);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1856	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  type);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  type);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  currentType,  properties,  interfaceType,  functionPrivateName,  type);	  checkInterfaceConflictProperties(t,    n,    currentType,    properties,    interfaceType,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	20	None	replace
1857	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  n.getProp(Node.SOURCENAME_PROP);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  n.getProp(Node.SOURCENAME_PROP);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  n.getProp(Node.SOURCENAME_PROP);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1858	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  n.getProp(Node.FUNCTION_PROP);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  n.getProp(Node.FUNCTION_PROP);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  n.getProp(Node.FUNCTION_PROP);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	97	None	replace
1859	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getReturnCode(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
1860	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  state.getLineno(),  properties,  currentProperties,  interfaceType);	  checkAndFixInterface(t,    n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	203	None	replace
1861	[BUG]  [BUGGY]  checkState(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  DEFAULT_TITLE_FONT,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
1862	[BUG]  [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  STRING_LITERAL_EXPECTED,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  STRING_LITERAL_EXPECTED,  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    nameNode,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	103	None	replace
1863	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  properties,  currentProperties,  functionPrivateName);	  checkDeclaration(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	26	None	replace
1864	[BUG]  [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceName(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceName(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkInterfaceName(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	129	None	replace
1865	[BUG]  [BUGGY]  safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
1866	[BUG]  [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType)  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
1867	[BUG]  [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(t,  n,  interfaceType)  {  checkConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(t,  n,  interfaceType)  {  checkConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	85	None	replace
1868	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
1869	[BUG]  [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceType(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkInterfaceType(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	68	None	replace
1870	[BUG]  [BUGGY]  checkAndFixAccess(t,  n,  1,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixAccess(t,  n,  1,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixAccess(t,  n,  1,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    1,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	62	None	replace
1871	[BUG]  [BUGGY]  checkArgument(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  state,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1872	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  name,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  name,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  name,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1873	[BUG]  [BUGGY]  checkDeclaration(t,  n,  state,  signature,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  state,  signature,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  state,  signature,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    state,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	216	None	replace
1874	[BUG]  [BUGGY]  checkArgument(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1875	[BUG]  [BUGGY]  checkState(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1876	[BUG]  [BUGGY]  checkPermission(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  currentName,  properties,  interfaceType,  currentProperties);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  currentName,  properties,  interfaceType,  currentProperties);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1877	[BUG]  [BUGGY]  checkArgument(t,  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n.getType()  ==  Token.FUNCTION);	  checkInterfaceConflictProperties(t,    n,    currentName,    properties,    interfaceType,    currentProperties);    	non-compiled	[CE]  orphaned  case	133	None	replace
1878	[BUG]  [BUGGY]  Context.checkAndFixInterface(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkAndFixInterface(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkAndFixInterface(t,  n,  currentName,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
1879	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.VAR)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
1880	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  if(n.getType()  ==  Token.FUNCTION)  {  checkInterfaceConflictProperties(t,  n,  currentName,  properties,  currentProperties,  interfaceType);  }	  if(n.getType()    ==    Token.NAME)    {    checkInterfaceConflictProperties(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	90	None	replace
1881	[BUG]  [BUGGY]  checkState(t,  n,  state.getSource(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSource(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSource(),  properties,  currentProperties,  interfaceType);	  checkState(t,    n,    functionPrivate,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	150	None	replace
1882	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1883	[BUG]  [BUGGY]  safely(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType())  {  checkState(n.getType()  ==  Token.FUNCTION);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1884	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1885	[BUG]  [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(n.getType()  ==  Token.FUNCTION)  {  checkState(n.getType()  ==  Token.FUNCTION);  }	  if(n.getType()    ==    Token.FUNCTION)    {    checkState(n.getType()    ==    Token.FUNCTION);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	2	None	replace
1886	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  currentProperties,  interfaceName,  properties,  functionPrivateType);	  checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceName,    properties,    functionPrivateType);    	non-compiled	[CE]  orphaned  case	113	None	replace
1887	[BUG]  [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterfaceConflictProperties(t,  n,  interfaceType.getName(),  properties,  currentProperties,  interfaceType);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1888	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1889	[BUG]  [BUGGY]  checkAndFixInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkAndFixInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkAndFixInterface(t,  n,  interfaceType.getName(),  properties,  currentProperties,  state);	  checkInterfaceConflictProperties(t,    n,    interfaceType.getName(),    properties,    currentProperties,    state);    	non-compiled	[CE]  orphaned  case	140	None	replace
1890	[BUG]  [BUGGY]  checkInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkInterface(t,  n,  state,  properties,  currentProperties,  interfaceType);	  checkInterface(t,    n,    interfaceType,    properties,    currentProperties,    currentType);    	non-compiled	[CE]  orphaned  case	164	None	replace
1891	[BUG]  [BUGGY]  checkNotNull(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  checkNotNull(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotNull(t,  n,  this.functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1892	[BUG]  [BUGGY]  checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkDeclaration(t,  n,  this.functionType,  properties,  currentProperties,  interfaceType);	  checkDeclaration(t,    n,    this.functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	28	None	replace
1893	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getMessage(),  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getMessage(),  properties,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1894	[BUG]  [BUGGY]  checkPermission(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkPermission(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkPermission(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);	  checkPermission(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	142	None	replace
1895	[BUG]  [BUGGY]  checkNotFound(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  STRING_LITERAL_EXPECTED_ERROR,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
1896	[BUG]  [BUGGY]  checkNotFound(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  nameNode,  properties,  currentProperties,  interfaceType);	  checkNotFound(t,    n,    currentName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	176	None	replace
1897	[BUG]  [BUGGY]  checkState(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getCode(),  properties,  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1898	[BUG]  [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSourceName(),  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSourceName(),  properties,  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1899	[BUG]  [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getMessage(),  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1900	[BUG]  [BUGGY]  checkState(t,  n,  state.getSource(),  properties,  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n,  state.getSource(),  properties,  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n,  state.getSource(),  properties,  functionPrivateName,  interfaceType);	  checkState(t,    n,    currentProperties,    properties,    functionPrivateName,    interfaceType);    	non-compiled	[CE]  orphaned  case	149	None	replace
1901	[BUG]  [BUGGY]  Parchet.checkState(null, "functionPrivateName  ==  null);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(null, "functionPrivateName  ==  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(null, "functionPrivateName  ==  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
1902	[BUG]  [BUGGY]  Parchet.checkState(null, "functionPrivateName!=  null);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Parchet.checkState(null, "functionPrivateName!=  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Parchet.checkState(null, "functionPrivateName!=  null);	  Parchet.checkState(functionPrivateName!=    null);    	non-compiled	[CE]  orphaned  case	9	None	replace
1903	[BUG]  [BUGGY]  turnNullPointerException(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  turnNullPointerException(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	turnNullPointerException(t,  n,  currentType,  properties,  currentProperties,  interfaceType);	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentType,    properties,    currentProperties,    interfaceType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	17	None	replace
1904	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionPrivateName,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionPrivateName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionPrivateName,  interfaceType);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1905	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionName,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionName,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  functionName,  interfaceType);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1906	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getString());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getString());  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(functionPrivateName.getString(),  n.getString());	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1907	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  signature);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  signature);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  getCurrentProperty(n.getString(),  signature);	  Constructor    <?>    currentProperties    =    getCurrentProperty(n.getString(),    functionPrivateName);    	non-compiled	[CE]  orphaned  case	175	None	replace
1908	[BUG]  [BUGGY]  checkArgument(t,  n!=  null,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n!=  null,  state.getMessage(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n!=  null,  state.getMessage(),  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
1909	[BUG]  [BUGGY]  checkState(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  checkState(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(t,  n!=  null,  currentType,  properties,  currentProperties,  interfaceType);	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
1910	[BUG]  [BUGGY]  if(n!=  null)  {  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n!=  null)  {  checkArgument(t,  n,  currentType,  properties,  currentProperties,  interfaceType);  }	  checkArgument(t,    n!=    null,    currentType,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	167	None	replace
1911	[BUG]  [BUGGY]  checkNotFound(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);	  checkNotFound(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	127	None	replace
1912	[BUG]  [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  state.getMessage(),  properties,  currentProperties,  functionPrivateName);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
1913	[BUG]  [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkNotFound(t,  n,  interfaceType,  properties,  currentProperties,  functionPrivateName,  null);	  checkNotFound(t,    n,    interfaceType,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	59	None	replace
1914	[BUG]  [BUGGY]  checkState(n,  FunctionNode.FUNCTION_STATEMENT,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  FunctionNode.FUNCTION_STATEMENT,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  FunctionNode.FUNCTION_STATEMENT,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1915	[BUG]  [BUGGY]  checkState(n,  FunctionNode.FUNCTION_NOT_ASCII,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  FunctionNode.FUNCTION_NOT_ASCII,  functionPrivateName,  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  FunctionNode.FUNCTION_NOT_ASCII,  functionPrivateName,  properties,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1916	[BUG]  [BUGGY]  checkState(n,  state.getSourceName(),  n,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  checkState(n,  state.getSourceName(),  n,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkState(n,  state.getSourceName(),  n,  currentProperties,  interfaceType);	  checkState(n,    functionPrivateName,    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	34	None	replace
1917	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1918	[BUG]  [BUGGY]  checkArgument(t,  state.getName(),  properties,  currentProperties,  interfaceType);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  state.getName(),  properties,  currentProperties,  interfaceType);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  state.getName(),  properties,  currentProperties,  interfaceType);	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1919	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	if(n.getType()  ==  Token.NAME)  {  checkArgument(n,  state.getName(),  properties,  currentProperties,  interfaceType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  checkArgument(n,    state.getName(),    properties,    currentProperties,    interfaceType);    	non-compiled	[CE]  orphaned  case	207	None	replace
1920	[BUG]  [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  functionPrivateName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1921	[BUG]  [BUGGY]  safeGet(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  safeGet(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safeGet(n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1922	[BUG]  [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  interfaceType))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  functionPrivateName);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1923	[BUG]  [BUGGY]  safely(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  safely(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	safely(t,  n,  sourceName))  {  checkInterfaceConflictProperties(t,  n,  currentProperties,  interfaceType);  }	  safeGet(t,    n,    functionPrivateName))    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    interfaceType);    }    	non-compiled	[CE]  orphaned  case	86	None	replace
1924	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  n.getFirstChild();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  n.getFirstChild();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1925	[BUG]  [BUGGY]  Constructor  <?>  currentProperties  =  n.getParent();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>  currentProperties  =  n.getParent();  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	Constructor  <?>  currentProperties  =  n.getParent();	  if(n.getType()    ==    Token.FUNCTION)    {    checkInterfaceConflictProperties(t,    n,    currentProperties,    functionPrivateName,    properties,    interfaceType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  orphaned  case	102	None	replace
1926	[BUG]  [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  interfaceType,  properties,  currentProperties,  functionName);	  checkInterfaceConflictProperties(t,    n,    interfaceType,    properties,    currentProperties,    functionName);    	non-compiled	[CE]  orphaned  case	154	None	replace
1927	[BUG]  [BUGGY]  checkArgument(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  moduleName,  properties,  currentProperties,  functionPrivateName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1928	[BUG]  [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  checkArgument(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);  [BUGGY]      properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1664	1665	1	replace	checkArgument(t,  n,  1,  properties,  currentProperties,  interfacePrivateName);	  checkArgument(t,    n,    interfaceName,    properties,    currentProperties,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	182	None	replace
