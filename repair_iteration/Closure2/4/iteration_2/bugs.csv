bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
2	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
3	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
4	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
5	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
7	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
8	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
9	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	8	None	replace
10	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	8	None	replace
11	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	8	None	replace
12	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	8	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck());	      	non-compiled	[CE]  orphaned  case	7	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  orphaned  case  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  orphaned  case	7	None	replace
15	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());	      	non-compiled	[CE]  orphaned  case	7	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  orphaned  case  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null);	      	non-compiled	[CE]  orphaned  case	7	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n);  [CE]  orphaned  case  [FE]                            NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n);	      	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  functionPrivateName);	      	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName));  [CE]  orphaned  case  [FE]                                NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName));	      	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
21	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
23	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
24	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
25	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
26	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
27	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
28	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	4	None	replace
29	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	4	None	replace
30	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	4	None	replace
31	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	5	None	replace
33	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	5	None	replace
34	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	3	None	replace
35	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	3	None	replace
36	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
37	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	9	None	replace
38	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
39	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
40	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentProperties.putAll(  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentProperties.putAll(  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentProperties.putAll(	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
41	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
42	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
43	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  currentProperties);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  functionPrivateName,  currentProperties);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
45	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                NullPointerException    [CONTEXT]      [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	5	None	replace
46	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	5	None	replace
47	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	3	None	replace
48	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	3	None	replace
49	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [CE]  orphaned  case  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));	      	non-compiled	[CE]  orphaned  case	7	None	replace
50	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));	      	non-compiled	[CE]  orphaned  case	7	None	replace
51	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [CE]  orphaned  case  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));	      	non-compiled	[CE]  orphaned  case	7	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [CE]  orphaned  case  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));	      	non-compiled	[CE]  orphaned  case	7	None	replace
53	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	4	None	replace
54	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
55	[BUG]  [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	8	None	replace
56	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException    [CONTEXT]      [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	6	None	replace
57	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]        NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
58	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
59	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]          NullPointerException    [CONTEXT]      [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
60	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]            NullPointerException    [CONTEXT]      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	2	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    NullPointerException    [CONTEXT]      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  orphaned  case	7	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants());  [CE]  orphaned  case  [FE]                      NullPointerException    [CONTEXT]      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants());  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVariants());	      	non-compiled	[CE]  orphaned  case	7	None	replace
63	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  orphaned  case  [FE]                        NullPointerException    [CONTEXT]      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	      	non-compiled	[CE]  orphaned  case	7	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                          NullPointerException    [CONTEXT]      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  orphaned  case	7	None	replace
65	[BUG]  [BUGGY]  LinkedList  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]      [BUGGY]  LinkedList  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [BUGGY]    =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedList  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	4	None	replace
