bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
2	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
3	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
4	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
5	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
6	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.isEmpty()))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
7	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
8	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
9	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
10	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
11	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(true);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
12	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    TreeSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	9	None	replace
13	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
14	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
15	[BUG]  [BUGGY]  final  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
16	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(properties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(properties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(properties);	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
17	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
18	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
19	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
20	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
21	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
22	[BUG]  [BUGGY]  Map.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Map.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  this);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  this);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  false);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  false);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  t);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  t);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
28	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
29	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
30	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
31	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
32	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
33	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
34	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
35	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
36	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION);	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
37	[BUG]  [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
38	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	47	None	replace
39	[BUG]  [BUGGY]  final  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	47	None	replace
40	[BUG]  [BUGGY]  final  LinkedHashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  LinkedHashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  LinkedHashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	47	None	replace
41	[BUG]  [BUGGY]  final  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	47	None	replace
42	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(0);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	31	None	replace
43	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(1);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	31	None	replace
44	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	31	None	replace
45	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(1);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	31	None	replace
46	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(true);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
47	[BUG]  [BUGGY]  ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
48	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
49	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  t);	  NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  orphaned  case	17	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties);	  NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  orphaned  case	17	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  type);	  NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  orphaned  case	17	None	replace
53	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	4	None	replace
54	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	4	None	replace
55	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	4	None	replace
56	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(true);    	non-compiled	[CE]  orphaned  case	37	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
58	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNodeTraversal());	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
59	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  this);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  this);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
60	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNodeTraversal());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNodeTraversal());	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
61	[BUG]  [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ConstructorTraversal.traverse(compiler,  n,  new  FunctionNodeTraversal());	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
62	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	58	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  this);	  LinkedList    <    String,    ObjectType>    currentProperties    =    new    LinkedList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	65	None	replace
64	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNode(true));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
66	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(true));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(true));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNode(true));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
67	[BUG]  [BUGGY]  Constructor.traverse(compiler,  n,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor.traverse(compiler,  n,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Constructor.traverse(compiler,  n,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
68	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Context.traverse(compiler,  n,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.traverse(compiler,  n,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
69	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(3);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(3);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(3);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(2);    	non-compiled	[CE]  orphaned  case	32	None	replace
70	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(5);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(5);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(5);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(2);    	non-compiled	[CE]  orphaned  case	32	None	replace
71	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	3	None	replace
72	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
73	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
75	[BUG]  [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
76	[BUG]  [BUGGY]  Constructor.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Constructor.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Constructor.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
77	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  false);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  false);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
78	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  null);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  null);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
79	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	54	None	replace
80	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	54	None	replace
81	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	54	None	replace
82	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	54	None	replace
83	[BUG]  [BUGGY]  AnnotatedMap.Entry  <  String,  ObjectType>  currentProperties  =  new  AnnotatedMap();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  AnnotatedMap.Entry  <  String,  ObjectType>  currentProperties  =  new  AnnotatedMap();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	AnnotatedMap.Entry  <  String,  ObjectType>  currentProperties  =  new  AnnotatedMap();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	26	None	replace
84	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	26	None	replace
85	[BUG]  [BUGGY]  final  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	10	None	replace
86	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(8);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(8);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(8);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	33	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
93	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
94	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.putAll(  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.putAll(  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.putAll(	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
95	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
96	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
97	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
98	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
99	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll(	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
100	[BUG]  [BUGGY]  static  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  static  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  final    Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
101	[BUG]  [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);	  LinkedHashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	55	None	replace
102	[BUG]  [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(false);	  LinkedHashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	55	None	replace
103	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    LinkedHashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	35	None	replace
104	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    LinkedHashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	35	None	replace
105	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    LinkedHashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	35	None	replace
106	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
107	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
108	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedSet(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedSet(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedSet(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
109	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Sets.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Sets.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  Sets.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
110	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  TreeMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  TreeMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  TreeMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
111	[BUG]  [BUGGY]  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
112	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	25	None	replace
113	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  LinkedHashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  LinkedHashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  LinkedHashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	25	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivate);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivate);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  functionPrivate);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  type);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  type);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  false);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  false);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivateName,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this.functionPrivateName,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivate);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivate);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivate);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  properties);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  properties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  functionPrivateName,  properties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  state.getSourceName(),  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  state.getSourceName(),  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  state.getSourceName(),  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateType);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateType);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  functionPrivateType);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  t);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  t);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  this);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  this);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  currentProperties));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  currentProperties));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  currentProperties));	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  null));  [CE]  orphaned  case  [FE]                                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  null));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  null));	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  functionType));  [CE]  orphaned  case  [FE]                                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  functionType));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  functionType));	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  true));  [CE]  orphaned  case  [FE]                                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  true));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  true));	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  false);  [CE]  orphaned  case  [FE]                                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  false);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
132	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	22	None	replace
133	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	22	None	replace
134	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
135	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  functionPrivateName);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
136	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  null);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
137	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  true);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  true);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
138	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  false);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  false);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
139	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  getFunctionPrivateName());  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  getFunctionPrivateName());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  getFunctionPrivateName());	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  orphaned  case	63	None	replace
140	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.size()  >  0))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	38	None	replace
141	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	38	None	replace
142	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains( "function ")))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	38	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  functionPrivateName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  functionPrivateName);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getSourceName());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeVariants());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  null);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeVariants(),  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeFunctions());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  HashMap  <  String,  ObjectType>());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
154	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this,  functionPrivateName));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this,  functionPrivateName));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this,  functionPrivateName));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNode(this));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
156	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(this));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(this));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNode(this));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
157	[BUG]  [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(this));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ConstructorTraversal.traverse(compiler,  n,  new  FunctionNode(this));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function: "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionName "));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionName "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionName "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  functionPrivate "));  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  functionPrivate "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  functionPrivate "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  object "));  [CE]  orphaned  case  [FE]                                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  object "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Function  object "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  functionPrivateName);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  orphaned  case	16	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  currentProperties,  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  currentProperties,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  orphaned  case	16	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  functionPrivate);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  functionPrivate);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  functionPrivate);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  orphaned  case	16	None	replace
167	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
168	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
169	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.NAME);	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
170	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
171	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME);  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.NAME);  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
172	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Context.checkState(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
173	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
174	[BUG]  [BUGGY]  Constructor  <  String,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <  String,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Constructor  <  String,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	56	None	replace
175	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	56	None	replace
176	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(n);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	56	None	replace
177	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
178	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
179	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(2);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(2);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(2);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
180	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(4);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
181	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(true);	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	36	None	replace
182	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
183	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
184	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(t);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(t);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
185	[BUG]  [BUGGY]  Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorMap  <  String,  ObjectType>();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
186	[BUG]  [BUGGY]  Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Constructor  <?>,  ObjectType>  currentProperties  =  new  ConstructorHashMap  <  String,  ObjectType>();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
187	[BUG]  [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
188	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
189	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  properties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  properties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  properties);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
190	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
191	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  null);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  null);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
192	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(2);	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(1);    	non-compiled	[CE]  orphaned  case	46	None	replace
193	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  LinkedHashSet  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
194	[BUG]  [BUGGY]  ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
195	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
196	[BUG]  [BUGGY]  List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
197	[BUG]  [BUGGY]  Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
198	[BUG]  [BUGGY]  final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	42	None	replace
199	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(true);    	non-compiled	[CE]  orphaned  case	5	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivateName);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this.functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	18	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  functionPrivateName);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  sourceName,  functionPrivateName);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	18	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  null);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  functionPrivateName,  null);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	18	None	replace
203	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(1);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	30	None	replace
204	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
205	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(1);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
206	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(2);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(2);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(2);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
207	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
208	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
209	[BUG]  [BUGGY]  if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionPrivateName!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
210	[BUG]  [BUGGY]  final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
211	[BUG]  [BUGGY]  Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
212	[BUG]  [BUGGY]  List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	8	None	replace
213	[BUG]  [BUGGY]  finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
214	[BUG]  [BUGGY]  finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
215	[BUG]  [BUGGY]  finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	finallyQualifiedMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
216	[BUG]  [BUGGY]  finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  newlyQualifiedName(String.class);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  newlyQualifiedName(String.class);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	finallyQualifiedName  <  String,  ObjectType>  currentProperties  =  newlyQualifiedName(String.class);	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.FUNCTION);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||!NodeUtil.isFunctionObjectCall(n));	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION,  functionPrivateName);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
220	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(false);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
221	[BUG]  [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	List  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(false);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	6	None	replace
222	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(5);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(5);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(5);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
223	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(8);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(8);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(8);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
224	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  functionPrivateName);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  functionPrivateName);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
225	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  this);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(this),  this);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
226	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(this));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(this));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(this));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
227	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  java.util.ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  java.util.ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  java.util.ArrayList  <  String,  ObjectType>();	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	54	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  this);  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  functionPrivateName,  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  functionPrivateName,  this);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName);    	non-compiled	[CE]  orphaned  case	18	None	replace
229	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  currentProperties);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  currentProperties);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  this);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
231	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  true);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  true);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class  <?>());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Class  <?>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  Class  <?>());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Preconditions());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  Preconditions());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  Preconditions());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
235	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
236	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(0);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
237	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(1);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(1);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>(1);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	27	None	replace
238	[BUG]  [BUGGY]  final  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
239	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>();	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
240	[BUG]  [BUGGY]  Collections.  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Collections.  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collections.  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  List    <    String,    ObjectType>    currentProperties    =    new    LinkedList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	29	None	replace
241	[BUG]  [BUGGY]  final  List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  List  <  String,  ObjectType>  currentProperties  =  new  LinkedList  <  String,  ObjectType>();	  List    <    String,    ObjectType>    currentProperties    =    new    LinkedList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	29	None	replace
242	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
243	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName.cloneTree());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName.cloneTree());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName.cloneTree());	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
244	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>(functionPrivateName);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	56	None	replace
245	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  ArrayMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  ArrayMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  ArrayMap  <  String,  ObjectType>();	  Map    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	25	None	replace
246	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  final    Set    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	10	None	replace
247	[BUG]  [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();	  LinkedHashMap    <    String,    ObjectType>    currentProperties    =    new    LinkedHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	55	None	replace
248	[BUG]  [BUGGY]  final  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
249	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName);	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
250	[BUG]  [BUGGY]  &&  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  &&  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	&&  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	22	None	replace
251	[BUG]  [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  Set  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);	  Set    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	31	None	replace
252	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Collection    <    String,    ObjectType>    currentProperties    =    new    LinkedHashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	35	None	replace
253	[BUG]  [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
254	[BUG]  [BUGGY]  if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
255	[BUG]  [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
256	[BUG]  [BUGGY]  &&  currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  &&  currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	&&  currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
257	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  this.currentProperties.putAll(  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  this.currentProperties.putAll(  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  this.currentProperties.putAll(	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
258	[BUG]  [BUGGY]  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
259	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  previousProperties.putAll(  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  previousProperties.putAll(  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  previousProperties.putAll(	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
260	[BUG]  [BUGGY]  @SuppressWarnings( "unchecked ")  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  @SuppressWarnings( "unchecked ")  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	@SuppressWarnings( "unchecked ")	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
261	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();currentProperties.putAll(  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();currentProperties.putAll(  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();currentProperties.putAll(	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
262	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  this,  new  FunctionNodeTraversal());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  this,  new  FunctionNodeTraversal());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  this,  new  FunctionNodeTraversal());	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNodeTraversal());    	non-compiled	[CE]  orphaned  case	15	None	replace
263	[BUG]  [BUGGY]  final  int  functionPrivateName  =  n.getType();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  int  functionPrivateName  =  n.getType();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  int  functionPrivateName  =  n.getType();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
264	[BUG]  [BUGGY]  final  int  functionPrivateName  =  n.getFirstChild().getType();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  final  int  functionPrivateName  =  n.getFirstChild().getType();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  int  functionPrivateName  =  n.getFirstChild().getType();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
265	[BUG]  [BUGGY]  finallyQualifiedName  <  String>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  finallyQualifiedName  <  String>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	finallyQualifiedName  <  String>  currentProperties  =  new  LinkedHashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
266	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  n,  this);  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  final  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  NodeTraversal.traverse(compiler,  n,  this);	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
267	[BUG]  [BUGGY]  final  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  NodeTraversal.traverse(compiler,  n,  new  TypeCheck());	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
268	[BUG]  [BUGGY]  final  int  type  =  n.getType();  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  final  int  type  =  n.getType();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  int  type  =  n.getType();	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
269	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(functionPrivateName);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(functionPrivateName);	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
270	[BUG]  [BUGGY]  TreeSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  TreeSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	TreeSet  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    TreeSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	9	None	replace
271	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
272	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.contains(functionPrivateName)))  {	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
273	[BUG]  [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||(currentProperties!=  null  &&  currentProperties.containsKey(functionPrivateName)))  {	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(n,  new  TypeCheck());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(n,  new  TypeCheck());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  this).traverse(n,  new  TypeCheck());	  List    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	12	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  IllegalArgumentException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  NullPointerException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  UnsupportedOperationException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  IllegalStateException( " "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  false);	  NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  orphaned  case	17	None	replace
280	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  currentProperties,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  currentProperties,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  currentProperties,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
281	[BUG]  [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	FunctionNodeTraversal.traverse(compiler,  n,  null,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(false));    	non-compiled	[CE]  orphaned  case	50	None	replace
282	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n,  functionPrivateName);  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n,  functionPrivateName);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n,  functionPrivateName);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
283	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n.cloneTree());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n.cloneTree());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n.cloneTree());	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
284	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivate,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.functionPrivate,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this.functionPrivate,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
288	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
289	[BUG]  [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
290	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  Collections.synchronizedMap(new  HashSet  <  String,  ObjectType>());	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.NAME);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(functionPrivateName.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  null);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  null);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
293	[BUG]  [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	33	None	replace
294	[BUG]  [BUGGY]  LinkedList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  LinkedList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	LinkedList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>();	  LinkedList    <    String,    ObjectType>    currentProperties    =    new    LinkedList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	65	None	replace
295	[BUG]  [BUGGY]  final  int  functionPrivateName  =  n.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  final  int  functionPrivateName  =  n.getFirstChild().getLastChild().getString();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	final  int  functionPrivateName  =  n.getFirstChild().getLastChild().getString();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  null);  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  null);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  null);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  true);  [CE]  orphaned  case  [FE]                                      NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  true);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName),  true);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  TypeCheck());	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  orphaned  case	14	None	replace
299	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  }	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(false);    	non-compiled	[CE]  orphaned  case	3	None	replace
300	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentPro  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentPro  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentPro	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
301	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentPro  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentPro  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties);  currentPro	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
302	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties,    currentProperties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	40	None	replace
303	[BUG]  [BUGGY]  ArrayHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  ArrayHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayHashMap  <  String,  ObjectType>  currentProperties  =  new  ArrayHashMap  <  String,  ObjectType>();	  HashMap    <    String,    ObjectType>    currentProperties    =    new    ArrayHashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	24	None	replace
304	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>()).clone();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>()).clone();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  Collections.synchronizedMap(new  HashMap  <  String,  ObjectType>()).clone();	  Map    <    String,    ObjectType>    currentProperties    =    Collections.synchronizedMap(new    HashMap    <    String,    ObjectType>());    	non-compiled	[CE]  orphaned  case	2	None	replace
305	[BUG]  [BUGGY]  StaticBucketMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  StaticBucketMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	StaticBucketMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
306	[BUG]  [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	static  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);	  static    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	20	None	replace
307	[BUG]  [BUGGY]  if(n!=  null)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(n!=  null)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n!=  null)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(n);  }	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(n);    	non-compiled	[CE]  orphaned  case	57	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
309	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(false));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNode(false));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(this));    	non-compiled	[CE]  orphaned  case	51	None	replace
310	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	4	None	replace
311	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	4	None	replace
312	[BUG]  [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(6);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(6);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(6);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	33	None	replace
313	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeMap  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    TreeMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	11	None	replace
314	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  ||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	||  n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
315	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivate	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
316	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()!=  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivate    	non-compiled	[CE]  orphaned  case	23	None	replace
317	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
318	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
319	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
320	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
321	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.GETPROP)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	21	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeAnnotations());  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeAnnotations());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeAnnotations());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecks());  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeChecks());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeChecks());	  NodeTraversal.traverse(compiler,    n,    new    TypeVariants());    	non-compiled	[CE]  orphaned  case	62	None	replace
324	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(n);	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
325	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
326	[BUG]  [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	HashSet  <  String,  ObjectType>  currentProperties  =  new  HashSet  <  String,  ObjectType>(0);	  HashSet    <    String,    ObjectType>    currentProperties    =    new    HashSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	34	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	61	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  false));  [CE]  orphaned  case  [FE]                                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  false));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(functionPrivateName,  false));	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck(functionPrivateName));    	non-compiled	[CE]  orphaned  case	19	None	replace
330	[BUG]  [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Maps.  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(4);	  Maps.    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	48	None	replace
331	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
332	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "function "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
333	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
334	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
335	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "name "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "name "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "name "))  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(n.getType()    ==    Token.NAME)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	60	None	replace
336	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.VAR)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(n.getType()    ==    Token.FUNCTION)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	22	None	replace
337	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties);  currentProperties.putAll	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName,    properties);    currentProperties.putAll(    	non-compiled	[CE]  orphaned  case	39	None	replace
338	[BUG]  [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  functionType);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  functionType);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(functionPrivateName,  functionType);	  Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(functionPrivateName);    	non-compiled	[CE]  orphaned  case	43	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName,  currentProperties);  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  functionPrivateName,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  currentProperties);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  this,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  currentProperties);  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  sourceName,  currentProperties);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  sourceName,  currentProperties);	  NodeTraversal.traverse(compiler,    n,    functionPrivateName,    currentProperties);    	non-compiled	[CE]  orphaned  case	44	None	replace
342	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  final    Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
343	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  Map  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  else  {  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties	  final    Map    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	1	None	replace
344	[BUG]  [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Collection  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(4);	  Collection    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	28	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  this);  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  this);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  null,  this);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  orphaned  case	16	None	replace
346	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
347	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(currentProperties    ==    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	59	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionParameters "));  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionParameters "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "FunctionParameters "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  type "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  object  type "));  [CE]  orphaned  case  [FE]                                  NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  object  type "));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( "Unknown  object  type "));	  NodeTraversal.traverse(compiler,    n,    new    RuntimeException(   "   "));    	non-compiled	[CE]  orphaned  case	52	None	replace
351	[BUG]  [BUGGY]  if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionPrivateName  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
352	[BUG]  [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(functionType!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    else    {    checkInterfaceConflictProperties(t,    n,    functionPrivateName    	non-compiled	[CE]  orphaned  case	41	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  new  HashMap  <  String,ObjectType>());  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  new  HashMap  <  String,ObjectType>());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  new  HashMap  <  String,ObjectType>());	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	NodeTraversal.traverse(compiler,  n,  new  TypeCheck(),  context);	  NodeTraversal.traverse(compiler,    n,    new    TypeCheck());    	non-compiled	[CE]  orphaned  case	13	None	replace
355	[BUG]  [BUGGY]  Set  <  String>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  Set  <  String>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Set  <  String>  currentProperties  =  new  HashMap  <  String,  ObjectType>(false);	  HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(true);    	non-compiled	[CE]  orphaned  case	5	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getMessage());  [CE]  orphaned  case  [FE]                              NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getMessage());  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  t.getMessage());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]                                NullPointerException      [CONTEXT]        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	64	None	replace
358	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [CE]  orphaned  case  [FE]                    NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	45	None	replace
359	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [CE]  orphaned  case  [FE]                      NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	45	None	replace
360	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	45	None	replace
361	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(n.getType()  ==  Token.NAME)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(0);  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	45	None	replace
362	[BUG]  [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }  [CE]  orphaned  case  [FE]                            NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties  ==  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>(1);  }	  final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>(0);    	non-compiled	[CE]  orphaned  case	45	None	replace
363	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [CE]  orphaned  case  [FE]                        NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName));	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
364	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [CE]  orphaned  case  [FE]                          NullPointerException      [CONTEXT]        [BUGGY]  Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	Traversal.traverse(compiler,  n,  new  FunctionNode(functionPrivateName),  t);	  FunctionNodeTraversal.traverse(compiler,    n,    new    FunctionNode(functionPrivateName));    	non-compiled	[CE]  orphaned  case	49	None	replace
365	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [CE]  orphaned  case  [FE]            NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  TreeSet  <  String,  ObjectType>();	  Set    <    String,    ObjectType>    currentProperties    =    new    TreeSet    <    String,    ObjectType>();    	non-compiled	[CE]  orphaned  case	9	None	replace
366	[BUG]  [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(6);  [CE]  orphaned  case  [FE]                  NullPointerException      [CONTEXT]        [BUGGY]  ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(6);  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	ArrayList  <  String,  ObjectType>  currentProperties  =  new  ArrayList  <  String,  ObjectType>(6);	  ArrayList    <    String,    ObjectType>    currentProperties    =    new    ArrayList    <    String,    ObjectType>(4);    	non-compiled	[CE]  orphaned  case	53	None	replace
367	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  [CE]  orphaned  case  [FE]              NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	38	None	replace
368	[BUG]  [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }  [CE]  orphaned  case  [FE]                NullPointerException      [CONTEXT]        [BUGGY]  if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }  [BUGGY]      =  new  HashMap<String,  ObjectType>();  for  (ObjectType  interfaceType  :  functionType.getExtendedInterfaces())  {  currentProperties.clear();  checkInterfaceConflictProperties(t,  n,  functionPrivateName,  properties,  currentProperties,  interfaceType);  properties.putAll(currentProperties);  }  }  }  }  [CLASS]  TypeCheck  [METHOD]  visitFunction  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  	projects/Closure2/src/com/google/javascript/jscomp/TypeCheck.java	0.24253562503633297	1660	1661	1	replace	if(currentProperties!=  null)  {  final  HashMap  <  String,  ObjectType>  currentProperties  =  new  HashMap  <  String,  ObjectType>();  for  (ObjectType  interfaceType  :  currentProperties.getExtendedInterfaces())  {  currentProperties.clear();  }	  if(currentProperties!=    null)    {    final    HashMap    <    String,    ObjectType>    currentProperties    =    new    HashMap    <    String,    ObjectType>();    }    	non-compiled	[CE]  orphaned  case	38	None	replace
