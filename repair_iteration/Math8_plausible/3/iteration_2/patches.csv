bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(sampleSize,  2);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(sampleSize,  2);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	int  sampleSize  =  randomGenerator.nextInt(sampleSize,  2);	  int    sampleSize    =    randomGenerator.nextInt(sampleSize,    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	int  sampleSize  =  randomGenerator.nextInt(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);	  int    sampleSize    =    randomGenerator.nextInt(LocalizedFormats.NUMBER_OF_SAMPLES);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  false);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  false);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  false);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize,    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize  +  1);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize  +  1);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize,    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(singletons.size()  ==  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	add	if(singletons.size()  ==  1)  {	  if    (sampleSize    ==    0)    {    If    (sampleSize    ==    0)    {    	compilable	  [FE]  ArrayStoreException  	13	1	replace
6	[BUG]  [BUGGY]  if(singletons.size()  ==  1)  {  [FE]  ArrayStoreException  [FE]        ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(singletons.size()  ==  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(singletons.size()  ==  1)  {	  if    (sampleSize    ==    0)    {    If    (sampleSize    ==    0)    {    	compilable	  [FE]  ArrayStoreException  	13	1	replace
7	[BUG]  [BUGGY]  if(sampleSize  >  0)  {  if(sampleSize  >  0)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  >  0)  {  if(sampleSize  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    >    0)    {    if(sampleSize  >  0)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
8	[BUG]  [BUGGY]  if(sampleSize  >  0)  {  If(sampleSize  >  0)  {  [CE]  ';'  expected  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  >  0)  {  If(sampleSize  >  0)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    >    0)    {    If(sampleSize  >  0)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize,  false);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize,  false);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize,  false);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(SampleSize,    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize  ==  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize  ==  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    ==    1)    {    if(sampleSize  ==  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
13	[BUG]  [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize!=  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize!=  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    ==    1)    {    if(sampleSize!=  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
14	[BUG]  [BUGGY]  int  sampleSize  =  random.nextInt(sampleSize,  2);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  int  sampleSize  =  random.nextInt(sampleSize,  2);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	int  sampleSize  =  random.nextInt(sampleSize,  2);	  int    sampleSize    =    random.nextInt(sampleSize,    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  if  (sampleSize  <  1)  {  if  (sampleSize  <  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayStoreException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if  (sampleSize  <  1)  {  if  (sampleSize  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if    (sampleSize    <    1)    {    if  (sampleSize  <  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
16	[BUG]  [BUGGY]  if  (sampleSize  <  1)  {  If  (sampleSize  <  1)  {  [CE]  ';'  expected  [FE]      ArrayStoreException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if  (sampleSize  <  1)  {  If  (sampleSize  <  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if    (sampleSize    <    1)    {    If  (sampleSize  <  1)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
17	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize,  sampleSize);  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize,  sampleSize);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize,  sampleSize);	  RandomGenerator    randomGenerator    =    getRandomGenerator(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize  +  1);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  getRandomGenerator(sampleSize  +  1);	  RandomGenerator    randomGenerator    =    getRandomGenerator(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(sampleSize,  0);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  int  sampleSize  =  randomGenerator.nextInt(sampleSize,  0);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	int  sampleSize  =  randomGenerator.nextInt(sampleSize,  0);	  int    sampleSize    =    randomGenerator.nextInt(sampleSize,    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  int  sampleSize  =  random.nextInt(sampleSize,  0);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  int  sampleSize  =  random.nextInt(sampleSize,  0);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	int  sampleSize  =  random.nextInt(sampleSize,  0);	  int    sampleSize    =    random.nextInt(sampleSize,    1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize!=  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	add	if(sampleSize!=  1)  {	  if    (sampleSize    ==    0)    {    if    (sampleSize!=    0)    {    	compilable	  [FE]  ArrayStoreException  	11	1	replace
23	[BUG]  [BUGGY]  if(sampleSize!=  1)  {  [FE]  ArrayStoreException  [FE]          ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize!=  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize!=  1)  {	  if    (sampleSize    ==    0)    {    if    (sampleSize!=    0)    {    	compilable	  [FE]  ArrayStoreException  	11	1	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize  +  1);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize  +  1);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize  +  1);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(SampleSize,    sampleSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
25	[BUG]  [BUGGY]  if(sampleSize  ==  1)  {  If(sampleSize  ==  1)  {  [CE]  ';'  expected  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  ==  1)  {  If(sampleSize  ==  1)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    ==    1)    {    If(sampleSize  ==  1)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
26	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);  [BUGGY]      if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize  ==  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {      [BUGGY]  if(sampleSize  ==  1)  {  if(sampleSize  ==  2)  {  [BUGGY]      throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	if(sampleSize    ==    1)    {    if(sampleSize  ==  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
