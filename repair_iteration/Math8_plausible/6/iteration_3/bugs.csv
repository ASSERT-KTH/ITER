bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayList  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  ArrayList  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	ArrayList  out[i]  =  out[singletons.size()  ];	  out[i]    =    out[singletons.size()    ];    ArrayList    out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ']'  expected	28	None	replace
2	[BUG]  [BUGGY]  List  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  List  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	List  out[i]  =  out[singletons.size()  ];	  out[i]    =    out[singletons.size()    ];    ArrayList    out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ']'  expected	28	None	replace
3	[BUG]  [BUGGY]  out[i]  =  sample(out,  sampleSize,  i);  [CE]  no  suitable  method  found  for  sample(T[],int,int)  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  sampleSize,  i);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  sampleSize,  i);	  out[i]    =    sample(sampleSize,    i);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T[],int,int)	20	None	replace
4	[BUG]  [BUGGY]  out[i]  =  sample(sampleSize,  sampleSize,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(sampleSize,  sampleSize,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(sampleSize,  sampleSize,  randomGenerator);	  out[i]    =    sample(sampleSize,    i);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	20	None	replace
5	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ].;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  ].;  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.size()  ].;	  out[i]    =    out[singletons.size()    ];    out[i]    =    out[singletons.size()    ].;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
6	[BUG]  [BUGGY]  (T[])out.get(i).remove(sampleSize,  sampleSize);  [CE]  not  a  statement  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])out.get(i).remove(sampleSize,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.get(i).remove(sampleSize,  sampleSize);	  (T[])out.get(i).remove(sampleSize);    	non-compiled	[CE]  not  a  statement	19	None	replace
7	[BUG]  [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(sampleSize,  sampleSize);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(sampleSize,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])out.get(i).toArray(sampleSize,  sampleSize);	  Sample    sample    =(T[])singletons.get(i).toArray(out,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  probabilities);  [CE]  no  suitable  method  found  for  sample(T,double[])  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  probabilities);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  probabilities);	  out[i]    =    sample(out[i],    rng);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T,double[])	30	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  +  1];  out[i]  =  out[singletons.size()  +  1];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	out[i]    =    out[singletons.size()    +    1];    out[i]  =  out[singletons.size()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
10	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  +  1];  out[i]  =  out[singletons.size()  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  +  1];  out[i]  =  out[singletons.size()  +  1];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    +    1];    out[i]  =  out[singletons.size()  +  1];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
11	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  +  1];  int  out[i]  =  out[singletons.size()  +  1];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  +  1];  int  out[i]  =  out[singletons.size()  +  1];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    +    1];    int  out[i]  =  out[singletons.size()  +  1];	  	non-compiled	[CE]  ']'  expected	3	None	add
12	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  +  1];  sample[i]  =  out[singletons.size()  +  1];  [CE]  cannot  find  symbol  sample  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  +  1];  sample[i]  =  out[singletons.size()  +  1];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    +    1];    sample[i]  =  out[singletons.size()  +  1];	  	non-compiled	[CE]  cannot  find  symbol  sample	3	None	add
13	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probs);  [CE]  not  a  statement  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probs);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probs);	  (T[])singletons.get(i).invoke(out,    sampleSize,    randomGenerator);    	non-compiled	[CE]  not  a  statement	11	None	replace
14	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probabilitys);  [CE]  not  a  statement  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probabilitys);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(out,  sampleSize,  randomGenerator,  probabilitys);	  (T[])singletons.get(i).invoke(out,    sampleSize,    randomGenerator);    	non-compiled	[CE]  not  a  statement	11	None	replace
15	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
16	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.size()  ];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	1	add
17	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(0).getClass()  ];  out[i]  =  out[singletons.size()  ];  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(0).getClass()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.get(0).getClass()  ];  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  incompatible  types	14	None	add
18	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(i).getClass()  ];  out[i]  =  out[singletons.size()  ];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(i).getClass()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.get(i).getClass()  ];  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  incompatible  types	14	None	add
19	[BUG]  [BUGGY]  out[i]  =  sample(out[i].doubleValue(),  sampleSize);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i].doubleValue(),  sampleSize);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i].doubleValue(),  sampleSize);	  out[i]    =    sample(singletons[i].doubleValue(),    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].doubleValue(),  sampleSize,  randomGenerator);  [CE]  array  required,  but  List<T>  found  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(singletons[i].doubleValue(),  sampleSize,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].doubleValue(),  sampleSize,  randomGenerator);	  out[i]    =    sample(singletons[i].doubleValue(),    sampleSize);    	non-compiled	[CE]  array  required,  but  List<T>  found	2	None	replace
21	[BUG]  [BUGGY]  int  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  int  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	int  out[i]  =  out[singletons.size()  ];	  out[i]    =    out[singletons.size()    ];    int    out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ']'  expected	16	None	replace
22	[BUG]  [BUGGY]  Sample  sample  =(T[])out.get(sampleSize);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  Sample  sample  =(T[])out.get(sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])out.get(sampleSize);	  Sample    sample    =(T[])out.get(i);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
23	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  ];  sample[i]  =  out[singletons.get(i);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  ];  sample[i]  =  out[singletons.get(i);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.size()  ];  sample[i]  =  out[singletons.get(i);	  out[i]    =    out[singletons.size()    ];    sample[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ']'  expected	17	None	replace
24	[BUG]  [BUGGY]  out[i]  =  out[sampleSize.length  ];  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[sampleSize.length  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[sampleSize.length  ];	  out[i]    =    out[singletons.size()    ];    out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
25	[BUG]  [BUGGY]  out[i]  =  sample[singletons.get(i)];  [CE]  cannot  find  symbol  sample  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample[singletons.get(i)];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample[singletons.get(i)];	  out[i]    =    out[singletons.get(i)];    	non-compiled	[CE]  cannot  find  symbol  sample	27	None	replace
26	[BUG]  [BUGGY]  out[i]  =  sample(out,  sampleSize,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  sampleSize,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  sampleSize,  randomGenerator);	  out[i]    =    sample(out,    i);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	21	None	replace
27	[BUG]  [BUGGY]  out[i]  =  sample(out,  sampleSize);  [CE]  no  suitable  method  found  for  sample(T[],int)  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  sampleSize);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  sampleSize);	  out[i]    =    sample(sampleSize);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T[],int)	32	None	replace
28	[BUG]  [BUGGY]  out[i]  =  sample(out.length  ]);  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out.length  ]);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out.length  ]);	  out[i]    =    sample(singletons.size()    ]);    	non-compiled	[CE]  ')'  expected	34	None	replace
29	[BUG]  [BUGGY]  out[i]  =  sample(out.size()  ]);  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out.size()  ]);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out.size()  ]);	  out[i]    =    sample(singletons.size()    ]);    	non-compiled	[CE]  ')'  expected	34	None	replace
30	[BUG]  [BUGGY]  out[i]  =  sample(out,  singletons[i].getClass());  [CE]  array  required,  but  List<T>  found  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  singletons[i].getClass());  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  singletons[i].getClass());	  out[i]    =    sample(out,    samples[i].getClass());    	non-compiled	[CE]  array  required,  but  List<T>  found	33	None	replace
31	[BUG]  [BUGGY]  out[i]  =  sample(out[i].getClass(),  sampleSize);  [CE]  no  suitable  method  found  for  sample(Class<CAP#1>,int)  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i].getClass(),  sampleSize);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i].getClass(),  sampleSize);	  out[i]    =    sample(out[i].getClass());    	non-compiled	[CE]  no  suitable  method  found  for  sample(Class<CAP#1>,int)	5	None	replace
32	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  randomGenerator.getClass());  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  randomGenerator.getClass());  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  randomGenerator.getClass());	  out[i]    =    sample(out[i].getClass());    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	5	None	replace
33	[BUG]  [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize,  randomGenerator);  [CE]  not  a  statement  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize,  randomGenerator);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).remove(out,  sampleSize,  randomGenerator);	  (T[])singletons.get(i).remove(out,    sampleSize);    	non-compiled	[CE]  not  a  statement	18	None	replace
34	[BUG]  [BUGGY]  out[i]  =  sample(singletons[i].getClass(),  sampleSize,  randomGenerator);  [CE]  array  required,  but  List<T>  found  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(singletons[i].getClass(),  sampleSize,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons[i].getClass(),  sampleSize,  randomGenerator);	  out[i]    =    sample(singletons[i].getClass(),    sampleSize);    	non-compiled	[CE]  array  required,  but  List<T>  found	6	None	replace
35	[BUG]  [BUGGY]  (T[])out.get(i  +  1);  [CE]  not  a  statement  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])out.get(i  +  1);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.get(i  +  1);	  (T[])singletons.get(i    +    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
36	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  sampleSize,  randomGenerator);	  out[i]    =    sample(out[i],    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	24	None	replace
37	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  rng);  [CE]  cannot  find  symbol  rng  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  rng);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  sampleSize,  rng);	  out[i]    =    sample(out[i],    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  rng	24	None	replace
38	[BUG]  [BUGGY]  sample(out,  sampleSize.nextInt(sampleSize));  [CE]  int  cannot  be  dereferenced  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  sample(out,  sampleSize.nextInt(sampleSize));  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	sample(out,  sampleSize.nextInt(sampleSize));	  sample(out,    randomGenerator.nextInt(sampleSize));    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
39	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  randomGenerator.doubleValue());  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  randomGenerator.doubleValue());  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  randomGenerator.doubleValue());	  out[i]    =    sample(out[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	1	None	replace
40	[BUG]  [BUGGY]  (T[])out.get(i).remove(in,  sampleSize);  [CE]  not  a  statement  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])out.get(i).remove(in,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])out.get(i).remove(in,  sampleSize);	  (T[])singletons.get(i).remove(in,    sampleSize);    	non-compiled	[CE]  not  a  statement	29	None	replace
41	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  random);  [CE]  no  suitable  method  found  for  sample(T,RandomGenerator)  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  random);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  random);	  out[i]    =    sample(out[i],    randomGenerator);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T,RandomGenerator)	23	None	replace
42	[BUG]  [BUGGY]  (T[])singletons.get(i).remove(sampleSize);  [CE]  not  a  statement  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).remove(sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).remove(sampleSize);	  (T[])out.get(i).remove(sampleSize);    	non-compiled	[CE]  not  a  statement	19	None	replace
43	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(out,  randomGenerator,  sampleSize);  [CE]  not  a  statement  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).invoke(out,  randomGenerator,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(out,  randomGenerator,  sampleSize);	  (T[])singletons.get(i).invoke(out,    sampleSize,    randomGenerator);    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  (T[])singletons.get(i).invoke(randomGenerator,  sampleSize,  sampleSize);  [CE]  not  a  statement  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).invoke(randomGenerator,  sampleSize,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).invoke(randomGenerator,  sampleSize,  sampleSize);	  (T[])singletons.get(i).invoke(out,    sampleSize,    randomGenerator);    	non-compiled	[CE]  not  a  statement	11	None	replace
45	[BUG]  [BUGGY]  sample(out,  randomGenerator.nextInt(i));  [CE]  cannot  find  symbol  randomGenerator  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  sample(out,  randomGenerator.nextInt(i));  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	sample(out,  randomGenerator.nextInt(i));	  sample(in,    randomGenerator.nextInt(sampleSize));    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	35	None	replace
46	[BUG]  [BUGGY]  sample(out,  singletons.nextInt(sampleSize));  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  sample(out,  singletons.nextInt(sampleSize));  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	sample(out,  singletons.nextInt(sampleSize));	  sample(out,    randomGenerator.nextInt(sampleSize));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
47	[BUG]  [BUGGY]  out[i]  =  sample(out,  randomGenerator.sample(singletons[i].getClass());  [CE]  ')'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  randomGenerator.sample(singletons[i].getClass());  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  randomGenerator.sample(singletons[i].getClass());	  out[i]    =    sample(out,    samples[i].getClass());    	non-compiled	[CE]  ')'  expected	33	None	replace
48	[BUG]  [BUGGY]  out[i]  =  sample(out,  i,  sampleSize);  [CE]  no  suitable  method  found  for  sample(T[],int,int)  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  i,  sampleSize);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  i,  sampleSize);	  out[i]    =    sample(out,    i);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T[],int,int)	21	None	replace
49	[BUG]  [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize  -  1);  [CE]  not  a  statement  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).remove(out,  sampleSize  -  1);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).remove(out,  sampleSize  -  1);	  (T[])singletons.get(i).remove(out,    sampleSize);    	non-compiled	[CE]  not  a  statement	18	None	replace
50	[BUG]  [BUGGY]  out[i]  =  sample(out[i].doubleValue(),  randomGenerator);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i].doubleValue(),  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i].doubleValue(),  randomGenerator);	  out[i]    =    sample(out[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
51	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[Singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [CE]  cannot  find  symbol  Singletons  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[Singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[Singletons.size()  ];  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  cannot  find  symbol  Singletons	14	None	add
52	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(i);  out[i]  =  out[singletons.size()  ];  [CE]  ']'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  out[singletons.get(i);  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.get(i);  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  ']'  expected	14	None	add
53	[BUG]  [BUGGY]  out[i]  =  out[singletons.get(i);  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.get(i);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  out[singletons.get(i);	  out[i]    =    out[singletons.size()    ];    out[i]    =    out[singletons.size()    ];    	non-compiled	[CE]  ']'  expected	15	None	replace
54	[BUG]  [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(singletons,  sampleSize);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  Sample  sample  =(T[])out.get(i).toArray(singletons,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	Sample  sample  =(T[])out.get(i).toArray(singletons,  sampleSize);	  Sample    sample    =(T[])singletons.get(i).toArray(out,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
55	[BUG]  [BUGGY]  out[i]  =  samples[singletons.get(i)];  [CE]  cannot  find  symbol  samples  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  samples[singletons.get(i)];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  samples[singletons.get(i)];	  out[i]    =    out[singletons.get(i)];    	non-compiled	[CE]  cannot  find  symbol  samples	27	None	replace
56	[BUG]  [BUGGY]  out[i]  =  out[singletons.size()  +  1];  ArrayIndexOutOfBoundsException  out[i]  =  out[singletons.size()  +  1];  [CE]  ']'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  out[singletons.size()  +  1];  ArrayIndexOutOfBoundsException  out[i]  =  out[singletons.size()  +  1];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]    =    out[singletons.size()    +    1];    ArrayIndexOutOfBoundsException  out[i]  =  out[singletons.size()  +  1];	  	non-compiled	[CE]  ']'  expected	3	None	add
57	[BUG]  [BUGGY]  out[i]  =  sample(out,  i,  randomGenerator);  [CE]  cannot  find  symbol  randomGenerator  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out,  i,  randomGenerator);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out,  i,  randomGenerator);	  out[i]    =    sample(out,    i);    	non-compiled	[CE]  cannot  find  symbol  randomGenerator	21	None	replace
58	[BUG]  [BUGGY]  out[i]  =  sample(singletons,  i);  [CE]  no  suitable  method  found  for  sample(List<T>,int)  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(singletons,  i);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons,  i);	  out[i]    =    sample(out,    i);    	non-compiled	[CE]  no  suitable  method  found  for  sample(List<T>,int)	21	None	replace
59	[BUG]  [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  singletons);  [CE]  no  suitable  method  found  for  sample(T,int,List<T>)  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(out[i],  sampleSize,  singletons);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(out[i],  sampleSize,  singletons);	  out[i]    =    sample(out[i],    sampleSize);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T,int,List<T>)	24	None	replace
60	[BUG]  [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  sample[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [CE]  cannot  find  symbol  sample  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]    =    out[singletons.size()    ];    out[i]  =  out[singletons.size()  ];  out[i]  =  sample[singletons.size()  ];  out[i]  =  out[singletons.size()  ];  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]        =        out[singletons.size()        ];        out[i]    =    out[singletons.size()    ];    out[i]  =  sample[singletons.size()  ];  out[i]  =  out[singletons.size()  ];	  	non-compiled	[CE]  cannot  find  symbol  sample	14	None	add
61	[BUG]  [BUGGY]  out[i]  =  sample(in,  sampleSize);  [CE]  cannot  find  symbol  in  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(in,  sampleSize);  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(in,  sampleSize);	  out[i]    =    sample(sampleSize,    i);    	non-compiled	[CE]  cannot  find  symbol  in	20	None	replace
62	[BUG]  [BUGGY]  (T[])singletons.get(i).add(out,  sampleSize);  [CE]  not  a  statement  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  (T[])singletons.get(i).add(out,  sampleSize);  [BUGGY]      out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	(T[])singletons.get(i).add(out,  sampleSize);	  (T[])singletons.get(i).remove(in,    sampleSize);    	non-compiled	[CE]  not  a  statement	29	None	replace
63	[BUG]  [BUGGY]  out[i]  =  sample(singletons.get(i));  [CE]  no  suitable  method  found  for  sample(T)  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {      [BUGGY]  out[i]  =  sample(singletons.get(i));  [BUGGY]      }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	out[i]  =  sample(singletons.get(i));	  out[i]    =    sample(singletons.size()    ]);    	non-compiled	[CE]  no  suitable  method  found  for  sample(T)	34	None	replace
