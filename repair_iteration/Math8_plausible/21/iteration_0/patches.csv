bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  [BUGGY]  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	probs[i]  =  sample.getValue()  +  1;	probs[i]  =  sample.getValue();  	compilable	  [FE]  AssertionError  	41	9	replace
2	[BUG]  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  [FE]  AssertionError  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  [BUGGY]  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getValue()  +  1;	probs[i]  =  sample.getValue();  	compilable	  [FE]  AssertionError  	41	9	replace
3	[BUG]  [BUGGY]  [FE]  MathArithmeticException  [FE]      ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    [BUGGY]  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	  	probs[i]  =  sample.getValue();  	compilable	  [FE]  MathArithmeticException  	41	13	replace
4	[BUG]  [BUGGY]    [FE]  MathArithmeticException  [FE]      ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    [BUGGY]  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	  	probs[i]  =  sample.getValue();  	compilable	  [FE]  MathArithmeticException  	41	13	replace
5	[BUG]  [BUGGY]    Pair  <  T,  Double>  sample  =  samples.get(i);  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    Pair  <  T,  Double>  sample  =  samples.get(i);  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    Pair  <  T,  Double>  sample  =  samples.get(i);		non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	42	None	add
6	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size());  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size());		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	42	None	add
7	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs[]  =  sample.getValue();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    Pair  <  T,  Double>  probs[]  =  sample.getValue();  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    Pair  <  T,  Double>  probs[]  =  sample.getValue();		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	42	None	add
8	[BUG]  [BUGGY]  probs[i]  =  sample.getKey();  [CE]  incompatible  types  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]  probs[i]  =  sample.getKey();  [BUGGY]  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getKey();	probs[i]  =  sample.getValue();  	non-compiled	[CE]  incompatible  types	41	None	replace
9	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();		non-compiled	[CE]  cannot  find  symbol	42	None	add
10	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getValue();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]      ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getValue();  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    Pair  <  T,  Double>  probs  =  sample.getValue();		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	42	None	add
11	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getKey());  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getKey());  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getKey());		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	42	None	add
12	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException  [CONTEXT]  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();  [BUGGY]  probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	42	None	add
