bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getKey();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getKey();  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs[]  =  sample.getKey();	      Pair    <    T,    Double>    probs[]    =    sample.getValue();    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	7	None	replace
2	[BUG]  [BUGGY]  if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }  [CE]  illegal  start  of  expression  [FE]    MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }  [CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]      MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getValue();  }	      	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	4	None	replace
4	[BUG]  [BUGGY]      if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }  [CE]  illegal  start  of  expression  [FE]    MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]      if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	        if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng);  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng);	      RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	12	None	replace
6	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getValue());  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getValue());  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs  =  new  Pair  <  T,  Double>(sample.getValue());	      Pair    <    T,    Double>    probs    =    new    Pair    <    T,    Double>(sample.getKey());    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	11	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng);  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
8	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  ArrayStoreException  	1	1	add
9	[BUG]  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  ArrayStoreException  	1	1	add
10	[BUG]  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  sample.getValue()  +  1;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  probs[i]  =  sample.getValue()  +  1;  sample.getValue()  +  1;  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]    =    sample.getValue()    +    1;    sample.getValue()  +  1;	  	non-compiled	[CE]  not  a  statement	1	None	add
11	[BUG]  [BUGGY]  probs[i]  =  sample.getValue()  +  1;  sample  =  sample.getValue()  +  1;  [CE]  cannot  assign  a  value  to  final  variable  sample  [FE]        AssertionError    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  probs[i]  =  sample.getValue()  +  1;  sample  =  sample.getValue()  +  1;  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]    =    sample.getValue()    +    1;    sample  =  sample.getValue()  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sample	1	None	add
12	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i  +  1);  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i  +  1);	      Pair    <    T,    Double>    sample    =    samples.get(i);    	non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	5	None	replace
13	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbability();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getProbability();  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs  =  sample.getProbability();	      Pair    <    T,    Double>    probs    =    sample.getValue();    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	10	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size()  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]          ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size()  -  1);  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(singletons.size()  -  1);	      RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator    <    T>(singletons.size());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size());  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size());	      RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator    <    T>(singletons.size());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
16	[BUG]  [BUGGY]  if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }  [CE]  illegal  start  of  expression  [FE]    MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]      if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }  [CE]  illegal  start  of  expression  [FE]    MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]      if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	        if(probs  ==  null)  {  for(int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample);  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample);	      RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
19	[BUG]  [BUGGY]      for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getValue();  }  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    MathArithmeticException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]      for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getValue();  }  [BUGGY]    }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	        for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getValue();  }	  	non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	add
20	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getProbability();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }    [BUGGY]  Pair  <  T,  Double>  probs[]  =  sample.getProbability();  [BUGGY]    probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs[]  =  sample.getProbability();	      Pair    <    T,    Double>    probs[]    =    sample.getValue();    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	7	None	replace
