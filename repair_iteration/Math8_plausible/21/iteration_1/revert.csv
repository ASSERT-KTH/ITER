projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getValue()+1;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>sample=samples.get(i);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGenerator<T>randomGenerator=newRandomGenerator<T>(singletons.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs[]=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getKey();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGeneratorrandomGenerator=RandomGenerator.getInstance();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs=newPair<T,Double>(sample.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGenerator<T>randomGenerator=RandomGenerator.getInstance();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs[]=sample.getKey();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98if(probs==null){for(inti=0;i<samples.size();i++){probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98for(inti=0;i<samples.size();i++){probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98if(probs==null){for(inti=0;i<samples.size();i++){probs[i]=sample.getKey();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGenerator<T>randomGenerator=RandomGenerator.getInstance(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs=newPair<T,Double>(sample.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGeneratorrandomGenerator=RandomGenerator.getInstance(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getValue()+1;probs[i]=sample.getValue()+1;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getValue()+1;sample.getValue()+1;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98probs[i]=sample.getValue()+1;sample=sample.getValue()+1;
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>sample=samples.get(i+1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs=sample.getProbability();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGenerator<T>randomGenerator=newRandomGenerator<T>(singletons.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGenerator<T>randomGenerator=newRandomGenerator<T>(tests.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98if(probs==null){for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98if(probs==null){for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getKey();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98RandomGeneratorrandomGenerator=RandomGenerator.getInstance(sample);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98for(Pair<T,Double>sample:samples.values()){probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java98Pair<T,Double>probs[]=sample.getProbability();
