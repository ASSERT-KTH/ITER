bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	5	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(probs);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(probs);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(probs);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(rng);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	5	None	replace
3	[BUG]  [BUGGY]  probs[i]  =  sample.getValue();  sample  =  sample.getValue();  [CE]  cannot  assign  a  value  to  final  variable  sample  [FE]            AssertionError      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]  =  sample.getValue();  sample  =  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getValue();  sample  =  sample.getValue();	  probs[i]    =    sample.getValue()    +    1;    sample    =    sample.getValue()    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sample	11	None	replace
4	[BUG]  [BUGGY]  probs[i]  =  sample.getKey()  +  1;  sample  =  sample.getValue()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]  =  sample.getKey()  +  1;  sample  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getKey()  +  1;  sample  =  sample.getValue()  +  1;	  probs[i]    =    sample.getValue()    +    1;    sample    =    sample.getValue()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
5	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          AssertionError      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]  =  sample.getValue();  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	probs[i]  =  sample.getValue();  sample.getValue();	  probs[i]    =    sample.getValue()    +    1;    sample.getValue()    +    1;    	compilable	  [FE]  ArrayStoreException  	10	1	replace
6	[BUG]  [BUGGY]  probs[i]  =  sample.getValue();  sample.getValue();  [FE]  ArrayStoreException  [FE]          AssertionError      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]  =  sample.getValue();  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getValue();  sample.getValue();	  probs[i]    =    sample.getValue()    +    1;    sample.getValue()    +    1;    	compilable	  [FE]  ArrayStoreException  	10	1	replace
7	[BUG]  [BUGGY]  probs[i]  =  sample.getKey();  sample.getValue()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]  =  sample.getKey();  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]  =  sample.getKey();  sample.getValue()  +  1;	  probs[i]    =    sample.getValue()    +    1;    sample.getValue()    +    1;    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getKey();	          if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	17	None	replace
9	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  ArrayStoreException  	8	1	add
10	[BUG]  [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  ArrayStoreException  	8	1	add
11	[BUG]  [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  Sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [CE]  cannot  find  symbol  Sample  [FE]      ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  Sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[i]  =  Sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Sample	8	None	add
12	[BUG]  [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getKey()  +  1;  probs[i]  =  sample.getValue()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[i]  =  sample.getKey()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getKey()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	add
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(probs.size());  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(probs.size());  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(probs.size());	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator    <    T>(singletons.size()    -    1);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	replace
14	[BUG]  [BUGGY]  for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getKey();  }  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getKey();  }  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	for(Pair  <  T,  Double>  sample  :  samples.values())  {  probs[i]  =  sample.getKey();  }	          for(Pair    <    T,    Double>    sample    :    samples.values())    {    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	19	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  -  1);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  -  1);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator    <    T>(tests.size());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }  [CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	for(int  i  =  0;  i  <  samples.size();  i++)  {  probs[i]  =  sample.getKey();  }	          if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	4	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sample.size();  i++)  {  probs[i]  =  sample.getValue();  }  [CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  for(int  i  =  0;  i  <  sample.size();  i++)  {  probs[i]  =  sample.getValue();  }  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	for(int  i  =  0;  i  <  sample.size();  i++)  {  probs[i]  =  sample.getValue();  }	  for(int    i    =    0;    i    <    samples.size();    i++)    {    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  probs);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(rng);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  sample);  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  sample);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(rng,  sample);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(rng);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  [CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  sample  =  samples.get(i);  probs[i]  =  sample.getValue();	  if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  variable  sample  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	16	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[0]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[0]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  AssertionError  	8	7	add
22	[BUG]  [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[0]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [FE]  AssertionError  [FE]    ArrayStoreException    [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  probs[i]    =    sample.getValue()    +    1;    probs[i]  =  sample.getValue()  +  1;  probs[0]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	probs[i]        =        sample.getValue()        +        1;        probs[i]    =    sample.getValue()    +    1;    probs[0]  =  sample.getValue()  +  1;  probs[i]  =  sample.getValue()  +  1;	  	compilable	  [FE]  AssertionError  	8	7	add
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample,  rng);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample,  rng);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sample,  rng);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sample);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  +  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  +  1);  [BUGGY]      probs[i]  =  sample.getValue();  }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator  <  T>(tests.size()  +  1);	  RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator    <    T>(tests.size());    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	15	None	replace
25	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getKey();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  Pair  <  T,  Double>  probs  =  sample.getKey();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs  =  sample.getKey();	          if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	17	None	replace
26	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs[i]  =  sample.getValue();  [CE]  ']'  expected  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  Pair  <  T,  Double>  probs[i]  =  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs[i]  =  sample.getValue();	  if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  ']'  expected	16	None	replace
27	[BUG]  [BUGGY]  trys[i]  =  sample.getKey();  [CE]  cannot  find  symbol  trys  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  trys[i]  =  sample.getKey();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	trys[i]  =  sample.getKey();	          if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  cannot  find  symbol  trys	4	None	replace
28	[BUG]  [BUGGY]  Pair  <  T,  Double>  probs[i]  =  sample.getKey();  [CE]  ']'  expected  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  Pair  <  T,  Double>  probs[i]  =  sample.getKey();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	Pair  <  T,  Double>  probs[i]  =  sample.getKey();	          if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    final    Pair    <    T,    Double>    sample    =    samples.get(i);    probs[i]    =    sample.getKey();    }    	non-compiled	[CE]  ']'  expected	17	None	replace
29	[BUG]  [BUGGY]  trys[i]  =  sample.getValue();  [CE]  cannot  find  symbol  trys  [FE]        MathArithmeticException      [CONTEXT]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }      [BUGGY]  trys[i]  =  sample.getValue();  [BUGGY]      }  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	trys[i]  =  sample.getValue();	  if(probs    ==    null)    {    for(int    i    =    0;    i    <    samples.size();    i++)    {    probs[i]    =    sample.getValue();    }    	non-compiled	[CE]  cannot  find  symbol  trys	2	None	replace
