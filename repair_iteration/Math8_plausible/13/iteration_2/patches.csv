bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this(rng,  null,  null,  probabilities,  samples);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  probabilities,  samples);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  probabilities,  samples);	  this(rng,    null,    null,    samples);    	non-compiled	[CE]  ';'  expected	6	None	replace
2	[BUG]  [BUGGY]  this(rng,  null,  null,  samples,  probabilities);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  samples,  probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  samples,  probabilities);	  this(rng,    null,    null,    samples);    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  this(rng,  null,  null,  samples,  random);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  samples,  random);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  samples,  random);	  this(rng,    null,    null,    sample);    	non-compiled	[CE]  ';'  expected	28	None	replace
4	[BUG]  [BUGGY]  this(rng,  null,  null,  sample,  random);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  sample,  random);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  sample,  random);	  this(rng,    null,    null,    sample);    	non-compiled	[CE]  ';'  expected	28	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(0);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(0);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(0);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateDistribution();  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateDistribution();  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  rng.generateDistribution();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  super(rng,  samples,  null,  probabilities);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  null,  probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  null,  probabilities);	  super(rng,    samples,    null);    	non-compiled	[CE]  ';'  expected	21	None	replace
8	[BUG]  [BUGGY]  super(rng,  samples,  null,  Probabilities);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  null,  Probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  null,  Probabilities);	  super(rng,    samples,    null);    	non-compiled	[CE]  ';'  expected	21	None	replace
9	[BUG]  [BUGGY]  super(rng,  samples,  Probabilities);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  Probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  Probabilities);	  super(rng,    samples,    random);    	non-compiled	[CE]  ';'  expected	2	None	replace
10	[BUG]  [BUGGY]  super(rng,  samples,  probableities);  [CE]  ';'  expected  [FE]                    ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  probableities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  probableities);	  super(rng,    samples,    random);    	non-compiled	[CE]  ';'  expected	2	None	replace
11	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(tests.size()  -  1));  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(tests.size()  -  1));  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(tests.size()  -  1));	  this(rng,    new    Pair    <    T,    Double>(tests.size()));    	non-compiled	[CE]  ';'  expected	22	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRawClass());  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRawClass());  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRawClass());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getKey());    	non-compiled	[CE]  ';'  expected	8	None	replace
13	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  randomGenerator  {  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  randomGenerator  {  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  randomGenerator  {	  throws    NotPositiveException,    MathArithmeticException,    DESCreteDistributionException    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey(),  samples);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey(),  samples);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getKey(),  samples);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getValue(),    samples);    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  probs);  [CE]  ';'  expected  [FE]                    ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  probs);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue(),  probs);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getValue(),    samples);    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  super(rng,  samples,  probs);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  probs);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  probs);	  super(rng,    samples,    probabilities);    	non-compiled	[CE]  ';'  expected	1	None	replace
17	[BUG]  [BUGGY]  super(rng,  0,  probabilities);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  0,  probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  0,  probabilities);	  super(rng,    samples,    probabilities);    	non-compiled	[CE]  ';'  expected	1	None	replace
18	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  double[];  [CE]  <identifier>  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  double[];  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  double[];	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
19	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  samples.size();  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  samples.size();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  samples.size();	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException;    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator,  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator,  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator,	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException,    randomGenerator    {    	non-compiled	[CE]  ';'  expected	26	None	replace
21	[BUG]  [BUGGY]  this.samples  =  new  LinkedList  <  Pair  <  T,  Double  >>  samples;  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.samples  =  new  LinkedList  <  Pair  <  T,  Double  >>  samples;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.samples  =  new  LinkedList  <  Pair  <  T,  Double  >>  samples;	  this.samples    =    new    ArrayList    <    Pair    <    T,    Double    >>    samples;    	non-compiled	[CE]  ';'  expected	30	None	replace
22	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  samples);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  samples);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs),  samples);	  this(rng,    new    Pair    <    T,    Double>(probs),    random);    	non-compiled	[CE]  ';'  expected	23	None	replace
23	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  sample);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  sample);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs),  sample);	  this(rng,    new    Pair    <    T,    Double>(probs),    random);    	non-compiled	[CE]  ';'  expected	23	None	replace
24	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples,  random));  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(samples,  random));  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(samples,  random));	  this(rng,    new    Pair    <    T,    Double>(samples));    	non-compiled	[CE]  ';'  expected	12	None	replace
25	[BUG]  [BUGGY]  this.random  =  RandomGenerator.getRandomGenerator(rng,  samples);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  RandomGenerator.getRandomGenerator(rng,  samples);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  RandomGenerator.getRandomGenerator(rng,  samples);	  this.random    =    RandomGenerator.getRandomGenerator(rng);    	non-compiled	[CE]  ';'  expected	20	None	replace
26	[BUG]  [BUGGY]  this.probability  =  rng.getReturnType();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.probability  =  rng.getReturnType();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.probability  =  rng.getReturnType();	  this.probability    =    rng.getProbability();    	non-compiled	[CE]  ';'  expected	18	None	replace
27	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGeneratorException  {  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGeneratorException  {  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGeneratorException  {	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException,    RandomGeneratorException    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
28	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  samples));  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  samples));  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs,  samples));	  this(rng,    new    Pair    <    T,    Double>(probs,    random));    	non-compiled	[CE]  ';'  expected	13	None	replace
29	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  random),  samples);  [CE]  ';'  expected  [FE]                    ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs,  random),  samples);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs,  random),  samples);	  this(rng,    new    Pair    <    T,    Double>(probs,    random));    	non-compiled	[CE]  ';'  expected	13	None	replace
30	[BUG]  [BUGGY]  this.random  =  rng.nextDouble()  +  1;  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  rng.nextDouble()  +  1;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  rng.nextDouble()  +  1;	  this.random    =    rng.nextDouble();    	non-compiled	[CE]  ';'  expected	10	None	replace
31	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  samples);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  samples);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  samples);	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
32	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  sample.getValue());  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  sample.getValue());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  sample.getValue());	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
33	[BUG]  [BUGGY]  this.random  =  new  Double(rng.getValue()  +  1);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  new  Double(rng.getValue()  +  1);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  new  Double(rng.getValue()  +  1);	  this.random    =    new    Double(rng.getValue());    	non-compiled	[CE]  ';'  expected	29	None	replace
34	[BUG]  [BUGGY]  this.random  =  new  Double(rng.getValue(),  samples);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  new  Double(rng.getValue(),  samples);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  new  Double(rng.getValue(),  samples);	  this.random    =    new    Double(rng.getValue());    	non-compiled	[CE]  ';'  expected	29	None	replace
35	[BUG]  [BUGGY]  this.prototypes  =  new  LinkedList  <  Pair  <  T>();  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.prototypes  =  new  LinkedList  <  Pair  <  T>();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.prototypes  =  new  LinkedList  <  Pair  <  T>();	  this.prototypes    =    new    ArrayList    <    Pair    <    T>();    	non-compiled	[CE]  ';'  expected	19	None	replace
36	[BUG]  [BUGGY]  super(rng,  sample,  probabilities);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  sample,  probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  sample,  probabilities);	  super(rng,    sample);    	non-compiled	[CE]  ';'  expected	11	None	replace
37	[BUG]  [BUGGY]  super(rng,  sample,  Probabilities);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  sample,  Probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  sample,  Probabilities);	  super(rng,    sample);    	non-compiled	[CE]  ';'  expected	11	None	replace
38	[BUG]  [BUGGY]  this.samples  =  Collections.emptyList();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.samples  =  Collections.emptyList();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.samples  =  Collections.emptyList();	  throws    NotPositiveException,    MathArithmeticException,    NullPointerException;    	non-compiled	[CE]  ';'  expected	16	None	replace
39	[BUG]  [BUGGY]  this.samples  =  new  LinkedList  <  Pair  <  T,  Double>();  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.samples  =  new  LinkedList  <  Pair  <  T,  Double>();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.samples  =  new  LinkedList  <  Pair  <  T,  Double>();	  throws    NotPositiveException,    MathArithmeticException,    NullPointerException;    	non-compiled	[CE]  ';'  expected	16	None	replace
40	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(prototype));  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(prototype));  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(prototype));	  this(rng,    new    Pair    <    T,    Double>(samples));    	non-compiled	[CE]  ';'  expected	12	None	replace
41	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random,  samples);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random,  samples);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs),  random,  samples);	  this(rng,    new    Pair    <    T,    Double>(probs),    random);    	non-compiled	[CE]  ';'  expected	23	None	replace
42	[BUG]  [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random,  sample);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  new  Pair  <  T,  Double>(probs),  random,  sample);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  new  Pair  <  T,  Double>(probs),  random,  sample);	  this(rng,    new    Pair    <    T,    Double>(probs),    random);    	non-compiled	[CE]  ';'  expected	23	None	replace
43	[BUG]  [BUGGY]  this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >=  samples;  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >=  samples;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.samples  =  new  ArrayList  <  Pair  <  T,  Double  >=  samples;	  this.samples    =    new    ArrayList    <    Pair    <    T,    Double    >>    samples;    	non-compiled	[CE]  ';'  expected	30	None	replace
44	[BUG]  [BUGGY]  this.probability  =  rng.getProbability()  +  1;  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.probability  =  rng.getProbability()  +  1;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.probability  =  rng.getProbability()  +  1;	  this.probability    =    rng.getProbability();    	non-compiled	[CE]  ';'  expected	18	None	replace
45	[BUG]  [BUGGY]  this.random  =  new  Double(rng.getKey());  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  new  Double(rng.getKey());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  new  Double(rng.getKey());	  this.random    =    new    Double(rng.getValue());    	non-compiled	[CE]  ';'  expected	29	None	replace
46	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getKey();  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getKey();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  <  T>  random  =  rng.getKey();	  RandomGenerator    <    T>    random    =    rng.getValue();    	non-compiled	[CE]  ';'  expected	4	None	replace
47	[BUG]  [BUGGY]  this.prototypes  =  new  ArrayList  <  Pair  <  T,  Double>();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.prototypes  =  new  ArrayList  <  Pair  <  T,  Double>();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.prototypes  =  new  ArrayList  <  Pair  <  T,  Double>();	  throws    NotPositiveException,    MathArithmeticException,    NullPointerException;    	non-compiled	[CE]  ';'  expected	16	None	replace
48	[BUG]  [BUGGY]  this(rng,  null,  null,  probs);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  probs);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  probs);	  this(rng,    null,    null,    samples);    	non-compiled	[CE]  ';'  expected	6	None	replace
49	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException;  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException;	  throws    NotPositiveException,    MathArithmeticException,    DESCreteDistributionException    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
50	[BUG]  [BUGGY]  super(rng,  random);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  random);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  random);	  super(rng,    sample);    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  super(rng,  samples,  probables);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  probables);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  probables);	  super(rng,    samples,    random);    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);	  RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  ';'  expected	3	None	replace
53	[BUG]  [BUGGY]  super(rng,  samples,  null,  probs);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  samples,  null,  probs);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  samples,  null,  probs);	  super(rng,    samples,    null);    	non-compiled	[CE]  ';'  expected	21	None	replace
54	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator;  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator;  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  randomGenerator;	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException,    randomGenerator    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
55	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  null);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  null);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  null);	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
56	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  probs);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  probs);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  probs);	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
57	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandom());  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandom());  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandom());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getKey());    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  this(rng,  null,  null,  sample,  randomGenerator);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  sample,  randomGenerator);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  sample,  randomGenerator);	  this(rng,    null,    null,    sample);    	non-compiled	[CE]  ';'  expected	28	None	replace
59	[BUG]  [BUGGY]  this.probability  =  rng.getValue();  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.probability  =  rng.getValue();  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.probability  =  rng.getValue();	  throws    NotPositiveException,    MathArithmeticException,    NullPointerException;    	non-compiled	[CE]  ';'  expected	16	None	replace
60	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getKey());    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException,  SerialGeneratorException  {  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException,  SerialGeneratorException  {  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException,  RandomGeneratorException,  SerialGeneratorException  {	  throws    NotPositiveException,    MathArithmeticException,    DiscreteDistributionException,    RandomGeneratorException    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
62	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  RandomGeneratorException  {  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  RandomGeneratorException  {  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DESCreteDistributionException,  RandomGeneratorException  {	  throws    NotPositiveException,    MathArithmeticException,    DESCreteDistributionException    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
63	[BUG]  [BUGGY]  this.random  =  new  Double(rng.getRandom());  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this.random  =  new  Double(rng.getRandom());  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  new  Double(rng.getRandom());	  this.random    =    new    Double(rng.getValue());    	non-compiled	[CE]  ';'  expected	29	None	replace
64	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator();  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateValueGenerator();  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  rng.generateValueGenerator();	  RandomGenerator    randomGenerator    =    rng.generateRandomGenerator();    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  super(rng,  random,  probabilities);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  random,  probabilities);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  random,  probabilities);	  super(rng,    samples,    probabilities);    	non-compiled	[CE]  ';'  expected	1	None	replace
66	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  probabilities);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  probabilities);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  probabilities);	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
67	[BUG]  [BUGGY]  this(rng,  null,  null,  null,  random);  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  this(rng,  null,  null,  null,  random);  [BUGGY]      random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this(rng,  null,  null,  null,  random);	  this(rng,    null,    null,    null);    	non-compiled	[CE]  ';'  expected	24	None	replace
68	[BUG]  [BUGGY]  super(rng,  sample.getValue());  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  sample.getValue());  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  sample.getValue());	  super(rng,    sample);    	non-compiled	[CE]  ';'  expected	11	None	replace
69	[BUG]  [BUGGY]  super(rng,  sample.getKey());  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  super(rng,  sample.getKey());  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	super(rng,  sample.getKey());	  super(rng,    sample);    	non-compiled	[CE]  ';'  expected	11	None	replace
70	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.getValue(),  rng);  [CE]  ';'  expected  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.getValue(),  rng);  [BUGGY]      throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(samples.getValue(),  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng.getValue(),    samples);    	non-compiled	[CE]  ';'  expected	9	None	replace
