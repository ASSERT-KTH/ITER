bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException  {  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException  {  [BUGGY]  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  DiscreteDistributionException  {	throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  	non-compiled	[CE]  cannot  find  symbol	25	None	replace
2	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    [BUGGY]  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	  	throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	25	None	replace
3	[BUG]  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(samples.size()));  [CE]  ';'  expected  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(samples.size()));  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    this(rng,  new  Pair  <  T,  Double>(samples.size()));		non-compiled	[CE]  ';'  expected	26	None	add
4	[BUG]  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(samples.size()  -  1));  [CE]  ';'  expected  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(samples.size()  -  1));  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    this(rng,  new  Pair  <  T,  Double>(samples.size()  -  1));		non-compiled	[CE]  ';'  expected	26	None	add
5	[BUG]  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(probs));  [CE]  ';'  expected  [FE]        ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    this(rng,  new  Pair  <  T,  Double>(probs));  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    this(rng,  new  Pair  <  T,  Double>(probs));		non-compiled	[CE]  ';'  expected	26	None	add
6	[BUG]  [BUGGY]    this(rng,  null,  null);  [CE]  ';'  expected  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    this(rng,  null,  null);  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    this(rng,  null,  null);		non-compiled	[CE]  ';'  expected	26	None	add
7	[BUG]  [BUGGY]    super(rng);  [CE]  ';'  expected  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    super(rng);  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    super(rng);		non-compiled	[CE]  ';'  expected	26	None	add
8	[BUG]  [BUGGY]    super(rng,  samples);  [CE]  ';'  expected  [FE]        ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    super(rng,  samples);  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    super(rng,  samples);		non-compiled	[CE]  ';'  expected	26	None	add
9	[BUG]  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException;  [CE]  <identifier>  expected  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException;  [BUGGY]  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException;	throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  	non-compiled	[CE]  <identifier>  expected	25	None	replace
10	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getValue();  [CE]  ';'  expected  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getValue();  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    RandomGenerator  randomGenerator  =  rng.getValue();		non-compiled	[CE]  ';'  expected	26	None	add
11	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();  [CE]  ';'  expected  [FE]      ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    RandomGenerator  randomGenerator  =  rng.getRandomGenerator();		non-compiled	[CE]  ';'  expected	26	None	add
12	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());  [CE]  ';'  expected  [FE]        ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());  [BUGGY]  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());		non-compiled	[CE]  ';'  expected	26	None	add
13	[BUG]  [BUGGY]  this.random  =  rng;  [CE]  ';'  expected  [FE]    ArrayStoreException  [CONTEXT]  public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  [BUGGY]  this.random  =  rng;  [BUGGY]  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	this.random  =  rng;	throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  	non-compiled	[CE]  ';'  expected	25	None	replace
