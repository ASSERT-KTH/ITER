bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Probabilities  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]  Probabilities  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  [BUGGY]  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  probabilities  =  MathArrays.normalizeArray(probs,  1.0);	probabilities  =  MathArrays.normalizeArray(probs,  1.0);  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
2	[BUG]  [BUGGY]    [CE]  variable  probabilities  might  not  have  been  initialized  [FE]      ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    [BUGGY]  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	  	probabilities  =  MathArrays.normalizeArray(probs,  1.0);  	non-compiled	[CE]  variable  probabilities  might  not  have  been  initialized	43	None	replace
3	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs  =  samples.get(i);  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    Pair  <  T,  Double>  probs  =  samples.get(i);  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    Pair  <  T,  Double>  probs  =  samples.get(i);		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	44	None	add
4	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getValue();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]      ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getValue();  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    Pair  <  T,  Double>  probs  =  sample.getValue();		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	44	None	add
5	[BUG]  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getProbs();  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    Pair  <  T,  Double>  probs  =  sample.getProbs();  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    Pair  <  T,  Double>  probs  =  sample.getProbs();		non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	44	None	add
6	[BUG]  [BUGGY]    Pair  <  T,  Double>  random  =  sample.getValue();  [CE]  cannot  find  symbol  sample  [FE]    ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    Pair  <  T,  Double>  random  =  sample.getValue();  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    Pair  <  T,  Double>  random  =  sample.getValue();		non-compiled	[CE]  cannot  find  symbol  sample	44	None	add
7	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i));  [CE]  cannot  find  symbol  i  [FE]      ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i));  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.get(i));		non-compiled	[CE]  cannot  find  symbol  i	44	None	add
8	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.getValue());  [CE]  cannot  find  symbol  singleton  [FE]    ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.getValue());  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton.getValue());		non-compiled	[CE]  cannot  find  symbol  singleton	44	None	add
9	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size());  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]      ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size());  [BUGGY]  probabilities  =  MathArrays.normalizeArray(probs,  1.0);  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons.size());		non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	44	None	add
10	[BUG]  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0);  [CE]  cannot  find  symbol  Probabilities  [FE]    ArrayStoreException  [CONTEXT]  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [BUGGY]  Probabilities  =  MathArrays.normalizeArray(probs,  1.0);  [BUGGY]  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	Probabilities  =  MathArrays.normalizeArray(probs,  1.0);	probabilities  =  MathArrays.normalizeArray(probs,  1.0);  	non-compiled	[CE]  cannot  find  symbol  Probabilities	43	None	replace
