bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  randomGenerator,  sampleSize);  [CE]  ']'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  randomGenerator,  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  new  T[singletons.get(0).getClass(),  randomGenerator,  sampleSize);	  final    T[]out    =    new    T[singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  ']'  expected	1	None	replace
2	[BUG]  [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize,  randomGenerator,  randomGenerator);  [CE]  ']'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize,  randomGenerator,  randomGenerator);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize,  randomGenerator,  randomGenerator);	  final    T[]out    =    new    T[singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  ']'  expected	1	None	replace
3	[BUG]  [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize  +  2);  [CE]  ']'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize  +  2);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  new  T[singletons.get(0).getClass(),  sampleSize  +  2);	  final    T[]out    =    new    T[singletons.get(0).getClass(),    sampleSize    +    1);    	non-compiled	[CE]  ']'  expected	2	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
6	[BUG]  [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize,  sampleSize.get(0).getClass(),  sampleSize);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize,  sampleSize.get(0).getClass(),  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  (T[])Array.newInstance(sampleSize,  sampleSize.get(0).getClass(),  sampleSize);	  final    T[]out    =    (T[])Array.newInstance(sampleSize.get(0).getClass(),    sampleSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  rng);  [CE]  cannot  find  symbol  rng  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  rng);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  rng);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  rng	4	None	replace
8	[BUG]  [BUGGY]  final  T[]  out  =  randomGenerator.getClass(),  sampleSize,  (T[])singletons.get(0).getClass());  [CE]  <identifier>  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]  out  =  randomGenerator.getClass(),  sampleSize,  (T[])singletons.get(0).getClass());  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]  out  =  randomGenerator.getClass(),  sampleSize,  (T[])singletons.get(0).getClass());	  final    T[]    out    =    (T[])singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  final  T[]  out  =  (T[])singletons.get(0).getClass(),  sampleSize,  randomGenerator,  probabilitys);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]  out  =  (T[])singletons.get(0).getClass(),  sampleSize,  randomGenerator,  probabilitys);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]  out  =  (T[])singletons.get(0).getClass(),  sampleSize,  randomGenerator,  probabilitys);	  final    T[]    out    =    (T[])singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randomGenerator);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randomGenerator);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randomGenerator);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(SingletonGenerator.class,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);  [CE]  cannot  find  symbol  SampleSize  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SampleSize,  sampleSize);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize,    samplingSize);    	non-compiled	[CE]  cannot  find  symbol  SampleSize	5	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(sampleSize,  randomGenerator);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(sampleSize,  randomGenerator);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  randomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(sampleSize,  randomGenerator);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance();    sampleSize    =    randomGenerator.computeSample(sampleSize,    randomGenerator);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  samplingSize);  [CE]  cannot  find  symbol  samplingSize  [FE]                  ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  samplingSize);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  samplingSize);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);    	non-compiled	[CE]  cannot  find  symbol  samplingSize	13	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SerialGenerator.class,  sampleSize);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SerialGenerator.class,  sampleSize);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SerialGenerator.class,  sampleSize);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(SingletonGenerator.class,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize,  samples.get(0).getClass(),  sampleSize);  [CE]  cannot  find  symbol  samples  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize,  samples.get(0).getClass(),  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  (T[])Array.newInstance(sampleSize,  samples.get(0).getClass(),  sampleSize);	  final    T[]out    =    (T[])Array.newInstance(sampleSize.get(0).getClass(),    sampleSize);    	non-compiled	[CE]  cannot  find  symbol  samples	9	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(sampleSize  -  1);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
18	[BUG]  [BUGGY]  final  T[]  out  =  randoms.get(0).getClass(),  sampleSize,  sampleSize);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]  out  =  randoms.get(0).getClass(),  sampleSize,  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]  out  =  randoms.get(0).getClass(),  sampleSize,  sampleSize);	  final    T[]    out    =    (T[])singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  final  T[]  out  =  (T[])singletons.get(0).getClass(),  randomGenerator,  sampleSize);  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]  out  =  (T[])singletons.get(0).getClass(),  randomGenerator,  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]  out  =  (T[])singletons.get(0).getClass(),  randomGenerator,  sampleSize);	  final    T[]    out    =    (T[])singletons.get(0).getClass(),    sampleSize,    randomGenerator);    	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  singletons);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  singletons);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize,  sampleSize,  singletons);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(sampleSize,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  singletons);  [CE]  cannot  find  symbol  [FE]                ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  singletons);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES,  singletons);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randoms);  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randoms);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(SingletonGenerator.class,  sampleSize,  randoms);	  RandomGenerator    randomGenerator    =    RandomGenerator.getInstance(SingletonGenerator.class,    sampleSize);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
23	[BUG]  [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize.get(0),  sampleSize);  [CE]  int  cannot  be  dereferenced  [FE]            ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  final  T[]out  =  (T[])Array.newInstance(sampleSize.get(0),  sampleSize);  [BUGGY]        for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	final  T[]out  =  (T[])Array.newInstance(sampleSize.get(0),  sampleSize);	  final    T[]out    =    (T[])Array.newInstance(sampleSize.get(0).getClass(),    sampleSize);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException      [CONTEXT]      public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);  [BUGGY]      final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance(LocalizedFormats.NUMBER_OF_SAMPLES);	  RandomGenerator    <    T>    randomGenerator    =    RandomGenerator.getInstance(sampleSize);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
