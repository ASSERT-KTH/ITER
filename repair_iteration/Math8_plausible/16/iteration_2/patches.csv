bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  random);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(rng);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	2	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(random);  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(random);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(random);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    singletons.get(rng);    	non-compiled	[CE]  >  expected	23	None	replace
3	[BUG]  [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  double[]  probs  =  new  double[samples.size()];  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final  double[]  probs  =  new  double[samples.size()];  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValue();	  final    double[]    probs    =    new    double[samples.size()    -    1];    RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.getValue();    	non-compiled	[CE]  >  expected	5	None	replace
4	[BUG]  [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  final  double[]  probs  =  new  double[singletons.size()  +  1];  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  final  double[]  probs  =  new  double[singletons.size()  +  1];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final    double[]    probs    =    new    double[singletons.size()    +    1];    final  double[]  probs  =  new  double[singletons.size()  +  1];	  	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	14	None	add
5	[BUG]  [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  Final  double[]  probs  =  new  double[singletons.size()  +  1];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  Final  double[]  probs  =  new  double[singletons.size()  +  1];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final    double[]    probs    =    new    double[singletons.size()    +    1];    Final  double[]  probs  =  new  double[singletons.size()  +  1];	  	non-compiled	[CE]  not  a  statement	14	None	add
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [CE]  cannot  find  symbol  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getRandomGenerator());	  RandomGenerator    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getSingleValues();  [CE]  >  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getSingleValues();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getSingleValues();	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.getValues();    	non-compiled	[CE]  >  expected	20	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  T>  sample  =  rng.nextToken();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  T>  sample  =  rng.nextToken();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  T>  sample  =  rng.nextToken();	  RandomGenerator    <    T>    sample    =    random.nextToken();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	6	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  random);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  random);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  random);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	3	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  samples  =  random.getSingleSingleValues();  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  samples  =  random.getSingleSingleValues();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  samples  =  random.getSingleSingleValues();	  RandomGenerator    <    Pair    <    T,    Double>    samples    =    random.getSingleValues();    	non-compiled	[CE]  >  expected	10	None	replace
11	[BUG]  [BUGGY]  final  int[]  probs  =  new  int[singletons.size()  ];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  int[]  probs  =  new  int[singletons.size()  ];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final  int[]  probs  =  new  int[singletons.size()  ];	  final    double[]    probs    =    new    double[singletons.size()    ];    final    double[]    probs    =    new    double[singletons.size()    ];    	non-compiled	[CE]  incompatible  types	7	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(singletons);  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(singletons);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(singletons);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.get(singletons);    	non-compiled	[CE]  >  expected	9	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  singletons);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  singletons);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng,  singletons);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(random,    singletons);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	19	None	replace
14	[BUG]  [BUGGY]  final  double[]  probs  =  new  double[samples.get()];  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  double[]  probs  =  new  double[samples.get()];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final  double[]  probs  =  new  double[samples.get()];	  final    double[]    probs    =    new    double[samples.size()    -    1];    final    double[]    probs    =    new    double[samples.get()    -    1];    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	21	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());  [CE]  cannot  find  symbol  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(rng.getValue());	  RandomGenerator    randomGenerator    =    random.getValue();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  <  T>  sample  =  randomGenerator.nextToken();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  T>  sample  =  randomGenerator.nextToken();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  T>  sample  =  randomGenerator.nextToken();	  RandomGenerator    <    T>    sample    =    randomGenerator.next();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	24	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues(rng);  [CE]  >  expected  [FE]            ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues(rng);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  random.getValues(rng);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.getValues();    	non-compiled	[CE]  >  expected	20	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(0);  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(0);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  singletons.get(0);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    singletons.get(rng);    	non-compiled	[CE]  >  expected	23	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValues();  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValues();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  rng.getValues();	  RandomGenerator    <    Pair    <    T,    Double>    samples    =    rng.getValues();    	non-compiled	[CE]  >  expected	11	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  samples  =  rng.getSingleValues();  [CE]  >  expected  [FE]              ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  samples  =  rng.getSingleValues();  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  samples  =  rng.getSingleValues();	  RandomGenerator    <    Pair    <    T,    Double>    samples    =    random.getSingleValues();    	non-compiled	[CE]  >  expected	10	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton,  random);  [CE]  cannot  find  symbol  singleton  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton,  random);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singleton,  random);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(random,    singletons);    	non-compiled	[CE]  cannot  find  symbol  singleton	19	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  randoms.get(rng);  [CE]  >  expected  [FE]                ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  <  Pair  <  T,  Double>  sample  =  randoms.get(rng);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  <  Pair  <  T,  Double>  sample  =  randoms.get(rng);	  RandomGenerator    <    Pair    <    T,    Double>    sample    =    random.get(singletons);    	non-compiled	[CE]  >  expected	9	None	replace
23	[BUG]  [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  final  double[]  probs  =  new  double[singletons.size()  +  2];  [CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  final  double[]  probs  =  new  double[singletons.size()  +  1];  final  double[]  probs  =  new  double[singletons.size()  +  2];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	final    double[]    probs    =    new    double[singletons.size()    +    1];    final  double[]  probs  =  new  double[singletons.size()  +  2];	  	non-compiled	[CE]  variable  probs  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	14	None	add
24	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  double[]  probs  =  new  double[singletons.size()  ];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	add	double[]  probs  =  new  double[singletons.size()  ];	  final    double[]    probs    =    new    double[singletons.size()    ];    final    double[]    probs    =    new    double[singletons.size()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	13	replace
25	[BUG]  [BUGGY]  double[]  probs  =  new  double[singletons.size()  ];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  double[]  probs  =  new  double[singletons.size()  ];  [BUGGY]        for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	double[]  probs  =  new  double[singletons.size()  ];	  final    double[]    probs    =    new    double[singletons.size()    ];    final    double[]    probs    =    new    double[singletons.size()    ];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	13	replace
26	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  rng);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]                  ArrayStoreException      [CONTEXT]      public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {  random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());      [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  rng);  [BUGGY]      final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  probs[i]  =  sample.getValue();  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(singletons,  rng);	  RandomGenerator    randomGenerator    =    new    RandomGenerator(singletons);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	3	None	replace
