bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  getGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]    ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  getGenerator();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  <  T>  randomGenerator  =  getGenerator();		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	add
2	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  getGenerator();  [CE]  cannot  find  symbol  [FE]      ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  randomGenerator  =  getGenerator();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  randomGenerator  =  getGenerator();		non-compiled	[CE]  cannot  find  symbol	14	None	add
3	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this);  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this);		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	add	final  double  randomValue  =  random.nextDouble()  +  1;	final  double  randomValue  =  random.nextDouble();  	compilable	  [FE]  ArrayStoreException  	13	2	replace
5	[BUG]  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  [BUGGY]  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final  double  randomValue  =  random.nextDouble()  +  1;	final  double  randomValue  =  random.nextDouble();  	compilable	  [FE]  ArrayStoreException  	13	2	replace
6	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(this);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]    ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(this);  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(this);		non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	14	None	add
7	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(strategy);  [CE]  cannot  find  symbol  strategy  [FE]      ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  randomGenerator  =  new  RandomGenerator(strategy);  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  randomGenerator  =  new  RandomGenerator(strategy);		non-compiled	[CE]  cannot  find  symbol  strategy	14	None	add
8	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]    ArrayStoreException  [CONTEXT]  public  T  sample()  {  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();  [BUGGY]  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	    RandomGenerator  <  T>  randomGenerator  =  random.getGenerator();		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	14	None	add
