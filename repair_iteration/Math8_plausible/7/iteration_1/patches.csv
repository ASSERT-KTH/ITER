bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator();  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  getRandomGenerator();  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  getRandomGenerator();	      RandomGenerator    randomGenerator    =    getGenerator();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sample);  [CE]  cannot  find  symbol  sample  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sample);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  sample);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(this);    	non-compiled	[CE]  cannot  find  symbol  sample	6	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  samples);  [CE]  cannot  find  symbol  samples  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  samples);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(this,  samples);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(this);    	non-compiled	[CE]  cannot  find  symbol  samples	6	None	replace
5	[BUG]  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  double  randomValue  =  random.nextDouble()  +  1;  [CE]  variable  randomValue  is  already  defined  in  method  sample()  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  double  randomValue  =  random.nextDouble()  +  1;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final    double    randomValue    =    random.nextDouble()    +    1;    final  double  randomValue  =  random.nextDouble()  +  1;	  	non-compiled	[CE]  variable  randomValue  is  already  defined  in  method  sample()	4	None	add
6	[BUG]  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  Double  randomValue  =  random.nextDouble()  +  1;  [CE]  variable  randomValue  is  already  defined  in  method  sample()  [FE]      ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  Double  randomValue  =  random.nextDouble()  +  1;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final    double    randomValue    =    random.nextDouble()    +    1;    final  Double  randomValue  =  random.nextDouble()  +  1;	  	non-compiled	[CE]  variable  randomValue  is  already  defined  in  method  sample()	4	None	add
7	[BUG]  [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  double  randomValue  =  random.getDouble()  +  1;  [CE]  variable  randomValue  is  already  defined  in  method  sample()  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  final  double  randomValue  =  random.nextDouble()  +  1;  final  double  randomValue  =  random.getDouble()  +  1;  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	final    double    randomValue    =    random.nextDouble()    +    1;    final  double  randomValue  =  random.getDouble()  +  1;	  	non-compiled	[CE]  variable  randomValue  is  already  defined  in  method  sample()	4	None	add
8	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample);  [CE]  cannot  find  symbol  sample  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(sample);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(sample);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  cannot  find  symbol  sample	7	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(this,  sample);	      RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	3	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]              ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(strategy);	      RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	3	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(rng);	      RandomGenerator    <    T>    randomGenerator    =    getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(str);  [CE]  cannot  find  symbol  str  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(str);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(str);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  cannot  find  symbol  str	7	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(str);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(str);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(str);	      RandomGenerator    <    T>    randomGenerator    =    getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]            ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  new  RandomGenerator(str);	      RandomGenerator    <    T>    randomGenerator    =    new    RandomGenerator(this);    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	3	None	replace
15	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator();	      RandomGenerator    <    T>    randomGenerator    =    random.getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	8	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples);  [CE]  cannot  find  symbol  samples  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  new  RandomGenerator(samples);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  new  RandomGenerator(samples);	      RandomGenerator    randomGenerator    =    new    RandomGenerator(strategy);    	non-compiled	[CE]  cannot  find  symbol  samples	7	None	replace
17	[BUG]  [BUGGY]  static  final  double  randomValue  =  random.nextDouble();  [CE]  illegal  start  of  expression  [FE]    ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  static  final  double  randomValue  =  random.nextDouble();  [BUGGY]    double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	static  final  double  randomValue  =  random.nextDouble();	  final    double    randomValue    =    random.nextDouble()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  getGenerator(strategy);  [CE]  cannot  find  symbol  strategy  [FE]          ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  randomGenerator  =  getGenerator(strategy);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  randomGenerator  =  getGenerator(strategy);	      RandomGenerator    randomGenerator    =    getGenerator();    	non-compiled	[CE]  cannot  find  symbol  strategy	2	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  T  sample()  {    [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy);  [BUGGY]    final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	RandomGenerator  <  T>  randomGenerator  =  getGenerator(strategy);	      RandomGenerator    <    T>    randomGenerator    =    getGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
