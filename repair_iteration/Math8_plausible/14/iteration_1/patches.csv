bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  rng.getValue());  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  rng.getValue());  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  rng.getValue());	  random    =    new    RandomGenerator(rng.getValue());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getValue());  [CE]  cannot  find  symbol  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getValue());  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  rng.getValue());	  random    =    new    RandomGenerator(rng.getValue());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
3	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probs);  [CE]  cannot  find  symbol  probs  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probs);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  samples,  probs);	  random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probs	5	None	replace
4	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probabilitys);  [CE]  cannot  find  symbol  probabilitys  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probabilitys);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  samples,  probabilitys);	  random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probabilitys	5	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(random);	      RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]              ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(variable);	      RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  <  T>  random  =  rng.getRandomGenerator(null);	      RandomGenerator    <    T>    random    =    rng.getRandomGenerator();    	non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	1	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  random  =  new  RandomGenerator(rng,  samples);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  random  =  new  RandomGenerator(rng,  samples);	  random    =    new    RandomGenerator(rng);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	6	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size());  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  samples.size());	      RandomGenerator    rng    =    new    RandomGenerator(samples.get(0));    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	8	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue());  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue());  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.get(0),  sample.getValue());	      RandomGenerator    rng    =    new    RandomGenerator(samples.get(0));    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	8	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [CE]  cannot  find  symbol  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  randomGenerator  =  rng.generateRandomGenerator();	      RandomGenerator    randomGenerator    =    rng.getRandomGenerator();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(tests);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(tests);	      RandomGenerator    rng    =    new    RandomGenerator(samples);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	2	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.size()  -  1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.size()  -  1);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.size()  -  1);	      RandomGenerator    rng    =    new    RandomGenerator(samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	7	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.size()  +  1);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =  new  RandomGenerator(samples.size()  +  1);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =  new  RandomGenerator(samples.size()  +  1);	      RandomGenerator    rng    =    new    RandomGenerator(samples.size());    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	7	None	replace
15	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  probs);  [CE]  cannot  find  symbol  probs  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  probs);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  probs);	  random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  cannot  find  symbol  probs	5	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(p);  [CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)  [FE]            ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(p);  [BUGGY]    random  =  rng;  singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	RandomGenerator  rng  =(DynamicGenerator)this.selectedSegments.get(p);	      RandomGenerator    rng    =(DynamicGenerator)this.selectedSegments.get(rng);    	non-compiled	[CE]  variable  rng  is  already  defined  in  constructor  DiscreteDistribution(RandomGenerator,List<Pair<T,Double>>)	3	None	replace
17	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probabilities);  [CE]  RandomGenerator  is  abstract;  cannot  be  instantiated  [FE]          ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  samples,  probabilities);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  samples,  probabilities);	  random    =    new    RandomGenerator(rng,    samples);    	non-compiled	[CE]  RandomGenerator  is  abstract;  cannot  be  instantiated	5	None	replace
18	[BUG]  [BUGGY]  random  =  new  RandomGenerator(rng,  sample);  [CE]  cannot  find  symbol  sample  [FE]        ArrayStoreException    [CONTEXT]    public  DiscreteDistribution(final  RandomGenerator  rng,  final  List<Pair<T,  Double>>  samples)  throws  NotPositiveException,  MathArithmeticException,  MathIllegalArgumentException  {    [BUGGY]  random  =  new  RandomGenerator(rng,  sample);  [BUGGY]      singletons  =  new  ArrayList<T>(samples.size());  final  double[]  probs  =  new  double[samples.size()];  for  (int  i  =  0;  i  <  samples.size();  i++)  {  final  Pair<T,  Double>  sample  =  samples.get(i);  singletons.add(sample.getKey());  if  (sample.getValue()  <  0)  {  throw  new  NotPositiveException(sample.getValue());  }  [CLASS]  DiscreteDistribution  [METHOD]  <init>  [RETURN_TYPE]  List)  RandomGenerator  rng  Double>>  samples  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  Pair  sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	random  =  new  RandomGenerator(rng,  sample);	  random    =    new    RandomGenerator(rng);    	non-compiled	[CE]  cannot  find  symbol  sample	6	None	replace
