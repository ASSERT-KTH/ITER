bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();		non-compiled	[CE]  cannot  find  symbol	10	None	add
2	[BUG]  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();  [CE]  type  RandomGenerator  does  not  take  parameters  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  <  T>  randomGenerator  =  RandomGenerator.getInstance();		non-compiled	[CE]  type  RandomGenerator  does  not  take  parameters	10	None	add
3	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize);  [CE]  cannot  find  symbol  [FE]        ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize);  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(sampleSize);		non-compiled	[CE]  cannot  find  symbol	10	None	add
4	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	add	for(int  i  =  0;  i  <  out.length;  i++)  {	for  (int  i  =  0;  i  <  sampleSize;  i++)  {  	compilable	  [FE]  ArrayStoreException  	9	1	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  [FE]  ArrayStoreException  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]  for(int  i  =  0;  i  <  out.length;  i++)  {  [BUGGY]  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	for(int  i  =  0;  i  <  out.length;  i++)  {	for  (int  i  =  0;  i  <  sampleSize;  i++)  {  	compilable	  [FE]  ArrayStoreException  	9	1	replace
6	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons.get(0));  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons.get(0));  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance(singletons.get(0));		non-compiled	[CE]  cannot  find  symbol	10	None	add
7	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  random.getValueGenerator();  [CE]  cannot  find  symbol  [FE]      ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  randomGenerator  =  random.getValueGenerator();  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  randomGenerator  =  random.getValueGenerator();		non-compiled	[CE]  cannot  find  symbol	10	None	add
8	[BUG]  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);  [CE]  cannot  find  symbol  [FE]    ArrayStoreException  [CONTEXT]  public  T[]  sample(int  sampleSize)  throws  NotStrictlyPositiveException  {  if  (sampleSize  <=  0)  {  throw  new  NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,  sampleSize);  }  final  T[]out  =  (T[])  java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),  sampleSize);  [BUGGY]    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);  [BUGGY]  for  (int  i  =  0;  i  <  sampleSize;  i++)  {  out[i]  =  sample();  }  return  out;  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T[]  int  sampleSize  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  int  i  sampleSize  T[]  out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	    RandomGenerator  randomGenerator  =  RandomGenerator.getInstance();  sampleSize  =  randomGenerator.computeSample(out,  randomGenerator);		non-compiled	[CE]  cannot  find  symbol	10	None	add
