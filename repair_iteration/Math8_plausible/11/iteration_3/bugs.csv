bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  +=  sum.doubleValue();  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  +=  sum.doubleValue();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  +=  sum.doubleValue();	  RandomGenerator    randomGenerator    +=    randomValue.doubleValue();    	non-compiled	[CE]  ';'  expected	4	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >=  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  >=  randomValue)  {	  if(sum    >    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	7	1	replace
3	[BUG]  [BUGGY]  if(sum  >=  randomValue)  {  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >=  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  >=  randomValue)  {	  if(sum    >    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	7	1	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.next();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.next();	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  randomValue  -=  sum.doubleValue();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  randomValue  -=  sum.doubleValue();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  -=  sum.doubleValue();	  randomValue    +=    sum.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  2;  [CE]  ';'  expected  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  2;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  2;	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  if(sum  <  randomValue)  {  If(sum  >  randomValue)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue)  {  If(sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue)  {  If(sum  >  randomValue)  {	  if(sum    <    randomValue)    {    If(sum    <    randomValue)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
9	[BUG]  [BUGGY]  if(sum  >  randomValue)  {  If(sum  <  randomValue)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >  randomValue)  {  If(sum  <  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  >  randomValue)  {  If(sum  <  randomValue)  {	  if(sum    <    randomValue)    {    If(sum    <    randomValue)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  -  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    sum;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();  [CE]  illegal  start  of  type  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble()  -  random.nextDouble();	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    -    sum;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  samples.doubleValue())  {  [CE]  cannot  find  symbol  samples  [FE]        AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  samples.doubleValue())  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  samples.doubleValue())  {	  if(sum    <    randomValue    ||    sum    >    randomValue.doubleValue())    {    	non-compiled	[CE]  cannot  find  symbol  samples	16	None	replace
13	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue.length)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue.length)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  randomValue.length)  {	  if(sum    <    =    randomValue)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
14	[BUG]  [BUGGY]  if(sum  >  randomValue)  {  if(sum  >  randomValue)  {  [CE]  illegal  start  of  expression  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >  randomValue)  {  if(sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    >    randomValue)    {    if(sum  >  randomValue)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
15	[BUG]  [BUGGY]  if(sum  >  randomValue)  {  If(sum  >  randomValue)  {  [CE]  ';'  expected  [FE]      ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >  randomValue)  {  If(sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    >    randomValue)    {    If(sum  >  randomValue)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  1)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  <  randomValue  ||  sum  >  1)  {	  if(sum    <    randomValue    ||    sum    >    randomValue)    {    	compilable	  [FE]  AssertionError  	23	1	replace
17	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  1)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  1)  {	  if(sum    <    randomValue    ||    sum    >    randomValue)    {    	compilable	  [FE]  AssertionError  	23	1	replace
18	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  probabilitys.length)  {  [CE]  cannot  find  symbol  probabilitys  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  probabilitys.length)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  probabilitys.length)  {	  if(sum    <    randomValue    ||    sum    >    randomValue)    {    	non-compiled	[CE]  cannot  find  symbol  probabilitys	23	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1);  [CE]  ';'  expected  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble(),  sum  +  1);	  RandomGenerator    randomGenerator    =    random.nextDouble(),    sum);    	non-compiled	[CE]  ';'  expected	21	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	1	None	replace
21	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble(),  randomValue;  [CE]  illegal  start  of  type  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble(),  randomValue;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  sum.nextDouble(),  randomValue;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  +  sum  +  1;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble()  /  sum;	  RandomGenerator    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
25	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(sum);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(i,  sum);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [CE]  illegal  start  of  type  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  if(sum  <  randomValue  ||  sum  >  randomValue)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  if(sum  <  randomValue  ||  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    <    randomValue    ||    sum    >    randomValue)    {    if(sum  <  randomValue  ||  sum  >  randomValue)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
31	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  If(sum  <  randomValue  ||  sum  >  randomValue)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  If(sum  <  randomValue  ||  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    <    randomValue    ||    sum    >    randomValue)    {    If(sum  <  randomValue  ||  sum  >  randomValue)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
32	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  &&  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  <  randomValue  &&  sum  >  randomValue)  {	  if(sum    <    randomValue    ||    sum    >    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	23	2	replace
33	[BUG]  [BUGGY]  if(sum  <  randomValue  &&  sum  >  randomValue)  {  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  &&  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  &&  sum  >  randomValue)  {	  if(sum    <    randomValue    ||    sum    >    randomValue)    {    	compilable	  [FE]  ArrayStoreException  	23	2	replace
34	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  if(sum  <  randomValue  ||  Sum  >  randomValue)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue)  {  if(sum  <  randomValue  ||  Sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum    <    randomValue    ||    sum    >    randomValue)    {    if(sum  <  randomValue  ||  Sum  >  randomValue)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
35	[BUG]  [BUGGY]  if(sum  >  randomValue.doubleValue())  {  [CE]  double  cannot  be  dereferenced  [FE]    ArrayStoreException    [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  >  randomValue.doubleValue())  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  >  randomValue.doubleValue())  {	  if(sum    >    randomValue)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
36	[BUG]  [BUGGY]  If(sum  <  randomValue)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  If(sum  <  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	If(sum  <  randomValue)  {	  if(sum    <    randomValue)    {    If(sum    <    randomValue)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
37	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getRandomGenerator(i);	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	1	None	replace
39	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generator(sum);  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.generator(sum);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.generator(sum);	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextGenerator(sum);	  RandomGenerator    <    T>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  randomValue  =  random  +  sum.nextDouble();  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  randomValue  =  random  +  sum.nextDouble();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	randomValue  =  random  +  sum.nextDouble();	  randomValue    =    sum    +    random.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.getGenerator(randomValue);	  RandomGenerator    <    T>    randomGenerator    =    random.getGenerator(i);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue  ||  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	if(sum  <  randomValue  ||  sum  >  randomValue  ||  sum  >  randomValue)  {	  if(sum    <    randomValue)    {    if(sum    <    randomValue)    {    	compilable	  [FE]  AssertionError  	11	1	replace
44	[BUG]  [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue  ||  sum  >  randomValue)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  if(sum  <  randomValue  ||  sum  >  randomValue  ||  sum  >  randomValue)  {  [BUGGY]      return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	if(sum  <  randomValue  ||  sum  >  randomValue  ||  sum  >  randomValue)  {	  if(sum    <    randomValue)    {    if(sum    <    randomValue)    {    	compilable	  [FE]  AssertionError  	11	1	replace
45	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValue();  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;  for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValue();  [BUGGY]      if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  }  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	RandomGenerator  randomGenerator  =  random.generateValue();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
