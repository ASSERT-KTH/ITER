bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  probs  =  randomValue.doubleValue();  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  double  probs  =  randomValue.doubleValue();  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	double  probs  =  randomValue.doubleValue();	  int    probs    =    randomValue.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {  [CE]  cannot  find  symbol  probabilityities  [FE]          ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  probabilityities.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    for(int    i    =    0;    i    <    probabilityities.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  probabilityities	2	None	replace
3	[BUG]  [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextRandomGenerator();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <?>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <?>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [CE]  illegal  start  of  type  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  /  sum;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble()  +  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble()    +    sum;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sample.length  -  1;  i++)  {  [CE]  cannot  find  symbol  sample  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  sample.length  -  1;  i++)  {  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  sample.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    randomValue.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  sample	4	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {  [CE]  cannot  find  symbol  probability  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  probability.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    probabilities.length    -    1;    i++)    {    for(int    i    =    0;    i    <    probability.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  probability	3	None	replace
8	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  1;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateRandomGenerator();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  randomGenerator  =  random.generateRandomGenerator();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextRandomGenerator();	  RandomGenerator    <    T>    randomGenerator    =    random.getRandomGenerator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator(sum);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generator(sum);  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generator(sum);	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble();  [CE]  illegal  start  of  type  [FE]              ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  randomGenerator  =  random.nextDouble();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  randomGenerator  =  random.nextDouble();	  randomValue    =    sum.nextDouble();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextGenerator(sum);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.nextGenerator(sum);  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <?>  randomGenerator  =  random.nextGenerator(sum);	  RandomGenerator    <?>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  samples.length  -  1;  i++)  {  [CE]  cannot  find  symbol  samples  [FE]        ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  for(int  i  =  0;  i  <  samples.length  -  1;  i++)  {  [BUGGY]      sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	for(int  i  =  0;  i  <  samples.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    randomValue.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  samples	4	None	replace
16	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generator(sum);  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  randomGenerator  =  random.generator(sum);  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  randomGenerator  =  random.generator(sum);	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValue();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  randomGenerator  =  random.generateValue();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  randomGenerator  =  random.generateValue();	  RandomGenerator    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.next();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <?>  randomGenerator  =  random.next();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <?>  randomGenerator  =  random.next();	  RandomGenerator    <?>    randomGenerator    =    random.nextGenerator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;  [CE]  ';'  expected  [FE]                ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.nextDouble(),  sum  +  2;	  RandomGenerator    <    T>    randomGenerator    =    random.nextDouble(),    sum;    	non-compiled	[CE]  ';'  expected	5	None	replace
20	[BUG]  [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateValue();  [CE]  illegal  start  of  type  [FE]            ArrayStoreException      [CONTEXT]      public  T  sample()  {  final  double  randomValue  =  random.nextDouble();  double  sum  =  0;      [BUGGY]  RandomGenerator  <  T>  randomGenerator  =  random.generateValue();  [BUGGY]      for  (int  i  =  0;  i  <  probabilities.length;  i++)  {  sum  +=  probabilities[i];  if  (randomValue  <  sum)  {  return  singletons.get(i);  }  }    return  singletons.get(singletons.size()  -  1);  [CLASS]  DiscreteDistribution  [METHOD]  sample  [RETURN_TYPE]  T  [VARIABLES]  List  samples  singletons  boolean  double[]  probabilities  probs  RandomGenerator  random  rng  double  randomValue  sum  int  i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	RandomGenerator  <  T>  randomGenerator  =  random.generateValue();	  RandomGenerator    <    T>    randomGenerator    =    random.generator();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
