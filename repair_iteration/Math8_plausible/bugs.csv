bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(new Well19937c(), samples); [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] this(new Well19937c(), samples); [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	replace	
2	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] [BUGGY] this(new Well19937c(), samples); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	69	69	1	add	
3	[BUG] [BUGGY] } [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples); [BUGGY] } [BUGGY]  [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	replace	
4	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples); [BUGGY] [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities RandomGenerator random  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	70	70	1	add	
5	[BUG] [BUGGY] if (sampleSize <= 0) { [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] if (sampleSize <= 0) { [BUGGY] throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	replace	
6	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { [BUGGY] [BUGGY] if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); }  [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	182	182	1	add	
7	[BUG] [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY]  for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	replace	
8	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } [BUGGY] [BUGGY] final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	187	187	1	add	
9	[BUG] [BUGGY] for (int i = 0; i < sampleSize; i++) { [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY] for (int i = 0; i < sampleSize; i++) { [BUGGY] out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	replace	
10	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); [BUGGY] [BUGGY] for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	189	189	1	add	
11	[BUG] [BUGGY] out[i] = sample(); [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { [BUGGY] out[i] = sample(); [BUGGY] } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	replace	
12	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { [BUGGY] [BUGGY] out[i] = sample(); } return out; } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T[]  int sampleSize [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i sampleSize T[] out  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	1.0	190	190	1	add	
13	[BUG] [BUGGY] final double randomValue = random.nextDouble(); [FE] ArrayStoreException [CONTEXT] public T sample() { [BUGGY] final double randomValue = random.nextDouble(); [BUGGY] double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }   [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	replace	
14	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { [BUGGY] [BUGGY] final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }   [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	157	157	1	add	
15	[BUG] [BUGGY] double sum = 0; [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); [BUGGY] double sum = 0; [BUGGY]  for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	replace	
16	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); [BUGGY] [BUGGY] double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	158	158	1	add	
17	[BUG] [BUGGY] for (int i = 0; i < probabilities.length; i++) { [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; [BUGGY] for (int i = 0; i < probabilities.length; i++) { [BUGGY] sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	replace	
18	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; [BUGGY] [BUGGY] for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	160	160	1	add	
19	[BUG] [BUGGY] sum += probabilities[i]; [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { [BUGGY] sum += probabilities[i]; [BUGGY] if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	replace	
20	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { [BUGGY] [BUGGY] sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	161	161	1	add	
21	[BUG] [BUGGY] if (randomValue < sum) { [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; [BUGGY] if (randomValue < sum) { [BUGGY] return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	replace	
22	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; [BUGGY] [BUGGY] if (randomValue < sum) { return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	162	162	1	add	
23	[BUG] [BUGGY] return singletons.get(i); [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { [BUGGY] return singletons.get(i); [BUGGY] } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	replace	
24	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { [BUGGY] [BUGGY] return singletons.get(i); } }    return singletons.get(singletons.size() - 1); } [CLASS] DiscreteDistribution [METHOD] sample [RETURN_TYPE] T  [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng double randomValue sum int i  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.7071067811865475	163	163	1	add	
25	[BUG] [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	replace	
26	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) [BUGGY] [BUGGY] throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	86	86	1	add	
27	[BUG] [BUGGY] random = rng; [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] random = rng; [BUGGY]  singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	replace	
28	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { [BUGGY] [BUGGY] random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	87	87	1	add	
29	[BUG] [BUGGY] singletons = new ArrayList<T>(samples.size()); [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; [BUGGY] singletons = new ArrayList<T>(samples.size()); [BUGGY] final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	replace	
30	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; [BUGGY] [BUGGY] singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	89	89	1	add	
31	[BUG] [BUGGY] final double[] probs = new double[samples.size()]; [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); [BUGGY] final double[] probs = new double[samples.size()]; [BUGGY]  for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); }  [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	replace	
32	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); [BUGGY] [BUGGY] final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); }  [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	90	90	1	add	
33	[BUG] [BUGGY] for (int i = 0; i < samples.size(); i++) { [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; [BUGGY] for (int i = 0; i < samples.size(); i++) { [BUGGY] final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	92	92	1	replace	
34	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; [BUGGY] [BUGGY] for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	92	92	1	add	
35	[BUG] [BUGGY] final Pair<T, Double> sample = samples.get(i); [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { [BUGGY] final Pair<T, Double> sample = samples.get(i); [BUGGY] singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	replace	
36	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { [BUGGY] [BUGGY] final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	93	93	1	add	
37	[BUG] [BUGGY] singletons.add(sample.getKey()); [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); [BUGGY] singletons.add(sample.getKey()); [BUGGY] if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	replace	
38	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); [BUGGY] [BUGGY] singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	94	94	1	add	
39	[BUG] [BUGGY] if (sample.getValue() < 0) { [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); [BUGGY] if (sample.getValue() < 0) { [BUGGY] throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	replace	
40	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); [BUGGY] [BUGGY] if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	95	95	1	add	
41	[BUG] [BUGGY] probs[i] = sample.getValue(); [FE] ArrayStoreException [CONTEXT] singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } [BUGGY] probs[i] = sample.getValue(); [BUGGY] } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	replace	
42	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } [BUGGY] [BUGGY] probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	98	98	1	add	
43	[BUG] [BUGGY] probabilities = MathArrays.normalizeArray(probs, 1.0); [FE] ArrayStoreException [CONTEXT] for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } [BUGGY] probabilities = MathArrays.normalizeArray(probs, 1.0); [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	replace	
44	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } [BUGGY] [BUGGY] probabilities = MathArrays.normalizeArray(probs, 1.0); } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	101	101	1	add	
45	[BUG] [BUGGY] } [FE] ArrayStoreException [CONTEXT] for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); [BUGGY] } [BUGGY]  [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	replace	
46	[BUG] [BUGGY] [FE] ArrayStoreException [CONTEXT] for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); [BUGGY] [BUGGY] } [CLASS] DiscreteDistribution [METHOD] <init> [RETURN_TYPE] List)  RandomGenerator rng Double>> samples [VARIABLES] List samples singletons boolean double[] probabilities probs RandomGenerator random rng int i Pair sample  	projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java	0.2773500981126146	102	102	1	add	
