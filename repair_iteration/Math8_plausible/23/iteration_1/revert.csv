projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102if(probs!=null){for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102if(probs!=null){for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getKey();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102if(probs!=null){for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probabilities[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i).getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);randomGenerator.setValue(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);randomGenerator.addValue(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singleton.getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singletons.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.setValue(probs[i]);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.setValue(probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.addValue(probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.setValue(probs,probabilities);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102Pair<T,Double>sample=samples.get(i);probs[i]=sample.getKey();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102Pair<T,Double>sample=samples.get(i);probs[i]=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probabilities[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102for(inti=0;i<samples.size();i++){Pair<T,Double>sample=samples.get(i);probabilities[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singleton.getValue(),probabilities);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singleton.getValue()+1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(probs.get(i),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.setValue(probs[0]);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.setValue(probs[1]);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singletons.size()-1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(probs.size());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102Pair<T,Double>probs[]=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(probs).getValue());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.addValue(probs,probabilities);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.addValue(probs,probability);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);randomGenerator.setValue(probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(i),probs);randomGenerator.addValue(probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singletons.size()+1);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102rng.addValue(probs,probabilitys);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singleton.getKey());
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102returnnewDouble(singleton.getValue(),probs);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(probs.get(i),probs);randomGenerator.setValue(rng);
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102Pair<T,Double>sample=samples.get(i);probabilities[i]=sample.getValue();
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getValue();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102for(inti=0;i<samples.size();i++){finalPair<T,Double>sample=samples.get(i);probs[i]=sample.getKey();}
projects/Math8/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java102RandomGeneratorrandomGenerator=newRandomGenerator(singletons.get(0).getValue());
