bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return(int)getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	17	3	replace
2	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(int)getCount(sumFreq)/(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    	compilable	  [FE]  AssertionFailedError  	17	3	replace
3	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	13	None	replace
4	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	13	None	replace
5	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  sumFreq);	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	13	None	replace
6	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  ==  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	13	None	replace
7	[BUG]  [BUGGY]  final  double  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  final  double  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  double  sumFreq  =  getSumFreq();	      double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	15	None	replace
8	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq()  +  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  double  sumFreq  =  getSumFreq()  +  1;  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq()  +  1;	      double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	15	None	replace
9	[BUG]  [BUGGY]  return(int)getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(int)getCount(sumFreq)/(double)v;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(int)getCount(sumFreq)/(double)v;	  return    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	1	None	replace
10	[BUG]  [BUGGY]  return  getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  getCount(sumFreq)/(double)v;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getCount(sumFreq)/(double)v;	  return    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  inconvertible  types	1	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	8	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	8	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(0);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	8	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	11	None	replace
15	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  '.class'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  '.class'  expected	11	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	11	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0,  sumFreq);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	11	None	replace
18	[BUG]  [BUGGY]  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.min(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	6	None	replace
19	[BUG]  [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  ||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	||  sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	4	None	replace
22	[BUG]  [BUGGY]  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	4	None	replace
23	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  return  Double.POSITIVE_INFINITY;  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	9	None	replace
26	[BUG]  [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	9	None	replace
27	[BUG]  [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(0);  }  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(0);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(0);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	9	None	replace
29	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	SumFreq  sumFreq  =  Math.max(sumFreq,  sumFreq);	      if(sumFreq    ==    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  Math.pow(sumFreq,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
32	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  Math.pow(sumFreq,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
33	[BUG]  [BUGGY]  return  v.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  v.doubleValue();  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  v.doubleValue();	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  return  Math.pow(sumFreq,  v.doubleValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  Math.pow(sumFreq,  v.doubleValue());  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  Math.pow(sumFreq,  v.doubleValue());	      	non-compiled	[CE]  cannot  find  symbol	2	None	replace
35	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  getPct(v);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  getPct(v);	      	compilable	  [FE]  StackOverflowError  	2	4	replace
36	[BUG]  [BUGGY]  return  getPct(v);  [FE]  StackOverflowError  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  getPct(v);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  getPct(v);	      	compilable	  [FE]  StackOverflowError  	2	4	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	10	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  '.class'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	For(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  '.class'  expected	10	None	replace
39	[BUG]  [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                  AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	for(int  i  =  0;  i  <  sumFreq;  ++i)  {  sumFreq  +=  freqTable.get(i).doubleValue();  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	10	None	replace
41	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  not  a  statement	16	None	add
42	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  ')'  expected	16	None	add
43	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);	  	non-compiled	[CE]  incompatible  types	16	None	add
44	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq;  if(v  ==  null)  {  return  0;  }	  	non-compiled	[CE]  ')'  expected	16	None	add
45	[BUG]  [BUGGY]  final  long  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  final  long  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  long  sumFreq  =  getSumFreq();	      long    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	12	None	replace
46	[BUG]  [BUGGY]  int  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  int  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	int  sumFreq  =  getSumFreq();	      long    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	12	None	replace
47	[BUG]  [BUGGY]  final  int  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  final  int  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	final  int  sumFreq  =  getSumFreq();	      long    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	12	None	replace
48	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	sumFreq  =  getSumFreq();  if(sumFreq  >=  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	14	None	replace
51	[BUG]  [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	5	None	replace
52	[BUG]  [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  return(double)getCount()  /(double)sumFreq;  [CE]  no  suitable  method  found  for  getCount()  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount()  /(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount()  /(double)sumFreq;	  return(double)getCount(sumFreq)/(double)sumFreq;    	non-compiled	[CE]  no  suitable  method  found  for  getCount()	17	None	replace
55	[BUG]  [BUGGY]  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  =  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
57	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
58	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
59	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)v1;  [CE]  cannot  find  symbol  v1  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)v1;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)v1;	  return    (double)getCount(sumFreq)/(double)v;    	non-compiled	[CE]  cannot  find  symbol  v1	1	None	replace
60	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq(v);  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  double  sumFreq  =  getSumFreq(v);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq(v);	      double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	15	None	replace
61	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  <  =  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  <  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	4	None	replace
65	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  for(int  i  =  0,  freq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(0);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
67	[BUG]  [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(1);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  double)getCount(sumFreq)/(double)sumFreq;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  double)getCount(sumFreq)/(double)sumFreq;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    double)getCount(sumFreq)/(double)sumFreq;	  	non-compiled	[CE]  not  a  statement	16	None	add
69	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  (double)getCount(sumFreq)/(double)v;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    (double)getCount(sumFreq)/(double)v;	  	non-compiled	[CE]  not  a  statement	16	None	add
70	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  long  result  =  getCount(sumFreq)/(double)v;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  long  result  =  getCount(sumFreq)/(double)v;  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    long  result  =  getCount(sumFreq)/(double)v;	  	non-compiled	[CE]  inconvertible  types	16	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(10,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
72	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  sumFreq  *  Math.pow(10,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(10,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	return  sumFreq  *  Math.pow(0,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
74	[BUG]  [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return  sumFreq  *  Math.pow(0,  sumFreq);  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return  sumFreq  *  Math.pow(0,  sumFreq);	      	compilable	  [FE]  AssertionFailedError  	2	3	replace
75	[BUG]  [BUGGY]  double  sumFreq  =  getSumFreq()  -  1;  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  double  sumFreq  =  getSumFreq()  -  1;  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	double  sumFreq  =  getSumFreq()  -  1;	      double    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	15	None	replace
76	[BUG]  [BUGGY]  if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(sumFreq  ==  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    ==    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	7	None	replace
77	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  >  0)  {  sumFreq  =  getSumFreq();  if(sumFreq  >  0)  {  sumFreq  =  Math.min(sumFreq,  sumFreq);  }	      if(sumFreq    >    0)    {    sumFreq    =    getSumFreq();    if(sumFreq    >    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
79	[BUG]  [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  short  sumFreq  =  getSumFreq();  [CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)  [FE]        AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  short  sumFreq  =  getSumFreq();  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	short  sumFreq  =  getSumFreq();	      long    sumFreq    =    getSumFreq();    	non-compiled	[CE]  variable  sumFreq  is  already  defined  in  method  getPct(Comparable<?>)	12	None	replace
81	[BUG]  [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  *=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    *=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(sumFreq  >  0)  {  for(int  i  =  0;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.get(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0;    i    <    sumFreq;    ++i)    {    sumFreq    +=    freqTable.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	while(v  >  0)  {  for(int  i  =  0,  sumFreq  =  sumFreq;  i  <  freqTable.size();  ++i)  {  sumFreq  +=  freqTable.getPct(i);  }	      if(sumFreq    >    0)    {    for(int    i    =    0,    sumFreq    =    sumFreq;    i    <    freqTable.size();    ++i)    {    sumFreq    +=    freqTable.getPct(i);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
84	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);  if(v!=  null)  {  sumFreq  =  getSumFreq();  }	  	non-compiled	[CE]  incompatible  types	16	None	add
85	[BUG]  [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  return(double)getCount(sumFreq)/(double)sumFreq;  if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }  [BUGGY]    }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	return(double)getCount(sumFreq)/(double)sumFreq;    if(getCount(sumFreq)/(double)sumFreq);  if(v  ==  null)  {  return  0;  }	  	non-compiled	[CE]  incompatible  types	16	None	add
86	[BUG]  [BUGGY]  Math.max(sumFreq,  sumFreq);  [CE]  missing  return  statement  [FE]              AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  Math.max(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.max(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  missing  return  statement	6	None	replace
87	[BUG]  [BUGGY]  Math.min(sumFreq,  sumFreq);  [CE]  missing  return  statement  [FE]                AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  Math.min(sumFreq,  sumFreq);  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	Math.min(sumFreq,  sumFreq);	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    }    	non-compiled	[CE]  missing  return  statement	6	None	replace
88	[BUG]  [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }    [BUGGY]  if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	if(v  <  =  0.0)  {  sumFreq  =  Math.max(sumFreq,  sumFreq);  sumFreq  =  Math.min(sumFreq,  sumFreq);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(sumFreq    <    =    0)    {    sumFreq    =    Math.max(sumFreq,    sumFreq);    sumFreq    =    Math.min(sumFreq,    sumFreq);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
