bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
2	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
4	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
6	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
7	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  Result  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    Result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	12	None	add
8	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  Result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  Result  [FE]            AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  Result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    Result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	12	None	add
9	[BUG]  [BUGGY]  result  +=  getCount(values,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  c);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  c);	  result    +=    getCount(values);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  result  +=  getCount(values.get(0),  sumFreq);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.get(0),  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(0),  sumFreq);	  result    +=    getCount(values.get(0),    value);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  result  +=  getCount(values.get(0),  v);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.get(0),  v);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(0),  v);	  result    +=    getCount(values.get(0),    value);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
12	[BUG]  [BUGGY]  result  +=  getCount(freqTable.get(0),  value);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.get(0),  value);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.get(0),  value);	  result    +=    getCount(values.get(0),    value);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  result  +=  getCount(sumFreqTable.size());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(sumFreqTable.size());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(sumFreqTable.size());	  result    +=    getCount(freqTable.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  Long  value  =  freqTable.lastValue()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastValue()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastValue()  -  1;	  Long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  Long  value  =  freqTable.firstKey()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.firstKey()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.firstKey()  -  1;	  Long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  +  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  +  1;	  Long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  v  =  getCount();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getCount();  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCount();	  v    =    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
18	[BUG]  [BUGGY]  v  =  getCumFreq()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getCumFreq()  +  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCumFreq()  +  1;	  v    =    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
19	[BUG]  [BUGGY]  v  =  getNumberValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getNumberValue();  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getNumberValue();	  v    =    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
20	[BUG]  [BUGGY]  int  lastValue  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  int  lastValue  =  freqTable.lastKey()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  lastValue  =  freqTable.lastKey()  -  1;	  int    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
21	[BUG]  [BUGGY]  double  lastValue  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  double  lastValue  =  freqTable.lastKey();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	double  lastValue  =  freqTable.lastKey();	  int    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
22	[BUG]  [BUGGY]  result  +=  getCount(freqTable.get(1));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.get(1));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.get(1));	  result    +=    getCount(values.get(1));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
23	[BUG]  [BUGGY]  result  +=  getCount(values.get(1),  value);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.get(1),  value);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(1),  value);	  result    +=    getCount(values.get(1));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
24	[BUG]  [BUGGY]  result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount()    -    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
25	[BUG]  [BUGGY]  result  +=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount();//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount()    -    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
26	[BUG]  [BUGGY]  Result  result  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  result  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  result  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount()    -    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
27	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  -  0xFFFF;	  long    lastValue    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
28	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  /  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  /  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  /  0xFFFF;	  long    lastValue    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
29	[BUG]  [BUGGY]  int  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  int  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  lastValue  =  freqTable.lastKey()  &  0xFFFF;	  long    lastValue    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
30	[BUG]  [BUGGY]  result  +=  getCount(freqTable.getKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.getKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.getKey());	          result    +=    getCount(freqTable.lastKey());    result    +=    getCount(freqTable.getKey());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  result  +=  getCount(freqTable.getSumFreq());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.getSumFreq());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.getSumFreq());	          result    +=    getCount(freqTable.lastKey());    result    +=    getCount(freqTable.getKey());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  v  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCount();//  v  is  comparable,  but  greater  than  the  last  value	  v    =    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
33	[BUG]  [BUGGY]  v  =  getNumber();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getNumber();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getNumber();//  v  is  comparable,  but  greater  than  the  last  value	  v    =    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
34	[BUG]  [BUGGY]  return  getCount(freqTable.lastKey(),  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(freqTable.lastKey(),  value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable.lastKey(),  value);	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
35	[BUG]  [BUGGY]  return  getCount(freqTable.firstKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(freqTable.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable.firstKey());	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
36	[BUG]  [BUGGY]  return  getCount(values.lastKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(values.lastKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(values.lastKey());	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
37	[BUG]  [BUGGY]  return  getCount(v.lastKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(v.lastKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(v.lastKey());	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
38	[BUG]  [BUGGY]  Long  value  =  c.getValue(v,  sumFreq);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(v,  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v,  sumFreq);	  Long    value    =    c.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
39	[BUG]  [BUGGY]  Long  value  =  c.getValue(v,  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(v,  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v,  freqTable.lastKey());	  Long    value    =    c.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
40	[BUG]  [BUGGY]  Long  value  =  c.getValue(v,  sumFreqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(v,  sumFreqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v,  sumFreqTable.lastKey());	  Long    value    =    c.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
41	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  -  0xFFFF;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  -  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  -  0xFFFF;	  Long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
42	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xFFFFL;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  &  0xFFFFL;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  &  0xFFFFL;	  Long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
43	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  /  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  /  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  /  0xFFFF;	  Long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
44	[BUG]  [BUGGY]  result  +=  getCount(v.firstKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(v.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(v.firstKey());	  result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
45	[BUG]  [BUGGY]  result  +=  getCount(values.firstKey());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.firstKey());	  result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
46	[BUG]  [BUGGY]  result  +=  getCount(sumFreqTable.firstKey());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(sumFreqTable.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(sumFreqTable.firstKey());	  result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
47	[BUG]  [BUGGY]  Result  +=  getCount(values.size());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(values.size());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(values.size());	  result    +=    getCount(values.size()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  result  -=  getCount(values.size());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount(values.size());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount(values.size());	  result    +=    getCount(values.size()    -    2);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  Long  value  =  freqTable.getValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.getValue()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.getValue()  -  1;	  Long    value    =    freqTable.nextKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
50	[BUG]  [BUGGY]  Long  value  =  freqTable.nextValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.nextValue()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.nextValue()  -  1;	  Long    value    =    freqTable.nextKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
51	[BUG]  [BUGGY]  double  value  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  double  value  =  freqTable.lastKey();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	double  value  =  freqTable.lastKey();	  int    value    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
52	[BUG]  [BUGGY]  Long  value  =  c.getValue(freqTable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(freqTable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(freqTable);	  Long    value    =    v.getValue(freqTable);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
53	[BUG]  [BUGGY]  Integer  value  =  freqTable.getValue(v);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Integer  value  =  freqTable.getValue(v);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Integer  value  =  freqTable.getValue(v);	  Long    value    =    v.getValue(freqTable);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
54	[BUG]  [BUGGY]  long  value  =  freqTable.getValue(v);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  value  =  freqTable.getValue(v);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.getValue(v);	  Long    value    =    v.getValue(freqTable);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
55	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  value);//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  value);//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  value);//  v  is  comparable,  but  greater  than  the  last  value	  result    +=    getCount(freqTable.lastKey());//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
56	[BUG]  [BUGGY]  result  +=  getCount(freqTable.firstKey());//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.firstKey());//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.firstKey());//  v  is  comparable,  but  greater  than  the  last  value	  result    +=    getCount(freqTable.lastKey());//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
57	[BUG]  [BUGGY]  result  +=  getCount(values.lastKey());//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.lastKey());//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.lastKey());//  v  is  comparable,  but  greater  than  the  last  value	  result    +=    getCount(freqTable.lastKey());//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
58	[BUG]  [BUGGY]  result  +=  getCount(values.getValue());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.getValue());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.getValue());	  result    +=    getCount(values.nextValue);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  result  +=  getCount(values.next());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.next());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.next());	  result    +=    getCount(values.nextValue);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  result  +=  getCount(values.getLongValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.getLongValue());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.getLongValue());	  result    +=    getCount(values.nextValue);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  int  value  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  int  value  =  freqTable.lastKey()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  value  =  freqTable.lastKey()  -  1;	  long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
62	[BUG]  [BUGGY]  long  value  =  freqTable.lastValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  value  =  freqTable.lastValue()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastValue()  -  1;	  long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
63	[BUG]  [BUGGY]  Long  value  =  c.getValue(v,  freqTable);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(v,  freqTable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v,  freqTable);	  Long    value    =    freqTable.getValue(v,    c);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
64	[BUG]  [BUGGY]  Long  value  =  freqTable.getValue(v,  c).longValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.getValue(v,  c).longValue();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.getValue(v,  c).longValue();	  Long    value    =    freqTable.getValue(v,    c);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
65	[BUG]  [BUGGY]  Long  value  =  freqTable.getValue(v,  c,  sumFreq);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.getValue(v,  c,  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.getValue(v,  c,  sumFreq);	  Long    value    =    freqTable.getValue(v,    c);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
66	[BUG]  [BUGGY]  result  +=  getCount(freqTable.size()  -  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.size()  -  2);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.size()  -  2);	  result    +=    getCount(freqTable.size());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  result  +=  getCount(variables.size());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(variables.size());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(variables.size());	  result    +=    getCount(variables.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
68	[BUG]  [BUGGY]  result  -=  getCount(freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount(freqTable.lastKey());	          result    +=    getCount(freqTable.lastKey());    result    -=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  Result  result  +=  getCount(freqTable.lastKey());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  result  +=  getCount(freqTable.lastKey());	          result    +=    getCount(freqTable.lastKey());    long    result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  ';'  expected	54	None	replace
70	[BUG]  [BUGGY]  return  getCount(result);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(result);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(result);	  return    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
71	[BUG]  [BUGGY]  return  getCount(freqTable,  v);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(freqTable,  v);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable,  v);	  return    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
72	[BUG]  [BUGGY]  return  getCount(values);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(values);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(values);	  return    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
73	[BUG]  [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v,  c);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v,  c);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  this.sumFreqTable.getValue(v,  c);	  Long    value    =    this.sumFreqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
74	[BUG]  [BUGGY]  Long  value  =  this.sumFreqTable.getLongValue(v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  this.sumFreqTable.getLongValue(v);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  this.sumFreqTable.getLongValue(v);	  Long    value    =    this.sumFreqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
75	[BUG]  [BUGGY]  result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }	  return    getCount()    -    1;//    v    is    comparable,    but    greater    than    the    last    value    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
76	[BUG]  [BUGGY]  return  getCumFreq()  /  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq()  /  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq()  /  1;	  return    getCumFreq()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
77	[BUG]  [BUGGY]  Result  +=  getCount(freqTable.lastKey(),  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(freqTable.lastKey(),  value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(freqTable.lastKey(),  value);	  Result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
78	[BUG]  [BUGGY]  Result  +=  getCount(freqTable.firstKey());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(freqTable.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(freqTable.firstKey());	  Result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  Result  +=  getCount(freqTable.lastKey()  -  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(freqTable.lastKey()  -  1);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(freqTable.lastKey()  -  1);	  Result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
80	[BUG]  [BUGGY]  Result  +=  getCount(v.lastKey());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(v.lastKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(v.lastKey());	  Result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
81	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.get(v));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.get(v));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.get(v));	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
82	[BUG]  [BUGGY]  result  +=  getCount(v,  freqTable.get(0));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(v,  freqTable.get(0));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(v,  freqTable.get(0));	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
83	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.get(0),  c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.get(0),  c);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.get(0),  c);	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
84	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.getValue(0));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.getValue(0));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.getValue(0));	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
85	[BUG]  [BUGGY]  long  value  =  freqTable.lastKey()  -  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  value  =  freqTable.lastKey()  -  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastKey()  -  0xFFFF;	  long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
86	[BUG]  [BUGGY]  long  value  =  freqTable.lastKey()  /  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  value  =  freqTable.lastKey()  /  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastKey()  /  0xFFFF;	  long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
87	[BUG]  [BUGGY]  long  value  =  freqTable.lastKey()  &  0xFFFFL;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  value  =  freqTable.lastKey()  &  0xFFFFL;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  value  =  freqTable.lastKey()  &  0xFFFFL;	  long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
88	[BUG]  [BUGGY]  Long  value  =  c.firstKey();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.firstKey();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.firstKey();	  Long    value    =    freqTable.firstKey();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
89	[BUG]  [BUGGY]  result  +=  getCount(freqTable.firstKey(),  value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.firstKey(),  value);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.firstKey(),  value);	  result    +=    getCount(freqTable.lastKey(),    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
90	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  sumFreq);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  sumFreq);	  result    +=    getCount(freqTable.lastKey(),    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
91	[BUG]  [BUGGY]  result  +=  getCount(value.lastKey(),  freqTable);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(value.lastKey(),  freqTable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(value.lastKey(),  freqTable);	  result    +=    getCount(freqTable.lastKey(),    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
92	[BUG]  [BUGGY]  result  +=  getCount(freqTable.get(0),  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.get(0),  c);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.get(0),  c);	  result    +=    getCount(values.get(0),    c);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
93	[BUG]  [BUGGY]  result  +=  getCount(values.get(0),  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.get(0),  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.get(0),  freqTable.lastKey());	  result    +=    getCount(values.get(0),    c);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
94	[BUG]  [BUGGY]  return  getCount()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount()  +  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  +  1;	  return    getCount();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
95	[BUG]  [BUGGY]  return  getCount()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount()  -  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  -  1;	  return    getCount();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
96	[BUG]  [BUGGY]  return  getCount(result);//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(result);//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(result);//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount(v);//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
97	[BUG]  [BUGGY]  Result  <?>  result  =  getCount(v);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  <?>  result  =  getCount(v);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  <?>  result  =  getCount(v);	  return    getCount(v);//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
99	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
100	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	14	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
102	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
104	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
106	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.firstKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());	  	compilable	  [FE]  AssertionFailedError  	14	1	add
107	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  -  0xff;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  -  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  -  0xff;	  Long    value    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
108	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  /  0xff;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  /  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  /  0xff;	  Long    value    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
109	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  %  0xff;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  %  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  %  0xff;	  Long    value    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
110	[BUG]  [BUGGY]  result  +=  getCount(freqTable.secondKey()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.secondKey()  -  1);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.secondKey()  -  1);	  result    +=    getCount(freqTable.secondKey());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
111	[BUG]  [BUGGY]  result  +=  getCount(v.secondKey());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(v.secondKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(v.secondKey());	  result    +=    getCount(freqTable.secondKey());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
113	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
115	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
116	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  Result  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    Result  +=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	55	None	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
118	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
119	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  =  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.secondKey());  result  =  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol	55	None	add
120	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  sumFreqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  sumFreqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  sumFreqTable.lastKey());	  result    +=    getCount(freqTable.lastKey(),    freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
121	[BUG]  [BUGGY]  result  +=  getCount(freqTable.firstKey(),  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.firstKey(),  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.firstKey(),  freqTable.lastKey());	  result    +=    getCount(freqTable.lastKey(),    freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
122	[BUG]  [BUGGY]  result  +=  getCount(freqTable.firstKey()  -  1);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.firstKey()  -  1);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.firstKey()  -  1);	  result    +=    getCount(freqTable.lastKey()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
123	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey())-  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey())-  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey())-  1;	  result    +=    getCount(freqTable.lastKey()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
124	[BUG]  [BUGGY]  Long  value  =  freqTable.getValue();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.getValue();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.getValue();	  Long    value    =    freqTable.next();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
125	[BUG]  [BUGGY]  result  +=  getCount(v,  sumFreq);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(v,  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(v,  sumFreq);	  result    +=    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
126	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey()  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  freqTable.lastKey()  -  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey()  -  1;	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
127	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  freqTable.lastKey()  +  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey()  +  1;	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
128	[BUG]  [BUGGY]  Integer  lastValue  =  freqTable.lastKey();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Integer  lastValue  =  freqTable.lastKey();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Integer  lastValue  =  freqTable.lastKey();	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
129	[BUG]  [BUGGY]  return  getCumFreq(v,  result);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq(v,  result);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq(v,  result);	  return    getCumFreq(v);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
130	[BUG]  [BUGGY]  return  getCumFreq(v,  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq(v,  value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq(v,  value);	  return    getCumFreq(v);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
132	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
134	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.firstKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
135	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  Result  [FE]        AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    Result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol  Result	9	None	add
136	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.lastKey());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.lastKey());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
137	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.getKey());  result  +=  getCount(freqTable.getKey());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.getKey());  result  +=  getCount(freqTable.getKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.getKey());  result  +=  getCount(freqTable.getKey());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
138	[BUG]  [BUGGY]  result  +=  getCount(freqTable.get(0),  sumFreq);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.get(0),  sumFreq);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.get(0),  sumFreq);	  result    +=    getCount(freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
139	[BUG]  [BUGGY]  result  +=  getCount(freqTable.getValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.getValue());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.getValue());	  result    +=    getCount(freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
140	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  0xff;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  -  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  -  0xff;	  long    lastValue    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
141	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  /  0xff;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  /  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  /  0xff;	  long    lastValue    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
142	[BUG]  [BUGGY]  int  lastValue  =  freqTable.lastKey()  &  0xff;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  int  lastValue  =  freqTable.lastKey()  &  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  lastValue  =  freqTable.lastKey()  &  0xff;	  long    lastValue    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
144	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
146	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    -=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	12	1	add
147	[BUG]  [BUGGY]  Long  value  =  freqTable.lastKey()  +  0xFFFF;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastKey()  +  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastKey()  +  0xFFFF;	  Long    value    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
148	[BUG]  [BUGGY]  result  +=  getCount(freqTable.secondKey(),  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.secondKey(),  value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.secondKey(),  value);	  result    +=    getCount(freqTable.secondKey());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
149	[BUG]  [BUGGY]  return  getCount(value);//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(value);//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(value);//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount(v);//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
150	[BUG]  [BUGGY]  return  getCount(value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(value);	  return    getCount(v);//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
152	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    =    getCount(freqTable.lastKey());    result  =  getCount(freqTable.lastKey());  result  =  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	55	1	add
153	[BUG]  [BUGGY]  result  =  c.compare(v,  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  =  c.compare(v,  freqTable.lastKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  =  c.compare(v,  freqTable.lastKey());	  return    0;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
154	[BUG]  [BUGGY]  result  =  c.compare(v,  freqTable.lastKey())-  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  =  c.compare(v,  freqTable.lastKey())-  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  =  c.compare(v,  freqTable.lastKey())-  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
155	[BUG]  [BUGGY]  result  +=  getCount(freqTable.secondKey(),  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.secondKey(),  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.secondKey(),  freqTable.lastKey());	  result    +=    getCount(freqTable.lastKey(),    freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
156	[BUG]  [BUGGY]  return  getCumFreq().doubleValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq().doubleValue();  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq().doubleValue();	  return    getCumFreq()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
157	[BUG]  [BUGGY]  Long  value  =  c.getValue(v,  sumFreqTable);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  c.getValue(v,  sumFreqTable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  c.getValue(v,  sumFreqTable);	  Long    value    =    c.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
158	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFF  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFF  +  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  &  0xFFFF  +  1;	  long    lastValue    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
159	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFFL;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0xFFFFL;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  &  0xFFFFL;	  long    lastValue    =    freqTable.lastKey()    &    0xFFFF;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
160	[BUG]  [BUGGY]  return  getCumFreq(value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq(value);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq(value);	  return    getCumFreq(v);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
161	[BUG]  [BUGGY]  return  getCumFreq(v,  c);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCumFreq(v,  c);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq(v,  c);	  return    getCumFreq(v);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
162	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey()  /  2;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  freqTable.lastKey()  /  2;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey()  /  2;	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
163	[BUG]  [BUGGY]  result  =  getCount(freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  =  getCount(freqTable.lastKey());	          result    +=    getCount(freqTable.lastKey());    result    =    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
164	[BUG]  [BUGGY]  Long  value  =  this.values.getValue(freqTable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  this.values.getValue(freqTable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  this.values.getValue(freqTable);	  Long    value    =    v.getValue(freqTable);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
165	[BUG]  [BUGGY]  return  getCount()  /  2;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount()  /  2;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  /  2;	  return    getCount();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
166	[BUG]  [BUGGY]  Long  value  =  freqTable.nextValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.nextValue();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.nextValue();	  Long    value    =    freqTable.nextKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
167	[BUG]  [BUGGY]  result  +=  getCount(freqTable.nextKey());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.nextKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.nextKey());	          result    +=    getCount(freqTable.lastKey());    result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
168	[BUG]  [BUGGY]  v  =  getCumFreq(v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getCumFreq(v);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCumFreq(v);	  v    =    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
169	[BUG]  [BUGGY]  result  +=  getCount(variables.firstKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(variables.firstKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(variables.firstKey());	  result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
170	[BUG]  [BUGGY]  result  -=  getCount(freqTable.firstKey());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount(freqTable.firstKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount(freqTable.firstKey());	          result    +=    getCount(freqTable.lastKey());    result    -=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
171	[BUG]  [BUGGY]  int  lastValue  =  freqTable.lastKey()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  int  lastValue  =  freqTable.lastKey()  +  1;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	int  lastValue  =  freqTable.lastKey()  +  1;	  int    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
173	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  -=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.lastKey());	  	compilable	  [FE]  AssertionFailedError  	9	1	add
174	[BUG]  [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.secondKey());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]          result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.lastKey());  result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.secondKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	                result        +=        getCount(freqTable.lastKey());        result    +=    getCount(freqTable.lastKey());    result  +=  getCount(freqTable.secondKey());  result  +=  getCount(freqTable.secondKey());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
175	[BUG]  [BUGGY]  return  getCount(freqTable.lastKey()  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(freqTable.lastKey()  -  1);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable.lastKey()  -  1);	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
176	[BUG]  [BUGGY]  Result  +=  getCount(values.lastKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Result  +=  getCount(values.lastKey());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Result  +=  getCount(values.lastKey());	  Result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
177	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  larger  than  the  last  value  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount();//  v  is  comparable,  but  larger  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  larger  than  the  last  value	  return    getCount()    +    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
178	[BUG]  [BUGGY]  result  -=  getCount(v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount(v);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount(v);	  result    +=    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
179	[BUG]  [BUGGY]  result  +=  getCount(variable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(variable);  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(variable);	  result    +=    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  v  =  getNumberOfValues();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getNumberOfValues();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getNumberOfValues();//  v  is  comparable,  but  greater  than  the  last  value	  v    =    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
181	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.get(result));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.get(result));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.get(result));	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
182	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.getKey());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.getKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.getKey());	  result    +=    getCount(values,    freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
183	[BUG]  [BUGGY]  Long  value  =  freqTable.lastValue();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  freqTable.lastValue();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  freqTable.lastValue();	  Long    value    =    freqTable.lastKey()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
184	[BUG]  [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  lastValue  =  freqTable.lastKey()  &  0;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  lastValue  =  freqTable.lastKey()  &  0;	  long    lastValue    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
185	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey()  &  0xff;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  freqTable.lastKey()  &  0xff;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey()  &  0xff;	  long    lastValue    =    freqTable.lastKey()    &    0xff;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
186	[BUG]  [BUGGY]  result  +=  getCount(values,  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values,  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values,  freqTable.lastKey());	  result    +=    getCount(values);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
187	[BUG]  [BUGGY]  result  +=  getCount(freqTable.getValue(0));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.getValue(0));  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.getValue(0));	  result    +=    getCount(freqTable.get(0));    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
188	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.getKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.getKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  freqTable.getKey());	          result    +=    getCount(freqTable.lastKey());    result    +=    getCount(freqTable.getKey());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
189	[BUG]  [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v,  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  value  =  this.sumFreqTable.getValue(v,  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  value  =  this.sumFreqTable.getValue(v,  freqTable.lastKey());	  Long    value    =    this.sumFreqTable.getValue(v);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
190	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.lastValue());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  freqTable.lastValue());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  freqTable.lastValue());	  result    +=    getCount(freqTable.lastKey(),    freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
191	[BUG]  [BUGGY]  result  +=  getCount(value.lastKey(),  freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(value.lastKey(),  freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(value.lastKey(),  freqTable.lastKey());	  result    +=    getCount(freqTable.lastKey(),    value);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
192	[BUG]  [BUGGY]  return  getCount(variable);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(variable);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(variable);	  return    getCount(v);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
193	[BUG]  [BUGGY]  Long  lastValue  =  c.lastKey();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  c.lastKey();  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  c.lastKey();	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
194	[BUG]  [BUGGY]  Long  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Long  lastValue  =  freqTable.lastKey()  &  0xFFFF;  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Long  lastValue  =  freqTable.lastKey()  &  0xFFFF;	  Long    lastValue    =    freqTable.lastKey();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
195	[BUG]  [BUGGY]  return  getCount(freqTable.lastKey(),  v);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount(freqTable.lastKey(),  v);  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount(freqTable.lastKey(),  v);	  return    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
196	[BUG]  [BUGGY]  result  -=  getCount(freqTable.size());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  -=  getCount(freqTable.size());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  -=  getCount(freqTable.size());	  result    +=    getCount(freqTable.size()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
197	[BUG]  [BUGGY]  result  +=  getCount(values.lastKey());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(values.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(values.lastKey());	  result    +=    getCount(values.nextValue);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
198	[BUG]  [BUGGY]  return  getCount()  /  1;//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  getCount()  /  1;//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount()  /  1;//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount()    +    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
199	[BUG]  [BUGGY]  Return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  Return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	Return  getCount();//  v  is  comparable,  but  greater  than  the  last  value	  return    getCount()    +    1;//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  ';'  expected	53	None	replace
200	[BUG]  [BUGGY]  return  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  return  1;  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  v  =  getValue();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getValue();  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getValue();	  v    =    getCumFreq();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
202	[BUG]  [BUGGY]  v  =  getValue();//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getValue();//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getValue();//  v  is  comparable,  but  greater  than  the  last  value	  v    =    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
203	[BUG]  [BUGGY]  v  =  getCumFreq();//  v  is  comparable,  but  less  than  the  last  value  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  v  =  getCumFreq();//  v  is  comparable,  but  less  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	v  =  getCumFreq();//  v  is  comparable,  but  less  than  the  last  value	  v    =    getCumFreq();//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
204	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastValue());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastValue());  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastValue());	  result    +=    getCount(freqTable.firstKey());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
205	[BUG]  [BUGGY]  result  +=  getCount(freqTable.lastKey(),  v);//  v  is  comparable,  but  greater  than  the  last  value  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  result  +=  getCount(freqTable.lastKey(),  v);//  v  is  comparable,  but  greater  than  the  last  value  [BUGGY]      }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	result  +=  getCount(freqTable.lastKey(),  v);//  v  is  comparable,  but  greater  than  the  last  value	  result    +=    getCount(freqTable.lastKey());//    v    is    comparable,    but    greater    than    the    last    value    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
206	[BUG]  [BUGGY]  long  result  =  getCount(freqTable.lastKey());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {      [BUGGY]  long  result  =  getCount(freqTable.lastKey());  [BUGGY]      return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	long  result  =  getCount(freqTable.lastKey());	          result    +=    getCount(freqTable.lastKey());    long    result    +=    getCount(freqTable.lastKey());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
