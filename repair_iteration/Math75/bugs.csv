bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return getCumPct((Comparable<?>) v); [FE] AssertionFailedError [CONTEXT] public double getPct(Object v) { [BUGGY] return getCumPct((Comparable<?>) v); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Object v [VARIABLES] Object v boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(Object v) { [BUGGY] [BUGGY] return getCumPct((Comparable<?>) v); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Object v [VARIABLES] Object v boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	add	
3	[BUG] [BUGGY] return getPct(Long.valueOf(v)); [FE] AssertionFailedError [CONTEXT] public double getPct(long v) { [BUGGY] return getPct(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(long v) { [BUGGY] [BUGGY] return getPct(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	
5	[BUG] [BUGGY] return getPct(Long.valueOf(v)); [FE] AssertionFailedError [CONTEXT] public double getPct(int v) { [BUGGY] return getPct(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  int v [VARIABLES] boolean TreeMap freqTable long result serialVersionUID sumFreq v int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(int v) { [BUGGY] [BUGGY] return getPct(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  int v [VARIABLES] boolean TreeMap freqTable long result serialVersionUID sumFreq v int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	
7	[BUG] [BUGGY] return getCumFreq(((Integer) v).longValue()); [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { [BUGGY] return getCumFreq(((Integer) v).longValue()); [BUGGY] } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { [BUGGY] [BUGGY] return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	add	
9	[BUG] [BUGGY] return getCumFreq(Long.valueOf(v)); [FE] AssertionFailedError [CONTEXT] public long getCumFreq(long v) { [BUGGY] return getCumFreq(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(long v) { [BUGGY] [BUGGY] return getCumFreq(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	add	
11	[BUG] [BUGGY] addValue(Long.valueOf(v)); [FE] AssertionFailedError [CONTEXT] public void addValue(long v) { [BUGGY] addValue(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(long v) { [BUGGY] [BUGGY] addValue(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	add	
13	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void addValue(long v) { addValue(Long.valueOf(v)); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(long v) { addValue(Long.valueOf(v)); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	add	
15	[BUG] [BUGGY] return (double) getCount(v) / (double) sumFreq; [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] return (double) getCount(v) / (double) sumFreq; [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] [BUGGY] return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	
17	[BUG] [BUGGY] return getSumFreq();// v is comparable, but greater than the last value } [FE] AssertionFailedError [CONTEXT] } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [BUGGY] return getSumFreq();// v is comparable, but greater than the last value  } [BUGGY] } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [BUGGY] [BUGGY] return getSumFreq();// v is comparable, but greater than the last value  } } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	
19	[BUG] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [BUGGY] } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	
21	[BUG] [BUGGY] result += iterator.next().longValue(); [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ [BUGGY] result += iterator.next().longValue(); [BUGGY] } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	218	218	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ [BUGGY] [BUGGY] result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	218	218	1	add	
23	[BUG] [BUGGY] result = count.longValue(); [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { [BUGGY] result = count.longValue(); [BUGGY] } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	251	251	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { [BUGGY] [BUGGY] result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	251	251	1	add	
25	[BUG] [BUGGY] final long sumFreq = getSumFreq(); [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { [BUGGY] final long sumFreq = getSumFreq(); [BUGGY] if (sumFreq == 0) { return Double.NaN; } return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	316	316	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { [BUGGY] [BUGGY] final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	316	316	1	add	
27	[BUG] [BUGGY] if (sumFreq == 0) { [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); [BUGGY] if (sumFreq == 0) { [BUGGY] return Double.NaN; } return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	317	317	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); [BUGGY] [BUGGY] if (sumFreq == 0) { return Double.NaN; } return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	317	317	1	add	
29	[BUG] [BUGGY] if (v instanceof Integer) { [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } [BUGGY] if (v instanceof Integer) { [BUGGY] return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	385	385	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } [BUGGY] [BUGGY] if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	385	385	1	add	
31	[BUG] [BUGGY] Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } [BUGGY] Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); [BUGGY] if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	388	388	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } [BUGGY] [BUGGY] Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	388	388	1	add	
33	[BUG] [BUGGY] if (c == null) { [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); [BUGGY] if (c == null) { [BUGGY] c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	389	389	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); [BUGGY] [BUGGY] if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	389	389	1	add	
35	[BUG] [BUGGY] c = new NaturalComparator(); [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { [BUGGY] c = new NaturalComparator(); [BUGGY] } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	390	390	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { [BUGGY] [BUGGY] c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	390	390	1	add	
37	[BUG] [BUGGY] long result = 0; [FE] AssertionFailedError [CONTEXT] if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } [BUGGY] long result = 0; [BUGGY]  try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable }  [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	392	392	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } [BUGGY] [BUGGY] long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable }  [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	392	392	1	add	
39	[BUG] [BUGGY] Long value = freqTable.get(v); [FE] AssertionFailedError [CONTEXT] if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { [BUGGY] Long value = freqTable.get(v); [BUGGY] if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	395	395	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { [BUGGY] [BUGGY] Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	395	395	1	add	
41	[BUG] [BUGGY] if (value != null) { [FE] AssertionFailedError [CONTEXT] return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); [BUGGY] if (value != null) { [BUGGY] result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value }  [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	396	396	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); [BUGGY] [BUGGY] if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value }  [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	396	396	1	add	
43	[BUG] [BUGGY] result = value.longValue(); [FE] AssertionFailedError [CONTEXT] } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [BUGGY] result = value.longValue(); [BUGGY] } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	397	397	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [BUGGY] [BUGGY] result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	397	397	1	add	
45	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable [BUGGY] } [BUGGY]  if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	401	401	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } long result = 0; try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable [BUGGY] [BUGGY] } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	401	401	1	add	
47	[BUG] [BUGGY] if (c.compare(v, freqTable.firstKey()) < 0) { [FE] AssertionFailedError [CONTEXT] try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } [BUGGY] if (c.compare(v, freqTable.firstKey()) < 0) { [BUGGY] return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	403	403	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] try { Long value = freqTable.get(v); if (value != null) { result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } [BUGGY] [BUGGY] if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	403	403	1	add	
49	[BUG] [BUGGY] if (c.compare(v, freqTable.lastKey()) >= 0) { [FE] AssertionFailedError [CONTEXT] result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } [BUGGY] if (c.compare(v, freqTable.lastKey()) >= 0) { [BUGGY] return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	407	407	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] result = value.longValue(); } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } [BUGGY] [BUGGY] if (c.compare(v, freqTable.lastKey()) >= 0) { return getSumFreq();// v is comparable, but greater than the last value } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	407	407	1	add	
51	[BUG] [BUGGY] return (double) getCumFreq(v) / (double) sumFreq; [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] return (double) getCumFreq(v) / (double) sumFreq; [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	495	495	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] [BUGGY] return (double) getCumFreq(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	495	495	1	add	
53	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void addValue(int v) { addValue(Long.valueOf(v)); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  int v [VARIABLES] boolean TreeMap freqTable long serialVersionUID int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	159	159	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(int v) { addValue(Long.valueOf(v)); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  int v [VARIABLES] boolean TreeMap freqTable long serialVersionUID int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	159	159	1	add	
55	[BUG] [BUGGY] long result = 0; [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { [BUGGY] long result = 0; [BUGGY] Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	215	215	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { [BUGGY] [BUGGY] long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	215	215	1	add	
57	[BUG] [BUGGY] Iterator<Long> iterator = freqTable.values().iterator(); [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; [BUGGY] Iterator<Long> iterator = freqTable.values().iterator(); [BUGGY] while (iterator.hasNext()){ result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	216	216	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; [BUGGY] [BUGGY] Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	216	216	1	add	
59	[BUG] [BUGGY] while (iterator.hasNext()){ [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); [BUGGY] while (iterator.hasNext()){ [BUGGY] result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	217	217	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); [BUGGY] [BUGGY] while (iterator.hasNext()){ result += iterator.next().longValue(); } return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	217	217	1	add	
61	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ result += iterator.next().longValue(); } [BUGGY] return result; [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	220	220	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getSumFreq() { long result = 0; Iterator<Long> iterator = freqTable.values().iterator(); while (iterator.hasNext()){ result += iterator.next().longValue(); } [BUGGY] [BUGGY] return result; } [CLASS] Frequency NaturalComparator [METHOD] getSumFreq [RETURN_TYPE] long  [VARIABLES] Iterator iterator boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	220	220	1	add	
63	[BUG] [BUGGY] if (v instanceof Integer) { [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { [BUGGY] if (v instanceof Integer) { [BUGGY] return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	244	244	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { [BUGGY] [BUGGY] if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	244	244	1	add	
65	[BUG] [BUGGY] long result = 0; [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } [BUGGY] long result = 0; [BUGGY] try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	247	247	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } [BUGGY] [BUGGY] long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	247	247	1	add	
67	[BUG] [BUGGY] Long count =freqTable.get(v); [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { [BUGGY] Long count =freqTable.get(v); [BUGGY] if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	249	249	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { [BUGGY] [BUGGY] Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	249	249	1	add	
69	[BUG] [BUGGY] if (count != null) { [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); [BUGGY] if (count != null) { [BUGGY] result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	250	250	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCount(Comparable<?> v) { if (v instanceof Integer) { return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); [BUGGY] [BUGGY] if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	250	250	1	add	
71	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  [BUGGY] } [BUGGY] return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	255	255	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return getCount(((Integer) v).longValue()); } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  [BUGGY] [BUGGY] } return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	255	255	1	add	
73	[BUG] [BUGGY] return result; [FE] AssertionFailedError [CONTEXT] } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } [BUGGY] return result; [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	256	256	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } long result = 0; try { Long count =freqTable.get(v); if (count != null) { result = count.longValue(); } } catch (ClassCastException ex) {  } [BUGGY] [BUGGY] return result; } [CLASS] Frequency NaturalComparator [METHOD] getCount [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Long count Comparable v boolean TreeMap freqTable long result serialVersionUID v ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	256	256	1	add	
75	[BUG] [BUGGY] if (getSumFreq() == 0) { [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { [BUGGY] if (getSumFreq() == 0) { [BUGGY] return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	382	382	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public long getCumFreq(Comparable<?> v) { [BUGGY] [BUGGY] if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	382	382	1	add	
77	[BUG] [BUGGY] final long sumFreq = getSumFreq(); [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { [BUGGY] final long sumFreq = getSumFreq(); [BUGGY] if (sumFreq == 0) { return Double.NaN; } return (double) getCumFreq(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	491	491	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { [BUGGY] [BUGGY] final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } return (double) getCumFreq(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	491	491	1	add	
79	[BUG] [BUGGY] if (sumFreq == 0) { [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { final long sumFreq = getSumFreq(); [BUGGY] if (sumFreq == 0) { [BUGGY] return Double.NaN; } return (double) getCumFreq(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	492	492	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double getCumPct(Comparable<?> v) { final long sumFreq = getSumFreq(); [BUGGY] [BUGGY] if (sumFreq == 0) { return Double.NaN; } return (double) getCumFreq(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getCumPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4082482904638631	492	492	1	add	
81	[BUG] [BUGGY] Comparable<?> obj = v; [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ [BUGGY] Comparable<?> obj = v; [BUGGY] if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	133	133	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ [BUGGY] [BUGGY] Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	133	133	1	add	
83	[BUG] [BUGGY] if (v instanceof Integer) { [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; [BUGGY] if (v instanceof Integer) { [BUGGY] obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	134	134	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; [BUGGY] [BUGGY] if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) { [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	134	134	1	add	
85	[BUG] [BUGGY] Long count = freqTable.get(obj); [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { [BUGGY] Long count = freqTable.get(obj); [BUGGY] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	138	138	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { [BUGGY] [BUGGY] Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	138	138	1	add	
87	[BUG] [BUGGY] if (count == null) { [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); [BUGGY] if (count == null) { [BUGGY] freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	139	139	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); [BUGGY] [BUGGY] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	139	139	1	add	
89	[BUG] [BUGGY] freqTable.put(obj, Long.valueOf(1)); [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { [BUGGY] freqTable.put(obj, Long.valueOf(1)); [BUGGY] } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	140	140	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { [BUGGY] [BUGGY] freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	140	140	1	add	
91	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); [BUGGY] } [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	149	149	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); [BUGGY] [BUGGY] } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	149	149	1	add	
93	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	150	150	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] freqTable.put(obj, Long.valueOf(1)); } else { freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	150	150	1	add	
95	[BUG] [BUGGY] addValue(Long.valueOf(v)); [FE] AssertionFailedError [CONTEXT] public void addValue(int v) { [BUGGY] addValue(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  int v [VARIABLES] boolean TreeMap freqTable long serialVersionUID int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	158	158	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(int v) { [BUGGY] [BUGGY] addValue(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  int v [VARIABLES] boolean TreeMap freqTable long serialVersionUID int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	158	158	1	add	
97	[BUG] [BUGGY] public Frequency() { [FE] AssertionFailedError [CONTEXT] [BUGGY] public Frequency() { [BUGGY] freqTable = new TreeMap<Comparable<?>, Long>(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.35355339059327373	59	59	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public Frequency() { freqTable = new TreeMap<Comparable<?>, Long>(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.35355339059327373	59	59	1	add	
99	[BUG] [BUGGY] freqTable = new TreeMap<Comparable<?>, Long>(); [FE] AssertionFailedError [CONTEXT] public Frequency() { [BUGGY] freqTable = new TreeMap<Comparable<?>, Long>(); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.35355339059327373	60	60	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Frequency() { [BUGGY] [BUGGY] freqTable = new TreeMap<Comparable<?>, Long>(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.35355339059327373	60	60	1	add	
