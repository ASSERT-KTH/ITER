bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
19	[BUG] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [BUGGY] } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	
