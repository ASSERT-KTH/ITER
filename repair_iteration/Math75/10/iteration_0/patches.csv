bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
2	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
4	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  /  1));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
5	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()));  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]        AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.doubleValue()));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.doubleValue()));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	19	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	  	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
7	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	  	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	compilable	  [FE]  AssertionFailedError  	19	3	replace
8	[BUG]  [BUGGY]    freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1));  [CE]  no  suitable  method  found  for  valueOf(long)  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Integer.valueOf(count.longValue()  +  1));		non-compiled	[CE]  no  suitable  method  found  for  valueOf(long)	20	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    obj  =  Long.valueOf(count.longValue()  +  1);		compilable	  [FE]  AssertionFailedError  	20	4	add
10	[BUG]  [BUGGY]    obj  =  Long.valueOf(count.longValue()  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    obj  =  Long.valueOf(count.longValue()  +  1);  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    obj  =  Long.valueOf(count.longValue()  +  1);		compilable	  [FE]  AssertionFailedError  	20	4	add
11	[BUG]  [BUGGY]    TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj);  [CE]  wrong  number  of  type  arguments;  required  2  [FE]        AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj);  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    TreeMap  <?>  freqTable  =(TreeMap  <?>)freqTable.get(obj);		non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	20	None	add
12	[BUG]  [BUGGY]    freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]          AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Integer.valueOf(count.intValue()  +  1));		non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	20	None	add
13	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  v);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>)  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  v);  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()),  v);	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Comparable<CAP#2>)	19	None	replace
14	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(v.longValue()  +  1));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(v.longValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(v.longValue()  +  1));		non-compiled	[CE]  cannot  find  symbol	20	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  Long.valueOf(0));		compilable	  [FE]  AssertionFailedError  	20	1	add
16	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(0));		compilable	  [FE]  AssertionFailedError  	20	1	add
17	[BUG]  [BUGGY]    freqTable.put(obj,  Integer.valueOf(v.longValue()  +  1));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Integer.valueOf(v.longValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Integer.valueOf(v.longValue()  +  1));		non-compiled	[CE]  cannot  find  symbol	20	None	add
18	[BUG]  [BUGGY]    freqTable.put(obj,  Integer.valueOf(0));  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)  [FE]          AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Integer.valueOf(0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Integer.valueOf(0));		non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Integer)	20	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  null);  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  null);		compilable	  [FE]  AssertionFailedError  	20	1	add
20	[BUG]  [BUGGY]    freqTable.put(obj,  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  null);  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  null);		compilable	  [FE]  AssertionFailedError  	20	1	add
21	[BUG]  [BUGGY]    freqTable.put(obj,  Integer.valueOf(v.intValue()  +  1));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Integer.valueOf(v.intValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Integer.valueOf(v.intValue()  +  1));		non-compiled	[CE]  cannot  find  symbol	20	None	add
