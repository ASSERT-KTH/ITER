bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(v);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    result  +=  getCount(v);		compilable	  [FE]  AssertionFailedError  testPcts	18	1
2	[BUG]  [BUGGY]    result  +=  getCount(v);  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(v);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(v);		compilable	  [FE]  AssertionFailedError  testPcts	18	1	add
2	[BUG]  [BUGGY]    result  +=  getCount(firstValue);  [CE]  cannot  find  symbol  firstValue  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(firstValue);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(firstValue);		non-compiled	[CE]  cannot  find  symbol  firstValue	18	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    result  +=  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  testPcts	18	1
4	[BUG]  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  testPcts	18	1	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  -=  getCount(v);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    result  -=  getCount(v);		compilable	  [FE]  AssertionFailedError  testPcts	18	1
5	[BUG]  [BUGGY]    result  -=  getCount(v);  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  -=  getCount(v);  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  -=  getCount(v);		compilable	  [FE]  AssertionFailedError  testPcts	18	1	add
5	[BUG]  [BUGGY]    long  result  =  getCount(freqTable.size());  [CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  result  =  getCount(freqTable.size());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  result  =  getCount(freqTable.size());		non-compiled	[CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)	18	None	add
11	[BUG]  [BUGGY]    Preconditions.checkNotNull(v);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    Preconditions.checkNotNull(v);  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    Preconditions.checkNotNull(v);		non-compiled	[CE]  cannot  find  symbol  Preconditions	2	None	add
12	[BUG]  [BUGGY]    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v).doubleValue();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v).doubleValue();  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v).doubleValue();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
13	[BUG]  [BUGGY]    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v);  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Number)  {  Long  result  =(NaN)freqTable.get(v);  if(result  >  0)  {  return  getPct((  Number)v);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
14	[BUG]  [BUGGY]    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getResult();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getResult();  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getResult();  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
15	[BUG]  [BUGGY]    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getPct(new  Long(v));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getPct(new  Long(v));  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Number)  {  long  result  =(Number)freqTable.get(v);  if(result  >  0)  {  return  getPct(new  Long(v));  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
21	[BUG]  [BUGGY]  return  0;//  v  is  comparable,  but  greater  than  the  last  value  &&  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  0;//  v  is  comparable,  but  greater  than  the  last  value  &&  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  0;//  v  is  comparable,  but  greater  than  the  last  value  &&	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  first  value  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  first  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getSumFreq();//  v  is  comparable,  but  greater  than  first  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
24	[BUG]  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  first  value  &&  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  first  value  &&  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  first  value  &&	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    freqTable.put(v,  new  Long(v));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	    freqTable.put(v,  new  Long(v));		compilable	  [FE]  AssertionFailedError  testPcts	4	1
32	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    freqTable.put(v,  new  Long(v));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    freqTable.put(v,  new  Long(v));		compilable	  [FE]  AssertionFailedError  testPcts	4	1	add
32	[BUG]  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  sumFreq)  {  return  result;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  sumFreq)  {  return  result;  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  sumFreq)  {  return  result;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
33	[BUG]  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  sumFreq)  {  return  result;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  sumFreq)  {  return  result;  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  sumFreq)  {  return  result;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
34	[BUG]  [BUGGY]    result  +=  Math.pow(10,  v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  +=  Math.pow(10,  v);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  +=  Math.pow(10,  v);		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
35	[BUG]  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  null)  {  return  result;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  null)  {  return  result;  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    if(v  >  0)  {  long  result  =  getSumFreq().doubleValue();  if(v  <  null)  {  return  result;  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
44	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  2));  [CE]  ')'  expected  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  2));  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()  2));	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	non-compiled	[CE]  ')'  expected	19	None	replace
52	[BUG]  [BUGGY]  return  getPct(Long.parseLong(v));  [CE]  no  suitable  method  found  for  parseLong(long)  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.parseLong(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.parseLong(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  no  suitable  method  found  for  parseLong(long)	3	None	replace
53	[BUG]  [BUGGY]  return  getPct(Long.toLongBits(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.toLongBits(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.toLongBits(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
54	[BUG]  [BUGGY]  return  getPct(Long.get(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.get(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.get(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.longValue()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  new  Long(v.longValue()));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  new  Long(v.longValue()));		non-compiled	[CE]  long  cannot  be  dereferenced	14	None	add
63	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(V.valueOf(v)));  [CE]  cannot  find  symbol  V  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  new  Long(V.valueOf(v)));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  new  Long(V.valueOf(v)));		non-compiled	[CE]  cannot  find  symbol  V	14	None	add
64	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.length()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  new  Long(v.length()));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  new  Long(v.length()));		non-compiled	[CE]  long  cannot  be  dereferenced	14	None	add
65	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.getLong()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  new  Long(v.getLong()));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  new  Long(v.getLong()));		non-compiled	[CE]  long  cannot  be  dereferenced	14	None	add
71	[BUG]  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  0,  v.length);  [CE]  cannot  find  symbol  length  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  0,  v.length);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(v,  0,  sumFreq,  0,  v.length);		non-compiled	[CE]  cannot  find  symbol  length	16	None	add
72	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.length  >  0)  {  return  Double.NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    if(v!=  null)  {  if(v.length  >  0)  {  return  Double.NaN;  }  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    if(v!=  null)  {  if(v.length  >  0)  {  return  Double.NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
73	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  Double.NaN;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  Double.NaN;  }  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  Double.NaN;  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
74	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  (double)getCount();  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  (double)getCount();  }  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    if(v!=  null)  {  if(v.getCount()  >  1)  {  return  (double)getCount();  }		non-compiled	[CE]  illegal  start  of  expression	16	None	add
81	[BUG]  [BUGGY]    long  result  =  getPct(new  Long(v));  [CE]  possible  loss  of  precision  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    long  result  =  getPct(new  Long(v));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    long  result  =  getPct(new  Long(v));		non-compiled	[CE]  possible  loss  of  precision	6	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    long  result  =  getSumFreq();  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	    long  result  =  getSumFreq();		compilable	  [FE]  AssertionFailedError  testPcts	6	1
83	[BUG]  [BUGGY]    long  result  =  getSumFreq();  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    long  result  =  getSumFreq();  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    long  result  =  getSumFreq();		compilable	  [FE]  AssertionFailedError  testPcts	6	1	add
83	[BUG]  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MIN_VALUE)  {  return  result;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MIN_VALUE)  {  return  result;  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MIN_VALUE)  {  return  result;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
84	[BUG]  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MAX_VALUE)  {  return  double;  }  [CE]  '.class'  expected  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MAX_VALUE)  {  return  double;  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    if(v  >  0)  {  long  result  =  getSumFreq();  if(v  <  Long.MAX_VALUE)  {  return  double;  }		non-compiled	[CE]  '.class'  expected	6	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    long  result  =  getSumFreq()  *  v;  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	    long  result  =  getSumFreq()  *  v;		compilable	  [FE]  AssertionFailedError  testPcts	6	1
86	[BUG]  [BUGGY]    long  result  =  getSumFreq()  *  v;  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    long  result  =  getSumFreq()  *  v;  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    long  result  =  getSumFreq()  *  v;		compilable	  [FE]  AssertionFailedError  testPcts	6	1	add
92	[BUG]  [BUGGY]  return  getPct(Long.parseLong(v));  [CE]  no  suitable  method  found  for  parseLong(int)  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.parseLong(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.parseLong(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  no  suitable  method  found  for  parseLong(int)	5	None	replace
93	[BUG]  [BUGGY]  return  getPct(FREQUENCY.valueOf(v));  [CE]  cannot  find  symbol  FREQUENCY  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(FREQUENCY.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(FREQUENCY.valueOf(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol  FREQUENCY	5	None	replace
94	[BUG]  [BUGGY]  return  getPct(Long.get(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.get(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.get(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
101	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.longValue()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  new  Long(v.longValue()));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  new  Long(v.longValue()));		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
104	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.length()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  new  Long(v.length()));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  new  Long(v.length()));		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
105	[BUG]  [BUGGY]    freqTable.put(v,  new  Long(v.getLong()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  new  Long(v.getLong()));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  new  Long(v.getLong()));		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
112	[BUG]  [BUGGY]  setValue(Long.valueOf(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  setValue(Long.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	setValue(Long.valueOf(v));	addValue(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
113	[BUG]  [BUGGY]  add(Long.valueOf(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  add(Long.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	add(Long.valueOf(v));	addValue(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
122	[BUG]  [BUGGY]  return  getCumFreq(Long.parseLong(v));  [CE]  no  suitable  method  found  for  parseLong(long)  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]  return  getCumFreq(Long.parseLong(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	return  getCumFreq(Long.parseLong(v));	return  getCumFreq(Long.valueOf(v));  	non-compiled	[CE]  no  suitable  method  found  for  parseLong(long)	9	None	replace
124	[BUG]  [BUGGY]  return  getCumFreq(Long.toLongBits(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]  return  getCumFreq(Long.toLongBits(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	return  getCumFreq(Long.toLongBits(v));	return  getCumFreq(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
125	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	  	return  getCumFreq(Long.valueOf(v));  	non-compiled	[CE]  missing  return  statement	9	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  Long.valueOf(0));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
132	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(0));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(2));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  Long.valueOf(2));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
136	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(2));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(2));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(2));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
152	[BUG]  [BUGGY]  return  getCumFreq(((Integer)v).longValue(),  value);  [CE]  cannot  find  symbol  value  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]  return  getCumFreq(((Integer)v).longValue(),  value);  [BUGGY]  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	return  getCumFreq(((Integer)v).longValue(),  value);	return  getCumFreq(((Integer)  v).longValue());  	non-compiled	[CE]  cannot  find  symbol  value	7	None	replace
153	[BUG]  [BUGGY]  return  getSumFreq(((Integer)v).longValue());  [CE]  method  getSumFreq  in  class  Frequency  cannot  be  applied  to  given  types;  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]  return  getSumFreq(((Integer)v).longValue());  [BUGGY]  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	return  getSumFreq(((Integer)v).longValue());	return  getCumFreq(((Integer)  v).longValue());  	non-compiled	[CE]  method  getSumFreq  in  class  Frequency  cannot  be  applied  to  given  types;	7	None	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    long  result  =  freqTable.get(v);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	add	    long  result  =  freqTable.get(v);		compilable	  [FE]  AssertionFailedError  testPcts	10	1
172	[BUG]  [BUGGY]    long  result  =  freqTable.get(v);  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    long  result  =  freqTable.get(v);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    long  result  =  freqTable.get(v);		compilable	  [FE]  AssertionFailedError  testPcts	10	1	add
172	[BUG]  [BUGGY]    freqTable.put(v,  getCumFreq());  [CE]  no  suitable  method  found  for  getCumFreq()  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    freqTable.put(v,  getCumFreq());  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    freqTable.put(v,  getCumFreq());		non-compiled	[CE]  no  suitable  method  found  for  getCumFreq()	10	None	add
173	[BUG]  [BUGGY]    freqTable.put(v,  sumFreq);  [CE]  cannot  find  symbol  sumFreq  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    freqTable.put(v,  sumFreq);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    freqTable.put(v,  sumFreq);		non-compiled	[CE]  cannot  find  symbol  sumFreq	10	None	add
175	[BUG]  [BUGGY]    checkLimits(v, "resulting ");  [CE]  cannot  find  symbol  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    checkLimits(v, "resulting ");  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    checkLimits(v, "resulting ");		non-compiled	[CE]  cannot  find  symbol	10	None	add
182	[BUG]  [BUGGY]    return((  Integer)v).longValue();  [CE]  unreachable  statement  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    return((  Integer)v).longValue();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    return((  Integer)v).longValue();		non-compiled	[CE]  unreachable  statement	8	None	add
183	[BUG]  [BUGGY]    Iterator  <  Long>  freqTable  =  values.iterator();  [CE]  cannot  find  symbol  values  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    Iterator  <  Long>  freqTable  =  values.iterator();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    Iterator  <  Long>  freqTable  =  values.iterator();		non-compiled	[CE]  cannot  find  symbol  values	8	None	add
184	[BUG]  [BUGGY]    Iterator  <?>  freqTable  =  values.iterator();  [CE]  cannot  find  symbol  values  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    Iterator  <?>  freqTable  =  values.iterator();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    Iterator  <?>  freqTable  =  values.iterator();		non-compiled	[CE]  cannot  find  symbol  values	8	None	add
185	[BUG]  [BUGGY]    return((  Integer)v).longValue());  [CE]  ';'  expected  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    return((  Integer)v).longValue());  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    return((  Integer)v).longValue());		non-compiled	[CE]  ';'  expected	8	None	add
21	[BUG]  [BUGGY]    freqTable.put(new  Long(v));  [CE]  no  suitable  method  found  for  put(Long)  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(new  Long(v));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(new  Long(v));		non-compiled	[CE]  no  suitable  method  found  for  put(Long)	12	None	add
23	[BUG]  [BUGGY]    freqTable.put(v,  true);  [CE]  no  suitable  method  found  for  put(long,boolean)  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  true);  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  true);		non-compiled	[CE]  no  suitable  method  found  for  put(long,boolean)	12	None	add
24	[BUG]  [BUGGY]    freqTable.put(v,  NumberUtils.toString(v));  [CE]  cannot  find  symbol  NumberUtils  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  NumberUtils.toString(v));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  NumberUtils.toString(v));		non-compiled	[CE]  cannot  find  symbol  NumberUtils	12	None	add
25	[BUG]  [BUGGY]    freqTable.put(v,  NumberUtils.valueOf(v));  [CE]  cannot  find  symbol  NumberUtils  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    freqTable.put(v,  NumberUtils.valueOf(v));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    freqTable.put(v,  NumberUtils.valueOf(v));		non-compiled	[CE]  cannot  find  symbol  NumberUtils	12	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  new  Long(count.longValue()  +  1));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
43	[BUG]  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()  +  1));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()  +  1));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  new  Long(count.longValue()  +  1));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  new  Long(count.longValue()));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
44	[BUG]  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  new  Long(count.longValue()));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  new  Long(count.longValue()));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
62	[BUG]  [BUGGY]  addValue(FreqTable.valueOf(v));  [CE]  cannot  find  symbol  FreqTable  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  addValue(FreqTable.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	addValue(FreqTable.valueOf(v));	addValue(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol  FreqTable	11	None	replace
63	[BUG]  [BUGGY]  addValue(Frequency.valueOf(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  addValue(Frequency.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	addValue(Frequency.valueOf(v));	addValue(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
101	[BUG]  [BUGGY]    freqTable.put(new  Long(v));  [CE]  no  suitable  method  found  for  put(Long)  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(new  Long(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(new  Long(v));		non-compiled	[CE]  no  suitable  method  found  for  put(Long)	14	None	add
102	[BUG]  [BUGGY]    freqTable.put(v,  NumberUtils.valueOf(v));  [CE]  cannot  find  symbol  NumberUtils  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  NumberUtils.valueOf(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  NumberUtils.valueOf(v));		non-compiled	[CE]  cannot  find  symbol  NumberUtils	14	None	add
103	[BUG]  [BUGGY]    freqTable.put(v,  NumberUtils.toString(v));  [CE]  cannot  find  symbol  NumberUtils  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  NumberUtils.toString(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  NumberUtils.toString(v));		non-compiled	[CE]  cannot  find  symbol  NumberUtils	14	None	add
104	[BUG]  [BUGGY]    freqTable.put(v,  true);  [CE]  no  suitable  method  found  for  put(long,boolean)  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  true);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  true);		non-compiled	[CE]  no  suitable  method  found  for  put(long,boolean)	14	None	add
105	[BUG]  [BUGGY]    freqTable.put(v,  NumberUtils.toFront(v));  [CE]  cannot  find  symbol  NumberUtils  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    freqTable.put(v,  NumberUtils.toFront(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    freqTable.put(v,  NumberUtils.toFront(v));		non-compiled	[CE]  cannot  find  symbol  NumberUtils	14	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    ((  Integer)v).longValue();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	add	    ((  Integer)v).longValue();		compilable	  [FE]  AssertionFailedError  testPcts	8	1
124	[BUG]  [BUGGY]    ((  Integer)v).longValue();  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    ((  Integer)v).longValue();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    ((  Integer)v).longValue();		compilable	  [FE]  AssertionFailedError  testPcts	8	1	add
124	[BUG]  [BUGGY]    return  getCount(((Integer)v).longValue());  [CE]  unreachable  statement  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    return  getCount(((Integer)v).longValue());  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    return  getCount(((Integer)v).longValue());		non-compiled	[CE]  unreachable  statement	8	None	add
143	[BUG]  [BUGGY]  return  getCumFreq(((Integer)v).longValue(),  1);  [CE]  no  suitable  method  found  for  getCumFreq(long,int)  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]  return  getCumFreq(((Integer)v).longValue(),  1);  [BUGGY]  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	return  getCumFreq(((Integer)v).longValue(),  1);	return  getCumFreq(((Integer)  v).longValue());  	non-compiled	[CE]  no  suitable  method  found  for  getCumFreq(long,int)	7	None	replace
161	[BUG]  [BUGGY]    Preconditions.checkNotNull(v);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    Preconditions.checkNotNull(v);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    Preconditions.checkNotNull(v);		non-compiled	[CE]  cannot  find  symbol  Preconditions	6	None	add
162	[BUG]  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Long.valueOf(v));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Long.valueOf(v));  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Long.valueOf(v));  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
163	[BUG]  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(new  Long(v));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(new  Long(v));  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(new  Long(v));  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
165	[BUG]  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Math.pow(10,  v));  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Math.pow(10,  v));  }  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    for(int  v  =  0;  v  <  this.sumFreq;  v++)  {  long  result  =  getSumFreq();  if(v  >  0)  {  return  getPct(Math.pow(10,  v));  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
182	[BUG]  [BUGGY]  return  getPct(Long.toString());  [CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.toString());  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.toString());	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context	3	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.toString(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	return  getPct(Long.toString(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	3	1
184	[BUG]  [BUGGY]  return  getPct(Long.toString(v));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.toString(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.toString(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	3	1	replace
184	[BUG]  [BUGGY]  [FE]  StackOverflowError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	return  getPct(Long.valueOf(v)+  1);	return  getPct(Long.valueOf(v));  	compilable	  [FE]  StackOverflowError  testPcts	3	1
185	[BUG]  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [FE]  StackOverflowError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.valueOf(v)+  1);	return  getPct(Long.valueOf(v));  	compilable	  [FE]  StackOverflowError  testPcts	3	1	replace
201	[BUG]  [BUGGY]  //  v  is  comparable,  but  greater  than  the  last  value?  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  //  v  is  comparable,  but  greater  than  the  last  value?  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	//  v  is  comparable,  but  greater  than  the  last  value?	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
202	[BUG]  [BUGGY]  //  v  is  comparable,  but  greater  than  the  last  value  -  1;  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  //  v  is  comparable,  but  greater  than  the  last  value  -  1;  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	//  v  is  comparable,  but  greater  than  the  last  value  -  1;	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
203	[BUG]  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value?  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value?  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();//  v  is  comparable,  but  greater  than  the  last  value?	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
204	[BUG]  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  -  1;  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  -  1;  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  -  1;	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
262	[BUG]  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getCumPct((  Comparable  <?>)v);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getCumPct((  Comparable  <?>)v);  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getCumPct((  Comparable  <?>)v);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
263	[BUG]  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getComparable((  Comparable  <?>)v);  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getComparable((  Comparable  <?>)v);  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return  getComparable((  Comparable  <?>)v);  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
264	[BUG]  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return(Comparable)v;  }  [CE]  illegal  start  of  expression  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return(Comparable)v;  }  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    if(v  instanceof  Comparable)  {  if(v  instanceof  Comparable)  {  return(Comparable)v;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
265	[BUG]  [BUGGY]    Preconditions.checkArgument(v!=  null);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    Preconditions.checkArgument(v!=  null);  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    Preconditions.checkArgument(v!=  null);		non-compiled	[CE]  cannot  find  symbol  Preconditions	2	None	add
281	[BUG]  [BUGGY]    result  =  Math.max(result,  getPct(v));  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  =  Math.max(result,  getPct(v));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  =  Math.max(result,  getPct(v));		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
282	[BUG]  [BUGGY]    Preconditions.checkNotNull(v);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    Preconditions.checkNotNull(v);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    Preconditions.checkNotNull(v);		non-compiled	[CE]  cannot  find  symbol  Preconditions	4	None	add
283	[BUG]  [BUGGY]    System.arraycopy(freqTable,  getPct(v),  0,  sumFreq);  [CE]  cannot  find  symbol  sumFreq  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    System.arraycopy(freqTable,  getPct(v),  0,  sumFreq);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    System.arraycopy(freqTable,  getPct(v),  0,  sumFreq);		non-compiled	[CE]  cannot  find  symbol  sumFreq	4	None	add
284	[BUG]  [BUGGY]    result  =  getSumFreq();  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  =  getSumFreq();  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  =  getSumFreq();		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
285	[BUG]  [BUGGY]    result  =  Math.max(result,  sumFreq);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  =  Math.max(result,  sumFreq);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  =  Math.max(result,  sumFreq);		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.toString(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	return  getPct(Long.toString(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	5	1
302	[BUG]  [BUGGY]  return  getPct(Long.toString(v));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.toString(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.toString(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	5	1	replace
302	[BUG]  [BUGGY]  return  getPct(Long.toString());  [CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.toString());  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.toString());	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context	5	None	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  =  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    result  =  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  testPcts	18	1
323	[BUG]  [BUGGY]    result  =  getCount(freqTable.lastKey());  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  =  getCount(freqTable.lastKey());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  =  getCount(freqTable.lastKey());		compilable	  [FE]  AssertionFailedError  testPcts	18	1	add
323	[BUG]  [BUGGY]    result  +=  getCount(freqTable.lastIndex());  [CE]  cannot  find  symbol  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    result  +=  getCount(freqTable.lastIndex());  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    result  +=  getCount(freqTable.lastIndex());		non-compiled	[CE]  cannot  find  symbol	18	None	add
324	[BUG]  [BUGGY]    long  result  =  freqTable.getLastKey();  [CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  result  =  freqTable.getLastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  result  =  freqTable.getLastKey();		non-compiled	[CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)	18	None	add
325	[BUG]  [BUGGY]    long  result  =  freqTable.lastKey();  [CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  result  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  result  =  freqTable.lastKey();		non-compiled	[CE]  variable  result  is  already  defined  in  method  getCumFreq(Comparable<?>)	18	None	add
341	[BUG]  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq);		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	16	None	add
342	[BUG]  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  getCount()  /(double)v);  [CE]  no  suitable  method  found  for  getCount()  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  getCount()  /(double)v);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(v,  0,  sumFreq,  getCount()  /(double)v);		non-compiled	[CE]  no  suitable  method  found  for  getCount()	16	None	add
343	[BUG]  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  getCount());  [CE]  no  suitable  method  found  for  getCount()  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(v,  0,  sumFreq,  getCount());  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(v,  0,  sumFreq,  getCount());		non-compiled	[CE]  no  suitable  method  found  for  getCount()	16	None	add
344	[BUG]  [BUGGY]    System.arraycopy(sumFreq,  getCount(v));  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(sumFreq,  getCount(v));  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(sumFreq,  getCount(v));		non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	16	None	add
345	[BUG]  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  getCount());  [CE]  no  suitable  method  found  for  getCount()  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  getCount());  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    System.arraycopy(sumFreq,  0,  v,  getCount());		non-compiled	[CE]  no  suitable  method  found  for  getCount()	16	None	add
361	[BUG]  [BUGGY]    result  =  getCumFreq(new  Long(v));  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  getCumFreq(new  Long(v));  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  getCumFreq(new  Long(v));		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
362	[BUG]  [BUGGY]    System.arraycopy(sumFreq,  0,  sumFreq,  0,  freqTable.length);  [CE]  cannot  find  symbol  sumFreq  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    System.arraycopy(sumFreq,  0,  sumFreq,  0,  freqTable.length);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    System.arraycopy(sumFreq,  0,  sumFreq,  0,  freqTable.length);		non-compiled	[CE]  cannot  find  symbol  sumFreq	10	None	add
363	[BUG]  [BUGGY]    result  =  freqTable.get(v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  freqTable.get(v);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  freqTable.get(v);		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
364	[BUG]  [BUGGY]    result  =  getCumFreq(new  Long(v.longValue()));  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  getCumFreq(new  Long(v.longValue()));  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  getCumFreq(new  Long(v.longValue()));		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
365	[BUG]  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq.length);  [CE]  cannot  find  symbol  sumFreq  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq.length);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    System.arraycopy(sumFreq,  0,  v,  0,  sumFreq.length);		non-compiled	[CE]  cannot  find  symbol  sumFreq	10	None	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]  return  getCount((  Comparable  <?>)v);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	add	return  getCount((  Comparable  <?>)v);	return  getCumPct((Comparable<?>)  v);  	compilable	  [FE]  AssertionFailedError  testPcts	1	1
384	[BUG]  [BUGGY]  return  getCount((  Comparable  <?>)v);  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]  return  getCount((  Comparable  <?>)v);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	return  getCount((  Comparable  <?>)v);	return  getCumPct((Comparable<?>)  v);  	compilable	  [FE]  AssertionFailedError  testPcts	1	1	replace
384	[BUG]  [BUGGY]  return  getCumPct((  Comparable  <?>)v).doubleValue();  [CE]  double  cannot  be  dereferenced  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]  return  getCumPct((  Comparable  <?>)v).doubleValue();  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	return  getCumPct((  Comparable  <?>)v).doubleValue();	return  getCumPct((Comparable<?>)  v);  	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
33	[BUG]  [BUGGY]    addValue(new  Long(v.longValue()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  addValue(Long.valueOf(v));  [BUGGY]    addValue(new  Long(v.longValue()));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	    addValue(new  Long(v.longValue()));		non-compiled	[CE]  long  cannot  be  dereferenced	14	None	add
92	[BUG]  [BUGGY]    result  +=  getCount(v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    result  +=  getCount(v);  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    result  +=  getCount(v);		non-compiled	[CE]  cannot  find  symbol  result	2	None	add
93	[BUG]  [BUGGY]    result  +=  getCount(v).doubleValue();  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    result  +=  getCount(v).doubleValue();  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    result  +=  getCount(v).doubleValue();		non-compiled	[CE]  cannot  find  symbol  result	2	None	add
94	[BUG]  [BUGGY]    Preconditions.checkArgument(v.getType()  ==  Token.TRY);  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    Preconditions.checkArgument(v.getType()  ==  Token.TRY);  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    Preconditions.checkArgument(v.getType()  ==  Token.TRY);		non-compiled	[CE]  cannot  find  symbol	2	None	add
95	[BUG]  [BUGGY]    Preconditions.checkArgument(v.getClass().isArray());  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  double  getPct(Object  v)  {  [BUGGY]    Preconditions.checkArgument(v.getClass().isArray());  [BUGGY]  return  getCumPct((Comparable<?>)  v);  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Object  v  [VARIABLES]  Object  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	    Preconditions.checkArgument(v.getClass().isArray());		non-compiled	[CE]  cannot  find  symbol  Preconditions	2	None	add
121	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  last  value  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  greater  than  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
122	[BUG]  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  last  value  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCumFreq();//  v  is  comparable,  but  greater  than  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCumFreq();//  v  is  comparable,  but  greater  than  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
123	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  last  value  {  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  last  value  {  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  greater  than  last  value  {	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
124	[BUG]  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [CE]  illegal  start  of  expression  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]  return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }  [BUGGY]  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	return  getCount();//  v  is  comparable,  but  greater  than  the  last  value  }	return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
181	[BUG]  [BUGGY]    result  +=  Math.max(v,  sumFreq);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  +=  Math.max(v,  sumFreq);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  +=  Math.max(v,  sumFreq);		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
182	[BUG]  [BUGGY]    result  +=  getSumFreq();  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  +=  getSumFreq();  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  +=  getSumFreq();		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
183	[BUG]  [BUGGY]    result  +=  Math.pow(v,  Math.sqrt(getResult()));  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  +=  Math.pow(v,  Math.sqrt(getResult()));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  +=  Math.pow(v,  Math.sqrt(getResult()));		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
184	[BUG]  [BUGGY]    result  =  Math.max(result,  getMean());  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  =  Math.max(result,  getMean());  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  =  Math.max(result,  getMean());		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
185	[BUG]  [BUGGY]    result  =  Math.max(result,  getMean(),  v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]    result  =  Math.max(result,  getMean(),  v);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	    result  =  Math.max(result,  getMean(),  v);		non-compiled	[CE]  cannot  find  symbol  result	4	None	add
211	[BUG]  [BUGGY]    result  =  Math.max(result,  getSumFreq());  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    result  =  Math.max(result,  getSumFreq());  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    result  =  Math.max(result,  getSumFreq());		non-compiled	[CE]  cannot  find  symbol  result	6	None	add
212	[BUG]  [BUGGY]    result  =  Math.max(result,  getMean());  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    result  =  Math.max(result,  getMean());  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    result  =  Math.max(result,  getMean());		non-compiled	[CE]  cannot  find  symbol  result	6	None	add
213	[BUG]  [BUGGY]    result  =  Math.max(result,  getSumFreq(),  v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    result  =  Math.max(result,  getSumFreq(),  v);  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    result  =  Math.max(result,  getSumFreq(),  v);		non-compiled	[CE]  cannot  find  symbol  result	6	None	add
214	[BUG]  [BUGGY]    result  +=  Math.pow(v  /  getSumFreq());  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    result  +=  Math.pow(v  /  getSumFreq());  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    result  +=  Math.pow(v  /  getSumFreq());		non-compiled	[CE]  cannot  find  symbol  result	6	None	add
215	[BUG]  [BUGGY]    result  +=  Math.pow(v,  Math.sqrt(variable));  [CE]  cannot  find  symbol  result  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]    result  +=  Math.pow(v,  Math.sqrt(variable));  [BUGGY]  return  getPct(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	    result  +=  Math.pow(v,  Math.sqrt(variable));		non-compiled	[CE]  cannot  find  symbol  result	6	None	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(new  Long(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	return  getPct(new  Long(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	3	1
244	[BUG]  [BUGGY]  return  getPct(new  Long(v));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(new  Long(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(new  Long(v));	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	3	1	replace
244	[BUG]  [BUGGY]  return  getPct(Long.getValue(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(long  v)  {  [BUGGY]  return  getPct(Long.getValue(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	return  getPct(Long.getValue(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
271	[BUG]  [BUGGY]    freqTable.put((  Integer)v).longValue();  [CE]  no  suitable  method  found  for  put(Integer)  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    freqTable.put((  Integer)v).longValue();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    freqTable.put((  Integer)v).longValue();		non-compiled	[CE]  no  suitable  method  found  for  put(Integer)	8	None	add
272	[BUG]  [BUGGY]    return  getCount((  Integer)v).longValue();  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    return  getCount((  Integer)v).longValue();  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    return  getCount((  Integer)v).longValue();		non-compiled	[CE]  long  cannot  be  dereferenced	8	None	add
275	[BUG]  [BUGGY]    freqTable.put(((Integer)v).longValue(),  1);  [CE]  no  suitable  method  found  for  put(long,int)  [CONTEXT]  public  long  getCumFreq(Comparable<?>  v)  {  if  (getSumFreq()  ==  0)  {  return  0;  }  if  (v  instanceof  Integer)  {  [BUGGY]    freqTable.put(((Integer)v).longValue(),  1);  [BUGGY]  return  getCumFreq(((Integer)  v).longValue());  }  Comparator<Comparable<?>>  c  =  (Comparator<Comparable<?>>)  freqTable.comparator();  if  (c  ==  null)  {  c  =  new  NaturalComparator();  }  long  result  =  0;  try  {  Long  value  =  freqTable.get(v);  if  (value  !=  null)  {  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	    freqTable.put(((Integer)v).longValue(),  1);		non-compiled	[CE]  no  suitable  method  found  for  put(long,int)	8	None	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  addValue(new  Long(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	add	addValue(new  Long(v));	addValue(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	11	1
303	[BUG]  [BUGGY]  addValue(new  Long(v));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]  addValue(new  Long(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	addValue(new  Long(v));	addValue(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	11	1	replace
333	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  1);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,int)  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  1);  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()),  1);	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,int)	19	None	replace
334	[BUG]  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  count);  [CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Long)  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()),  count);  [BUGGY]  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	freqTable.put(obj,  Long.valueOf(count.longValue()),  count);	freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  	non-compiled	[CE]  no  suitable  method  found  for  put(Comparable<CAP#1>,Long,Long)	19	None	replace
361	[BUG]  [BUGGY]    sumFreq  =  Math.pow(v,  sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    sumFreq  =  Math.pow(v,  sumFreq);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    sumFreq  =  Math.pow(v,  sumFreq);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	16	None	add
362	[BUG]  [BUGGY]    sumFreq  =  Math.max(sumFreq,  v.doubleValue());  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    sumFreq  =  Math.max(sumFreq,  v.doubleValue());  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    sumFreq  =  Math.max(sumFreq,  v.doubleValue());		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	16	None	add
363	[BUG]  [BUGGY]    sumFreq  =  Math.max(sumFreq,  v.getSumFreq());  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    sumFreq  =  Math.max(sumFreq,  v.getSumFreq());  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    sumFreq  =  Math.max(sumFreq,  v.getSumFreq());		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	16	None	add
364	[BUG]  [BUGGY]    sumFreq  =  Math.abs(v);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    sumFreq  =  Math.abs(v);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    sumFreq  =  Math.abs(v);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	16	None	add
365	[BUG]  [BUGGY]    sumFreq  =  Math.sqrt(sumFreq);  [CE]  cannot  assign  a  value  to  final  variable  sumFreq  [CONTEXT]  public  double  getPct(Comparable<?>  v)  {  final  long  sumFreq  =  getSumFreq();  if  (sumFreq  ==  0)  {  return  Double.NaN;  }  [BUGGY]    sumFreq  =  Math.sqrt(sumFreq);  [BUGGY]  return  (double)  getCount(v)  /  (double)  sumFreq;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  Comparable<?>  v  [VARIABLES]  Comparable  v  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	    sumFreq  =  Math.sqrt(sumFreq);		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sumFreq	16	None	add
391	[BUG]  [BUGGY]    addValue(new  Long(v.longValue()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    addValue(new  Long(v.longValue()));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    addValue(new  Long(v.longValue()));		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
394	[BUG]  [BUGGY]    add(new  Long(v.longValue()));  [CE]  long  cannot  be  dereferenced  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    add(new  Long(v.longValue()));  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    add(new  Long(v.longValue()));		non-compiled	[CE]  long  cannot  be  dereferenced	12	None	add
395	[BUG]  [BUGGY]    Preconditions.checkNotNull(v);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  public  void  addValue(long  v)  {  [BUGGY]    Preconditions.checkNotNull(v);  [BUGGY]  addValue(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  long  v  [VARIABLES]  TreeMap  freqTable  long  serialVersionUID  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	    Preconditions.checkNotNull(v);		non-compiled	[CE]  cannot  find  symbol  Preconditions	12	None	add
422	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    v  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	    v  =  freqTable.lastKey();		compilable	  [FE]  AssertionFailedError  testPcts	18	1
423	[BUG]  [BUGGY]    v  =  freqTable.lastKey();  [FE]  AssertionFailedError  testPcts  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    v  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    v  =  freqTable.lastKey();		compilable	  [FE]  AssertionFailedError  testPcts	18	1	add
424	[BUG]  [BUGGY]    long  last  =  freqTable.lastKey();  [CE]  incompatible  types  [CONTEXT]  }  }  catch  (ClassCastException  ex)  {  return  result;  //  v  is  not  comparable  }  if  (c.compare(v,  freqTable.firstKey())  <  0)  {  return  0;//  v  is  comparable,  but  less  than  first  value  }  if  (c.compare(v,  freqTable.lastKey())  >=  0)  {  [BUGGY]    long  last  =  freqTable.lastKey();  [BUGGY]  return  getSumFreq();//  v  is  comparable,  but  greater  than  the  last  value  }  }  Iterator<Comparable<?>>  values  =  valuesIterator();  while  (values.hasNext())  {  Comparable<?>  nextValue  =  values.next();  if  (c.compare(v,  nextValue)  >  0)  {  result  +=  getCount(nextValue);  }  else  {  return  result;  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  Comparable<?>  v  [VARIABLES]  Comparable  nextValue  v  boolean  ClassCastException  ex  Long  value  Iterator  values  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  Comparator  c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	    long  last  =  freqTable.lastKey();		non-compiled	[CE]  incompatible  types	18	None	add
453	[BUG]  [BUGGY]  return  getPct(Long.getValue(v));  [CE]  cannot  find  symbol  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.getValue(v));  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.getValue(v));	return  getPct(Long.valueOf(v));  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	return  getPct(Long.valueOf(v)+  1);	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	5	1
455	[BUG]  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  double  getPct(int  v)  {  [BUGGY]  return  getPct(Long.valueOf(v)+  1);  [BUGGY]  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getPct  [RETURN_TYPE]  double  int  v  [VARIABLES]  boolean  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  int  v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	return  getPct(Long.valueOf(v)+  1);	return  getPct(Long.valueOf(v));  	compilable	  [FE]  AssertionFailedError  testPcts	5	1	replace
541	[BUG]  [BUGGY]    result  =  Math.max(v,  sumFreq);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  Math.max(v,  sumFreq);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  Math.max(v,  sumFreq);		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
542	[BUG]  [BUGGY]    checkLimits(v);  [CE]  cannot  find  symbol  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    checkLimits(v);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    checkLimits(v);		non-compiled	[CE]  cannot  find  symbol	10	None	add
543	[BUG]  [BUGGY]    result  =  getSumFreq();  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  getSumFreq();  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  getSumFreq();		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
544	[BUG]  [BUGGY]    result  +=  getCount(v);  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  +=  getCount(v);  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  +=  getCount(v);		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
545	[BUG]  [BUGGY]    result  =  Math.max(v,  getSumFreq());  [CE]  cannot  find  symbol  result  [CONTEXT]  public  long  getCumFreq(long  v)  {  [BUGGY]    result  =  Math.max(v,  getSumFreq());  [BUGGY]  return  getCumFreq(Long.valueOf(v));  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  getCumFreq  [RETURN_TYPE]  long  long  v  [VARIABLES]  TreeMap  freqTable  long  result  serialVersionUID  sumFreq  v  boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	    result  =  Math.max(v,  getSumFreq());		non-compiled	[CE]  cannot  find  symbol  result	10	None	add
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
574	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(count.longValue()  +  2));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	    freqTable.put(obj,  Long.valueOf(count.longValue()  +  0));		compilable	  [FE]  AssertionFailedError  testPcts	20	1
575	[BUG]  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  0));  [FE]  AssertionFailedError  testPcts  [CONTEXT]  public  void  addValue(Comparable<?>  v){  Comparable<?>  obj  =  v;  if  (v  instanceof  Integer)  {  obj  =  Long.valueOf(((Integer)  v).longValue());  }  try  {  Long  count  =  freqTable.get(obj);  if  (count  ==  null)  {  freqTable.put(obj,  Long.valueOf(1));  }  else  {  [BUGGY]    freqTable.put(obj,  Long.valueOf(count.longValue()  +  0));  [BUGGY]  freqTable.put(obj,  Long.valueOf(count.longValue()  +  1));  }  }  catch  (ClassCastException  ex)  {  throw  MathRuntimeException.createIllegalArgumentException(   "instance  of  class  {0}  not  comparable  to  existing  values ",  v.getClass().getName());  }  }  [CLASS]  Frequency  NaturalComparator  [METHOD]  addValue  [RETURN_TYPE]  void  Comparable<?>  v  [VARIABLES]  Long  count  Comparable  obj  v  boolean  TreeMap  freqTable  long  serialVersionUID  ClassCastException  ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	    freqTable.put(obj,  Long.valueOf(count.longValue()  +  0));		compilable	  [FE]  AssertionFailedError  testPcts	20	1	add
