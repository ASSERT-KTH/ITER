bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return getCumPct((Comparable<?>) v); [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(Object v) { [BUGGY] return getCumPct((Comparable<?>) v); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Object v [VARIABLES] Object v boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(Object v) { [BUGGY] [BUGGY] return getCumPct((Comparable<?>) v); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Object v [VARIABLES] Object v boolean TreeMap freqTable long result serialVersionUID v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	303	303	1	add	
3	[BUG] [BUGGY] return getPct(Long.valueOf(v)); [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(long v) { [BUGGY] return getPct(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(long v) { [BUGGY] [BUGGY] return getPct(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	1.0	342	342	1	add	
5	[BUG] [BUGGY] return getPct(Long.valueOf(v)); [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(int v) { [BUGGY] return getPct(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  int v [VARIABLES] boolean TreeMap freqTable long result serialVersionUID sumFreq v int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(int v) { [BUGGY] [BUGGY] return getPct(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  int v [VARIABLES] boolean TreeMap freqTable long result serialVersionUID sumFreq v int v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	331	331	1	add	
7	[BUG] [BUGGY] return getCumFreq(((Integer) v).longValue()); [FE] AssertionFailedError testPcts [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { [BUGGY] return getCumFreq(((Integer) v).longValue()); [BUGGY] } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public long getCumFreq(Comparable<?> v) { if (getSumFreq() == 0) { return 0; } if (v instanceof Integer) { [BUGGY] [BUGGY] return getCumFreq(((Integer) v).longValue()); } Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator(); if (c == null) { c = new NaturalComparator(); } long result = 0; try { Long value = freqTable.get(v); if (value != null) { [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	386	386	1	add	
9	[BUG] [BUGGY] return getCumFreq(Long.valueOf(v)); [FE] AssertionFailedError testPcts [CONTEXT] public long getCumFreq(long v) { [BUGGY] return getCumFreq(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public long getCumFreq(long v) { [BUGGY] [BUGGY] return getCumFreq(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  long v [VARIABLES] TreeMap freqTable long result serialVersionUID sumFreq v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5773502691896258	444	444	1	add	
11	[BUG] [BUGGY] addValue(Long.valueOf(v)); [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(long v) { [BUGGY] addValue(Long.valueOf(v)); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(long v) { [BUGGY] [BUGGY] addValue(Long.valueOf(v)); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	177	177	1	add	
13	[BUG] [BUGGY] } [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(long v) { addValue(Long.valueOf(v)); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(long v) { addValue(Long.valueOf(v)); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  long v [VARIABLES] TreeMap freqTable long serialVersionUID v boolean  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	178	178	1	add	
15	[BUG] [BUGGY] return (double) getCount(v) / (double) sumFreq; [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] return (double) getCount(v) / (double) sumFreq; [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public double getPct(Comparable<?> v) { final long sumFreq = getSumFreq(); if (sumFreq == 0) { return Double.NaN; } [BUGGY] [BUGGY] return (double) getCount(v) / (double) sumFreq; } [CLASS] Frequency NaturalComparator [METHOD] getPct [RETURN_TYPE] double  Comparable<?> v [VARIABLES] Comparable v boolean TreeMap freqTable long result serialVersionUID sumFreq v  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	320	320	1	add	
17	[BUG] [BUGGY] return getSumFreq();// v is comparable, but greater than the last value } [FE] AssertionFailedError testPcts [CONTEXT] } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [BUGGY] return getSumFreq();// v is comparable, but greater than the last value  } [BUGGY] } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] } } catch (ClassCastException ex) { return result; // v is not comparable } if (c.compare(v, freqTable.firstKey()) < 0) { return 0;// v is comparable, but less than first value } if (c.compare(v, freqTable.lastKey()) >= 0) { [BUGGY] [BUGGY] return getSumFreq();// v is comparable, but greater than the last value  } } Iterator<Comparable<?>> values = valuesIterator(); while (values.hasNext()) { Comparable<?> nextValue = values.next(); if (c.compare(v, nextValue) > 0) { result += getCount(nextValue); } else { return result; } [CLASS] Frequency NaturalComparator [METHOD] getCumFreq [RETURN_TYPE] long  Comparable<?> v [VARIABLES] Comparable nextValue v boolean ClassCastException ex Long value Iterator values TreeMap freqTable long result serialVersionUID sumFreq v Comparator c  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.5	408	409	1	add	
19	[BUG] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); [BUGGY] } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testPcts [CONTEXT] public void addValue(Comparable<?> v){ Comparable<?> obj = v; if (v instanceof Integer) { obj = Long.valueOf(((Integer) v).longValue()); } try { Long count = freqTable.get(obj); if (count == null) { freqTable.put(obj, Long.valueOf(1)); } else { [BUGGY] [BUGGY] freqTable.put(obj, Long.valueOf(count.longValue() + 1)); } } catch (ClassCastException ex) {  throw MathRuntimeException.createIllegalArgumentException( "instance of class {0} not comparable to existing values", v.getClass().getName()); } } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Comparable<?> v [VARIABLES] Long count Comparable obj v boolean TreeMap freqTable long serialVersionUID ClassCastException ex  	projects/Math75/src/main/java/org/apache/commons/math/stat/Frequency.java	0.4472135954999579	142	142	1	add	
