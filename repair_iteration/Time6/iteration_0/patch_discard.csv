compilation error,106,replace,[CE] cannot find symbol DEFAULT_CUTOVER,static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L); , 
compilation error,96,replace,[CE] variable newInstant might not have been initialized,newInstant = to.weekyear().set(0, from.weekyear().get(instant)); ,newInstant = to.weekyear().set(newInstant, from.weekyear().get(instant));
compilation error,86,replace,[CE] ')' expected,from.monthOfYear().get(instant), from.dayOfMonth().get(instant),  from.millisOfDay().get(instant)); ,from.monthOfYear().get(instant), from.dayOfMonth().get(instant)from.millisOfDay().get(instant));
compilation error,84,replace,[CE] ';' expected,return to.getDateTimeMillis (from.year().get(instant),  from.monthOfYear().get(instant), ,return to.getDateTimeMillis(from.year().get(instant), from.monthOfYear().get(instant));
compilation error,109,replace,[CE] <identifier> expected,private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>(); ,private static final Map < DateTimeZone, ArrayList >> GJChronology >> cCache = new HashMap < DateTimeZone, ArrayList < GJChronology >> ();
compilation error,588,replace,[CE] cannot find symbol,return convertByYear(instant, iGregorianChronology, iJulianChronology); ,return convertByWeek(instant, iGregorianChronology, iJulianChronology);
compilation error,85,add,[CE] ')' expected,,  (from.year().get(instant), from.weekOfWeekyear().get(instant), from.weekOfWeekyear().get(instant), from.weekOfWeekyear().get(instant), from.weekOfWeekyear().get(instant));
compilation error,96,add,[CE] variable newInstant might not have been initialized,,  newInstant = to.year().set(newInstant, from.year().get(instant));
compilation error,85,replace,[CE] ';' expected,(from.year().get(instant), from.monthOfYear().get(instant),  from.dayOfMonth().get(instant), ,(from.year().get(instant), from.monthOfYear().get(instant), from.millisOfDay().get(instant));
compilation error,86,add,[CE] ';' expected,,  from.weekOfWeekyear().get(instant)); from.weekOfWeekyear().get(instant), from.weekOfWeekyear().get(instant));
compilation error,596,replace,[CE] cannot find symbol,return convertByWeekyear(instant, iGregorianChronology, iJulianChronology); ,return convertByWeeksInYear(instant, iGregorianChronology, iJulianChronology);
compilation error,271,add,[CE] no suitable method found for getInstance(Instant,Instant,Instant),,  iGregorianChronology = iGregorianChronology.getInstance(cutoverInstant, DEFAULT_CUTOVER, cutoverInstant);
compilation error,84,add,[CE] no suitable method found for getDateTimeMillis(no arguments),,  long dateTimeMillis = from.getDateTimeMillis();
compilation error,270,replace,[CE] array dimension missing,super(null, new Object[] {julian, gregorian, cutoverInstant}); ,super(null, new Object[] } julian, gregorian, cutoverInstant } );
compilation error,588,add,[CE] ';' expected,,  if(instant >= iCutover) { if(instant + iGapDuration < iCutover) { iGregorianChronology = gregorianToJulianByYear(instant); }
compilation error,588,replace,[CE] cannot find symbol iZulianChronology,return convertByYear(instant, iGregorianChronology, iJulianChronology); ,return convertByYear(instant, iZulianChronology, iGregorianChronology);
compilation error,85,replace,[CE] ';' expected,(from.year().get(instant), from.monthOfYear().get(instant),  from.dayOfMonth().get(instant), ,from.year().get(instant), from.monthOfYear().get(instant), from.dayOfMonth().get(instant),
compilation error,270,add,[CE] constructor AssembledChronology in class AssembledChronology cannot be applied to given types;,,  super(DateTimeZone.getDefault(), DEFAULT_CUTOVER, cutoverInstant);
compilation error,96,add,[CE] cannot find symbol,,  newInstant = to.yearOfYear().set(newInstant, from.yearOfYear().get(instant));
compilation error,96,replace,[CE] variable newInstant might not have been initialized,newInstant = to.weekyear().set(0, from.weekyear().get(instant)); ,newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));
compilation error,86,replace,[CE] cannot find symbol,from.monthOfYear().get(instant), from.dayOfMonth().get(instant),  from.millisOfDay().get(instant)); ,from.monthOfYear().get(instant), from.weekOfMonth().get(instant), from.millisOfDay().get(instant));
compilation error,85,add,[CE] ')' expected,,  (from.year().get(instant), from.year().get(instant), from.weekyear().get(instant), from.weekyear().get(instant), from.weekyear().get(instant), from.weekyear().get(instant), from.weekyear().get(instant));
compilation error,86,add,[CE] ';' expected,,  from.monthOfYear().get(instant), from.weekOfWeekyear().get(instant));
compilation error,84,add,[CE] cannot find symbol,,  iConvertByYear(instant, from, to);
compilation error,596,add,[CE] cannot find symbol,,  iJulianChronology = iJulianToGregorianByWeekyear(instant);
compilation error,271,add,[CE] cannot find symbol,,  setZone(cutoverInstant, false);
compilation error,85,replace,[CE] ';' expected,(from.year().get(instant), from.monthOfYear().get(instant),  from.dayOfMonth().get(instant), ,(from.year().get(instant), from.monthOfYear().get(instant), from.dayOfMonth().get(instant));
compilation error,84,add,[CE] cannot find symbol,,  instant = from.getMillis();
compilation error,85,add,[CE] ')' expected,,  (from.getYear(), from.getMonthOfYear(), to.getDateTimeMillis());
compilation error,270,replace,[CE] cannot find symbol GregorianChronology,super(null, new Object[] {julian, gregorian, cutoverInstant}); ,super(null, new Object[] { julian, GregorianChronology, cutoverInstant } );
compilation error,270,add,[CE] no suitable constructor found for GJChronology(<null>,Object[]),,  this(null, new Object[] { julian, gregorian, cutoverInstant } );
compilation error,86,add,[CE] ';' expected,,  from.monthOfYear().get(instant));
compilation error,596,replace,[CE] cannot find symbol,return convertByWeekyear(instant, iGregorianChronology, iJulianChronology); ,return iConvertByWeekyear(instant, iGregorianChronology, iJulianChronology);
compilation error,96,add,[CE] cannot find symbol,,  newInstant = to.weekyear().set(0, from.weekyear().get(instant)); newInstant = to.monthOfWeekyear().set(0, from.monthOfWeekyear().get(instant));
compilation error,588,replace,[CE] cannot find symbol iUpperBound,return convertByYear(instant, iGregorianChronology, iJulianChronology); ,return convertByYear(instant, iUpperBound, iGregorianChronology, iJulianChronology);
compilation error,109,replace,[CE] > expected,private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>(); ,private static final Map < DateTimeZone, ArrayList < GJChronology >> cCache = new HashMap < DateTimeZone, ArrayList < GJChronology } ();
