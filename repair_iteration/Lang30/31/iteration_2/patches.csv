bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  i  =  j;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  j;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  j;	  char    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
2	[BUG]  [BUGGY]  char  i  =  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  ch;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  ch;	  char    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
3	[BUG]  [BUGGY]  char  i  =  cs.length();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  cs.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  cs.length();	  char    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
4	[BUG]  [BUGGY]  if(j  >  0  ||  i  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  i  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  i  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    i    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
5	[BUG]  [BUGGY]  if(j  >  0  ||  i  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  i  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  i  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    i    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
6	[BUG]  [BUGGY]  if(j  <  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    i    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
7	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
8	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
9	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
10	[BUG]  [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
11	[BUG]  [BUGGY]  int  j  =  i  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  i  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  i  +  1;	  int    j    =    i;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  char  j  =  i;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  i;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  i;	  int    j    =    i;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
13	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  int  i  =  0,  len  =  searchLength  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  0,  len  =  searchLength  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  searchLength  +  1;	  int    i    =    0,    len    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
16	[BUG]  [BUGGY]  int  i  =  0,  len  =  searchLength  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  0,  len  =  searchLength  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  searchLength  -  1;	  int    i    =    0,    len    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
17	[BUG]  [BUGGY]  int  i  =  0,  len  =  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  0,  len  =  ch;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  ch;	  int    i    =    0,    len    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
18	[BUG]  [BUGGY]  int  i  =  j  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  j  -  2;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j  -  2;	  int    i    =    searchLength    -    2;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
19	[BUG]  [BUGGY]  int  i  =  searchLength  /  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLength  /  2;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  /  2;	  int    i    =    searchLength    -    2;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
20	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  if  (i  >  0  &&  j  <  searchLength  &&  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (i  >  0  &&  j  <  searchLength  &&  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  >  0  &&  j  <  searchLength  &&  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
24	[BUG]  [BUGGY]  if  (i  >  0  &&  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (i  >  0  &&  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  >  0  &&  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
25	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
26	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
27	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
28	[BUG]  [BUGGY]  if(j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
29	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
30	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
31	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
32	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
33	[BUG]  [BUGGY]  bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  true;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
34	[BUG]  [BUGGY]  bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  true;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  true;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  true;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
35	[BUG]  [BUGGY]  bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
36	[BUG]  [BUGGY]  bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  true;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
37	[BUG]  [BUGGY]  char  ch  =  searchChars[j];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  searchChars[j];  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  searchChars[j];	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
38	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  searchChars.charAt(j);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  searchChars.charAt(j);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
39	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
40	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
41	[BUG]  [BUGGY]  int  j  =  searchLength.indexOf(ch,  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength.indexOf(ch,  i);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.indexOf(ch,  i);	  int    j    =    searchLength.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
42	[BUG]  [BUGGY]  int  j  =  searchLength.indexOf(ch)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength.indexOf(ch)+  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.indexOf(ch)+  1;	  int    j    =    searchLength.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
43	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
45	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
46	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
48	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
49	[BUG]  [BUGGY]  if(j  >=  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
50	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
51	[BUG]  [BUGGY]  ((  CharSequence)ch).booleanValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  CharSequence)ch).booleanValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  CharSequence)ch).booleanValue();	  ((    Character)ch).booleanValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
52	[BUG]  [BUGGY]  ((  char)ch).booleanValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  char)ch).booleanValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  char)ch).booleanValue();	  ((    Character)ch).booleanValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
53	[BUG]  [BUGGY]  int  j  =  j  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  j  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  j  +  1;	  int    j    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
54	[BUG]  [BUGGY]  int  j  =  searchLength  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength  +  1;	  int    j    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
55	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
56	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
57	[BUG]  [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  ==  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    ==    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
58	[BUG]  [BUGGY]  if  (j  <  0  ||  i  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  i  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  i  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLength    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLength    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  char  j  =  j;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  j;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  j;	  char    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
61	[BUG]  [BUGGY]  char  j  =  cs.charAt(j);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  cs.charAt(j);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  cs.charAt(j);	  char    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
62	[BUG]  [BUGGY]  char  j  =  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  ch;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  ch;	  char    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
63	[BUG]  [BUGGY]  char  j  =  cs.length();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  cs.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  cs.length();	  char    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
64	[BUG]  [BUGGY]  int  j  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.length;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length;	  int    j    =    searchChars.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
65	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.indexOf(j);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(j);	  int    j    =    searchChars.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
66	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(ch,  i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.indexOf(ch,  i);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(ch,  i);	  int    j    =    searchChars.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
67	[BUG]  [BUGGY]  int  j  =  1  <  <  searchLength;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  1  <  <  searchLength;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  1  <  <  searchLength;	  int    j    =    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
68	[BUG]  [BUGGY]  char  j  =  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  1;	  int    j    =    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
69	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
70	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
71	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch!=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch!=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch!=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	76	None	replace
72	[BUG]  [BUGGY]  int  j  =  cs.length  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.length  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.length  -  1;	  int    j    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
73	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
74	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
75	[BUG]  [BUGGY]  if  (j  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    +    1    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
76	[BUG]  [BUGGY]  if  (i  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (i  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  +  1  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    +    1    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
77	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
78	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
79	[BUG]  [BUGGY]  int  j  =  csLast;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  csLast;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  csLast;	  int    j    =    searchLast;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
80	[BUG]  [BUGGY]  char  j  =  searchLast;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  searchLast;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  searchLast;	  int    j    =    searchLast;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
81	[BUG]  [BUGGY]  char  j  =  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  j  =  0;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  0;	  int    j    =    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
82	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
83	[BUG]  [BUGGY]  if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
84	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)return  false;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
85	[BUG]  [BUGGY]  int  i  =  searchLast  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLast  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLast  +  1;	  int    i    =    searchLast    -    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
86	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
87	[BUG]  [BUGGY]  ((  CharSequence)ch).doubleValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  CharSequence)ch).doubleValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  CharSequence)ch).doubleValue();	  ((    CharSequence)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
88	[BUG]  [BUGGY]  ((  CharacterSequence)ch).charValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  CharacterSequence)ch).charValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  CharacterSequence)ch).charValue();	  ((    CharSequence)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
89	[BUG]  [BUGGY]  int  j  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.length  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length  -  1;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
90	[BUG]  [BUGGY]  int  j  =  ch.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  ch.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  ch.length();	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
91	[BUG]  [BUGGY]  int  j  =  searchChars.length()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.length()  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length()  +  1;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
92	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  0)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  0)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
93	[BUG]  [BUGGY]  int  i  =  j  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  j  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j  +  1;	  int    i    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
94	[BUG]  [BUGGY]  int  i  =  searchLength  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLength  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  +  1;	  int    i    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
95	[BUG]  [BUGGY]  int  i  =  searchLength  /  1  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLength  /  1  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  /  1  +  1;	  int    i    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
96	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
97	[BUG]  [BUGGY]  ((  Character)ch).charValue()  /  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charValue()  /  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charValue()  /  1;	  ((    Character)ch).charValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
98	[BUG]  [BUGGY]  ((  Character)ch).charValue()  *  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charValue()  *  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charValue()  *  1;	  ((    Character)ch).charValue()    +    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
99	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
100	[BUG]  [BUGGY]  if(j  <  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
101	[BUG]  [BUGGY]  if(j  >=  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
102	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
103	[BUG]  [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
104	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
105	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLength  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
106	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
107	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  MAX_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >  MAX_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  MAX_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
108	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
109	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
110	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
111	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
112	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  &&  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
113	[BUG]  [BUGGY]  if(i  >  0  &&  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  &&  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  &&  j  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
114	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  1);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(j  +  1);	  char    ch    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
115	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  3);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  3);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(j  +  3);	  char    ch    =    cs.charAt(j);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
116	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
117	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
118	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(cs[j]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.indexOf(cs[j]);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(cs[j]);	  int    j    =    cs.indexOf(searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
119	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j])+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars[j])+  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j])+  1;	  int    j    =    cs.indexOf(searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
120	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j]  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars[j]  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j]  +  1);	  int    j    =    cs.indexOf(searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
121	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  0)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]!=  0)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
122	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  ==  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  ==  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  ==  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
123	[BUG]  [BUGGY]  if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
124	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
125	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
126	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  i);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j],  i);	  int    j    =    cs.indexOf(ch,    i);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
127	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
128	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
129	[BUG]  [BUGGY]  char  i  =  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  1;	  int    i    =    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
130	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
131	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
132	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
133	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
134	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
135	[BUG]  [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
136	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
137	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >>  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >>  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >>  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
138	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
139	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
140	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
141	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
142	[BUG]  [BUGGY]  int  i  =  j  +  searchLength;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  j  +  searchLength;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j  +  searchLength;	  int    i    =    j;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
143	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
144	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
145	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
146	[BUG]  [BUGGY]  cs.charAt(j  +  1)  ==  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(j  +  1)  ==  ch;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(j  +  1)  ==  ch;	  cs.charAt(i    +    1)    ==    ch;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
147	[BUG]  [BUGGY]  cs.charAt(j  +  1)  {  ch;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(j  +  1)  {  ch;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(j  +  1)  {  ch;	  cs.charAt(i    +    1)    ==    ch;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
148	[BUG]  [BUGGY]  int  j  =  cs.lastIndexOf(searchChars[j]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.lastIndexOf(searchChars[j]);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.lastIndexOf(searchChars[j]);	  int    j    =    cs.lastIndexOf(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
149	[BUG]  [BUGGY]  int  j  =  cs.lastIndexOf(ch,  searchLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.lastIndexOf(ch,  searchLength);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.lastIndexOf(ch,  searchLength);	  int    j    =    cs.lastIndexOf(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
150	[BUG]  [BUGGY]  int  len  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  len  =  searchChars.length();  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  searchChars.length();	  int    len    =    str.length();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
151	[BUG]  [BUGGY]  int  len  =  str.length()  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  len  =  str.length()  +  1;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  str.length()  +  1;	  int    len    =    str.length();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
152	[BUG]  [BUGGY]  int  len  =  str.length()  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  len  =  str.length()  -  1;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  str.length()  -  1;	  int    len    =    str.length();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
153	[BUG]  [BUGGY]  int  len  =  ch.length();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  len  =  ch.length();  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  ch.length();	  int    len    =    str.length();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
154	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLength);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLength);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i  +  1,  searchLength);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
155	[BUG]  [BUGGY]  ((  Character)ch).doubleValue()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).doubleValue()  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).doubleValue()  +  1;	  ((    Character)ch).doubleValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
156	[BUG]  [BUGGY]  ((  char)ch).doubleValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  char)ch).doubleValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  char)ch).doubleValue();	  ((    Character)ch).doubleValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
157	[BUG]  [BUGGY]  char  i  =  j  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  j  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  j  +  1;	  char    i    =    0;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
158	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  searchLength);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  searchLength);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j],  searchLength);	  int    j    =    cs.indexOf(ch,    searchLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
159	[BUG]  [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(ch,  searchLength  +  1);	  int    j    =    cs.indexOf(ch,    searchLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
160	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(ch,  j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.indexOf(ch,  j);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(ch,  j);	  int    j    =    cs.indexOf(ch,    searchLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
161	[BUG]  [BUGGY]  cs.charAt(j  +  1]  ==  ch);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(j  +  1]  ==  ch);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(j  +  1]  ==  ch);	  cs.charAt(i    +    1]    ==    ch);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
162	[BUG]  [BUGGY]  cs.charAt(i  +  1]  ==  ch,  searchLength);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(i  +  1]  ==  ch,  searchLength);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1]  ==  ch,  searchLength);	  cs.charAt(i    +    1]    ==    ch);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
163	[BUG]  [BUGGY]  cs.charAt(i  +  1]  ==  ch,  searchLast);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(i  +  1]  ==  ch,  searchLast);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1]  ==  ch,  searchLast);	  cs.charAt(i    +    1]    ==    ch);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
164	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
165	[BUG]  [BUGGY]  bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLength  >  0  ||  searchChars[j]  ==  ch)  {  return  false;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
166	[BUG]  [BUGGY]  bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLast  >  0  ||  searchChars[j]  ==  ch)  {  return  false;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
167	[BUG]  [BUGGY]  bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  false;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  false;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchChars[j]  ==  ch)  {  return  false;	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
168	[BUG]  [BUGGY]  bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	bucket  <  0  ||  searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
169	[BUG]  [BUGGY]  int  j  =  searchChars.length()  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.length()  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length()  -  1;	  int    j    =    cs.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
170	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
171	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  <  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  <  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  <  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
172	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
173	[BUG]  [BUGGY]  int  i  =  ch  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  ch  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  ch  -  1;	  int    i    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
174	[BUG]  [BUGGY]  char  i  =(j  ==  0)?  0  :  j;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =(j  ==  0)?  0  :  j;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =(j  ==  0)?  0  :  j;	  char    i    =    0;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
175	[BUG]  [BUGGY]  char  i  =(j  >=  0)?  0  :  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =(j  >=  0)?  0  :  j;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =(j  >=  0)?  0  :  j;	  char    i    =    0;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
176	[BUG]  [BUGGY]  char  i  =(j  <  0)?  0  :  j;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =(j  <  0)?  0  :  j;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =(j  <  0)?  0  :  j;	  char    i    =    0;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
177	[BUG]  [BUGGY]  int  j  =  searchLength.indexOf(ch  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength.indexOf(ch  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.indexOf(ch  +  1);	  int    j    =    searchLength.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
178	[BUG]  [BUGGY]  int  j  =  searchLast.indexOf(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLast.indexOf(ch);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLast.indexOf(ch);	  int    j    =    searchLength.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
179	[BUG]  [BUGGY]  int  j  =  searchLength.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.length();	  int    j    =    searchLength.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
180	[BUG]  [BUGGY]  if(j  >  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
181	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
182	[BUG]  [BUGGY]  if(j  >  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
183	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
184	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
185	[BUG]  [BUGGY]  if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
186	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  0)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
187	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
188	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
189	[BUG]  [BUGGY]  int  j  =  searchLength.indexOf(searchChars[j]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchLength.indexOf(searchChars[j]);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.indexOf(searchChars[j]);	  int    j    =    cs.indexOf(searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
190	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
191	[BUG]  [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
192	[BUG]  [BUGGY]  ((  Character)ch).charAt(i)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
193	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
194	[BUG]  [BUGGY]  ((  String)ch).doubleValue();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  String)ch).doubleValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  String)ch).doubleValue();	  ((    Character)ch).doubleValue();    	non-compiled	[CE]  <identifier>  expected	26	None	replace
195	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
196	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
197	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  true;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
198	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]!=  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]!=  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]!=  ch)  {  return  true;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
199	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchLength[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
200	[BUG]  [BUGGY]  cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
201	[BUG]  [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
202	[BUG]  [BUGGY]  cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
203	[BUG]  [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  >  0)  {  if(searchLength[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
204	[BUG]  [BUGGY]  if  (i  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (i  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLength    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
205	[BUG]  [BUGGY]  ((  String)ch).booleanValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  String)ch).booleanValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  String)ch).booleanValue();	  ((    Character)ch).booleanValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
206	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars,  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars,  i);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars,  i);	  int    j    =    cs.indexOf(ch,    i);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
207	[BUG]  [BUGGY]  int  j  =  cs.indexOf(ch,  i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(ch,  i  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(ch,  i  +  1);	  int    j    =    cs.indexOf(ch,    i);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
208	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
209	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  -1  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  -1  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  -1  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
210	[BUG]  [BUGGY]  char  i  =  searchLast;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  i  =  searchLast;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  searchLast;	  char    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
211	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
212	[BUG]  [BUGGY]  if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  searchLast  ||  j  >  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
213	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
214	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >=  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
215	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  3);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  3);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i  +  3);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
216	[BUG]  [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
217	[BUG]  [BUGGY]  int  i  =  searchLen  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLen  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLen  -  1;	  int    i    =    len    -    1;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
218	[BUG]  [BUGGY]  int  i  =  0,  len  =  searchLast;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  0,  len  =  searchLast;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  searchLast;	  int    i    =    0,    len    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
219	[BUG]  [BUGGY]  int  j  =  1  <  <  searchLimit;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  1  <  <  searchLimit;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  1  <  <  searchLimit;	  int    j    =    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
220	[BUG]  [BUGGY]  ((  Character)ch).charAt(i)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i)  ==  if(searchChars[j]!=  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
221	[BUG]  [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i)  {  if(searchChars[j]!=  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
222	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchLength[j]!=  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
223	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
224	[BUG]  [BUGGY]  int  j  =  cs.lastIndexOf(ch,  i);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.lastIndexOf(ch,  i);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.lastIndexOf(ch,  i);	  int    j    =    cs.lastIndexOf(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
225	[BUG]  [BUGGY]  int  j  =  cs.lastIndexOf(ch  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.lastIndexOf(ch  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.lastIndexOf(ch  +  1);	  int    j    =    cs.lastIndexOf(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
226	[BUG]  [BUGGY]  int  i  =  j  -  1  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  j  -  1  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j  -  1  +  1;	  int    i    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
227	[BUG]  [BUGGY]  cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLength  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
228	[BUG]  [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
229	[BUG]  [BUGGY]  cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  ==  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
230	[BUG]  [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cearcă  {  if(searchLast  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
231	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars,  j);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars,  j);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars,  j);	  int    j    =    cs.indexOf(ch,    searchLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
232	[BUG]  [BUGGY]  ((  String)ch).charValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  String)ch).charValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  String)ch).charValue();	  ((    CharSequence)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
233	[BUG]  [BUGGY]  if(i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
234	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  <  =  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  <  =  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  &&  ch  <  =  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
235	[BUG]  [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >=  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >=  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
236	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SIZE  &&  ch  <  =  Character.MAX_HIGH_SIZE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SIZE  &&  ch  <  =  Character.MAX_HIGH_SIZE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SIZE  &&  ch  <  =  Character.MAX_HIGH_SIZE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
237	[BUG]  [BUGGY]  if(j  ==  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  ==  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  ==  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
238	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(ch  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.indexOf(ch  +  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(ch  +  1);	  int    j    =    searchChars.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
239	[BUG]  [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
240	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {	  if    (j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
241	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
242	[BUG]  [BUGGY]  if(j  >  0  ||  i  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  i  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  i  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    i    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
243	[BUG]  [BUGGY]  if(j  >  0  ||  i  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  i  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  i  <  searchLast  &&  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    i    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
244	[BUG]  [BUGGY]  int  j  =  this.searchChars.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  this.searchChars.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  this.searchChars.length();	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
245	[BUG]  [BUGGY]  int  j  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.length  -  2;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length  -  2;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
246	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
247	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
248	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLength  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
249	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
250	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  &&  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
251	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
252	[BUG]  [BUGGY]  if  (i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  >  0  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
253	[BUG]  [BUGGY]  if  (j  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
254	[BUG]  [BUGGY]  cs.charAt(i  +  1]  ==  ch,  j);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(i  +  1]  ==  ch,  j);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1]  ==  ch,  j);	  cs.charAt(i    +    1]    ==    ch);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
255	[BUG]  [BUGGY]  cs.charAt(i  +  1]  ==  ch;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(i  +  1]  ==  ch;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1]  ==  ch;	  cs.charAt(i    +    1)    ==    ch;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
256	[BUG]  [BUGGY]  cs.charAt(i  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  cs.charAt(i  +  1);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1);	  cs.charAt(i    +    1)    ==    ch;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
257	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
258	[BUG]  [BUGGY]  Integer  j  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  Integer  j  =  cs.length();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	Integer  j  =  cs.length();	  int    j    =    cs.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
259	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
260	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  0)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
261	[BUG]  [BUGGY]  int  i  =  searchLast  -  1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLast  -  1  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLast  -  1  +  1;	  int    i    =    searchLast    -    1;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
262	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
263	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
264	[BUG]  [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }	  ((    Character)ch).charAt(j    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
265	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(searchChars[j],  ch);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j],  ch);	  int    j    =    cs.indexOf(searchChars[j]);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
266	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
267	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  -1  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  -1  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  -1  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
268	[BUG]  [BUGGY]  int  j  =  ch  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  ch  -  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  ch  -  1;	  int    j    =    i    -    1;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
269	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]!=  ch)  {  return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
270	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
271	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLast);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchLast);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i  +  1,  searchLast);	  char    ch    =    cs.charAt(i    +    1);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
272	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)return  true;  }	  ((    Character)ch).charAt(i    +    1)    ==    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
273	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
274	[BUG]  [BUGGY]  int  i  =  2;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  2;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  2;	  int    i    =    1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
275	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  ==  if(searchChars[j]  ==  ch)return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
276	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
277	[BUG]  [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength  -  1);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(ch,  searchLength  -  1);	  int    j    =    cs.indexOf(ch,    searchLength);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
278	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  [Delete]  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	[Delete]	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
279	[BUG]  [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
280	[BUG]  [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  true;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
281	[BUG]  [BUGGY]  ((  Character)ch).charAt(1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
282	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  <  =  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  <  =  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  <  =  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
283	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_SIZE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_SIZE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_SIZE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
284	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLength  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
285	[BUG]  [BUGGY]  if(j  ==  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  ==  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  ==  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
286	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
287	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
288	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    >    0    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
289	[BUG]  [BUGGY]  int  j  =  searchChars.lastIndexOf(ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  searchChars.lastIndexOf(ch);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.lastIndexOf(ch);	  int    j    =    cs.lastIndexOf(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
290	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    ==    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
291	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
292	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
293	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >    Character.MIN_HIGH_SURROGATE    ||    ch    <    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
294	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >  0)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >  0)  {	  if(j    <    0    ||    j    >    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
295	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >=    0    ||    ch    ==    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
296	[BUG]  [BUGGY]  int  j  =  -1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  -1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  -1;	  int    j    =    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
297	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
298	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
299	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  csLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    csLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
300	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
301	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
302	[BUG]  [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)return  false;  }	  ((    Character)ch).charAt(j    +    1)    ==    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
303	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    >    0    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
304	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)return  true;  }	  ((    Character)ch).charAt(0)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
305	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  j);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  j);  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i  +  1,  j);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
306	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  csLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    >    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
307	[BUG]  [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    ==    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
308	[BUG]  [BUGGY]  if(j  <  0  ||  j  ==  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  ==  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  ==  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    ==    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
309	[BUG]  [BUGGY]  int  j  =  1  <  <  (searchLength  -  searchLast);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  1  <  <  (searchLength  -  searchLast);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  1  <  <  (searchLength  -  searchLast);	  int    j    =    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
310	[BUG]  [BUGGY]  int  j  =  1  <  <  (searchLength  -  searchLength);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  1  <  <  (searchLength  -  searchLength);  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  1  <  <  (searchLength  -  searchLength);	  int    j    =    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
311	[BUG]  [BUGGY]  ((  Character)ch).intValue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  ((  Character)ch).intValue();  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).intValue();	  ((    Character)ch).booleanValue();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
312	[BUG]  [BUGGY]  int  i  =  0,  len  =  searchLen;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  0,  len  =  searchLen;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  searchLen;	  int    i    =    0,    len    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
313	[BUG]  [BUGGY]  int  i  =  searchLength  -  1,  j  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  i  =  searchLength  -  1,  j  +  1;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  -  1,  j  +  1;	  int    i    =    searchLength    -    1    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
314	[BUG]  [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
315	[BUG]  [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  false;  }  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	try  ==  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)return  false;  }	  if(searchLast    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
316	[BUG]  [BUGGY]  int  len  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  len  =  searchChars.length;  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  searchChars.length;	  int    len    =    str.length();    	non-compiled	[CE]  <identifier>  expected	78	None	replace
317	[BUG]  [BUGGY]  int  j  =  ch;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  ch;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  ch;	  int    j    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
318	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  MIN_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  <  MIN_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  MIN_HIGH_SURROGATE  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
319	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  =  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  >  0  ||  ch  <  =  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  =  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    >    0    ||    ch    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
320	[BUG]  [BUGGY]  int  j  =  this.searchChars.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  int  j  =  this.searchChars.length;  [BUGGY]      if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  this.searchChars.length;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
321	[BUG]  [BUGGY]  if(j  <  0  ||  j  ==  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  ==  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  ==  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
322	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {      [BUGGY]  if(j  <  0  ||  j  >  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]        if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLength  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLength    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
