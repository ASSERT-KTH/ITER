bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  j  =  cs.indexOf(searchChars[j]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.indexOf(searchChars[j]);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(searchChars[j]);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
2	[BUG]  [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.indexOf(ch,  searchLength);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(ch,  searchLength);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
3	[BUG]  [BUGGY]  int  j  =  searchChars.indexOf(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchChars.indexOf(ch);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.indexOf(ch);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
4	[BUG]  [BUGGY]  int  j  =  cs.lastIndexOf(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.lastIndexOf(ch);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.lastIndexOf(ch);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
5	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
10	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
11	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
12	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  if  (i  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (i  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  <  searchLength  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
19	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
20	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    <    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLast  ||  ch!=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    <    searchLast    ||    ch!=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  int  i  =  j  -  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  j  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j  -  1;	      int    i    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
23	[BUG]  [BUGGY]  int  i  =  searchLength  -  1  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  searchLength  -  1  +  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  -  1  +  1;	      int    i    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
24	[BUG]  [BUGGY]  int  i  =  searchLength  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  searchLength  -  2;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLength  -  2;	      int    i    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
25	[BUG]  [BUGGY]  ((  Character)ch).booleanValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).booleanValue();  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).booleanValue();	      ((    Character)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
26	[BUG]  [BUGGY]  ((  Character)ch).doubleValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).doubleValue();  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).doubleValue();	      ((    Character)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
27	[BUG]  [BUGGY]  ((  Character)ch).charValue()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charValue()  +  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charValue()  +  1;	      ((    Character)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
28	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLast  ||  ch  ==  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
31	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  ch  =  cs.charAt(i);  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  ch  =  cs.charAt(j);  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(j);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  cs.charAt(i  +  1)  ==  ch;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  cs.charAt(i  +  1)  ==  ch;  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1)  ==  ch;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  cs.charAt(i  +  1]  ==  ch);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  cs.charAt(i  +  1]  ==  ch);  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	cs.charAt(i  +  1]  ==  ch);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
37	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
38	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLength  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
39	[BUG]  [BUGGY]  int  j  =  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  0;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  0;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
40	[BUG]  [BUGGY]  int  j  =  i;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  i;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  i;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
41	[BUG]  [BUGGY]  char  j  =  searchLength;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  j  =  searchLength;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  j  =  searchLength;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
42	[BUG]  [BUGGY]  int  j  =  cs.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.length;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.length;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
43	[BUG]  [BUGGY]  int  i  =  j;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  j;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  j;	      int    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
44	[BUG]  [BUGGY]  char  i  =  searchLength;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  i  =  searchLength;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  searchLength;	      int    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
45	[BUG]  [BUGGY]  int  i  =  1;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  1;	      int    i    =    0;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  char  i  =  0;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  i  =  0;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  i  =  0;	      int    i    =    0;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  int  j  =  cs.length()  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.length()  +  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.length()  +  1;	      int    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
48	[BUG]  [BUGGY]  int  j  =  searchChars.length();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchChars.length();  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchChars.length();	      int    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
49	[BUG]  [BUGGY]  int  j  =  cs.length()  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.length()  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.length()  -  1;	      int    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
50	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
52	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(0)  {  if(searchChars[j]!=  ch)  {  return  false;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  int  j  =  j  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  j  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  j  -  1;	      int    j    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
55	[BUG]  [BUGGY]  int  j  =  searchLength  -  1  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchLength  -  1  +  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength  -  1  +  1;	      int    j    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
56	[BUG]  [BUGGY]  int  j  =  i  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  i  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  i  -  1;	      int    j    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
57	[BUG]  [BUGGY]  int  j  =  searchLength.indexOf(ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchLength.indexOf(ch);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLength.indexOf(ch);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
58	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
59	[BUG]  [BUGGY]  int  j  =  searchLast;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchLast;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLast;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
60	[BUG]  [BUGGY]  int  j  =  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  1;	      int    j    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
61	[BUG]  [BUGGY]  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  true;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(searchLast  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  int  i  =  searchLast  -  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  searchLast  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  searchLast  -  1;	      int    i    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
64	[BUG]  [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  csLast  ||  j  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    csLast    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
65	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >=  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
66	[BUG]  [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  <  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
67	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  if  (i  +  1  <  searchLast  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (i  +  1  <  searchLast  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  +  1  <  searchLast  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
69	[BUG]  [BUGGY]  if  (i  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (i  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (i  >  0  &&  j  <  csLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
70	[BUG]  [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if  (j  <  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
71	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(i  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
72	[BUG]  [BUGGY]  if(j  >  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  i  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
73	[BUG]  [BUGGY]  int  j  =  searchLast  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  searchLast  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  searchLast  -  1;	      int    j    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
74	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(i  +  1)  {  if(searchLength[j]  ==  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  {  if(searchLength[j]  ==  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
75	[BUG]  [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(i  +  1)  ==  if(searchChars[j]!=  ch)  {  return  false;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
77	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  0  ||  ch  ==  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    >=    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
78	[BUG]  [BUGGY]  int  len  =  str.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  len  =  str.length();  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  len  =  str.length();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  char  ch  =  cs.charAt(i  +  1);  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	char  ch  =  cs.charAt(i  +  1);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  int  i  =  0,  len  =  searchLength;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  0,  len  =  searchLength;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  0,  len  =  searchLength;	      int    i    =    searchLength;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
81	[BUG]  [BUGGY]  ((  CharSequence)ch).charValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  CharSequence)ch).charValue();  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  CharSequence)ch).charValue();	      ((    Character)ch).charValue();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
82	[BUG]  [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  false;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
83	[BUG]  [BUGGY]  int  i  =  len  -  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  i  =  len  -  1;  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  i  =  len  -  1;	      int    i    =    searchLength    -    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
84	[BUG]  [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  ==  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
85	[BUG]  [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >=  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >=  0  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
86	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if    (j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
87	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  >=  Character.MAX_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
88	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  csLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if    (i    <    searchLast    &&    j    <    csLast    &&    ch    >=    Character.MIN_HIGH_SURROGATE    &&    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
89	[BUG]  [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  ((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	((  Character)ch).charAt(j  +  1)  ==  if(searchChars[j]  ==  ch)  {  return  true;  }	      ((    Character)ch).charAt(i    +    1)    {    if(searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
90	[BUG]  [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  if(j  >  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  >  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  >  0  ||  ch  <  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  if(i  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(i  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(i  >  0  ||  j  <  searchLast  ||  ch  >  Character.MIN_HIGH_SURROGATE)  {	  if(i    >    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  if(j  <  0  ||  ch  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  ch  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  ch  >  searchLast  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
94	[BUG]  [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {  [BUGGY]      if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	if(j  <  0  ||  j  >  0  ||  ch  >=  Character.MIN_HIGH_SURROGATE  ||  ch  <  =  Character.MAX_HIGH_SURROGATE)  {	  if(j    <    0    ||    j    <    searchLast    ||    ch    >=    Character.MIN_HIGH_SURROGATE    ||    ch    <    =    Character.MAX_HIGH_SURROGATE)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
95	[BUG]  [BUGGY]  int  j  =  cs.indexOf(ch,  i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {    [BUGGY]  int  j  =  cs.indexOf(ch,  i);  [BUGGY]    if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  return  true;  }  }  else  {  return  true;  }  }  }  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1455	1455	10	replace	int  j  =  cs.indexOf(ch,  i);	      int    j    =    cs.indexOf(ch);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
