bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
2	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
3	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
4	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  '.class'  expected	84	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
8	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charSequence(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charSequence(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charSequence(j);	  CharSequence    cs    =    cs.charSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
9	[BUG]  [BUGGY]  char  cs  =  cs.charSequence(j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  cs  =  cs.charSequence(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  cs  =  cs.charSequence(j);	  CharSequence    cs    =    cs.charSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
10	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars.charSequence(j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  searchChars.charSequence(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  searchChars.charSequence(j);	  CharSequence    cs    =    cs.charSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
11	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charSequence(j,  searchLen);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charSequence(j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charSequence(j,  searchLen);	  CharSequence    cs    =    cs.charSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
12	[BUG]  [BUGGY]  ||  searchChars[j]!=  ch)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ch)  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  ch)  {  return  true;	  ||    searchChars[j]!=    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
13	[BUG]  [BUGGY]  ||!Character.isDigit(ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||!Character.isDigit(ch))  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
14	[BUG]  [BUGGY]  Character.isDigit(ch))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character.isDigit(ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character.isDigit(ch))  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	137	None	replace
15	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  ';'  expected	140	None	replace
16	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
17	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
18	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
19	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
20	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
21	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
22	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
23	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
24	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
25	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
26	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
27	[BUG]  [BUGGY]  ||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]!=    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  ||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]!=    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  ';'  expected	139	None	replace
30	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  ==  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
31	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break    	non-compiled	[CE]  ';'  expected	96	None	replace
32	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
33	[BUG]  [BUGGY]  ||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;	  ||(searchLen    >    0    &&    searchChars[j]!=    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
34	[BUG]  [BUGGY]  ||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;	  ||(searchLen    >    0    &&    searchChars[j]!=    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(ch));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(ch));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(ch));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalArgumentException( ". ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
40	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
41	[BUG]  [BUGGY]  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false    	non-compiled	[CE]  ';'  expected	3	None	replace
42	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false    	non-compiled	[CE]  ';'  expected	3	None	replace
43	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(j,  searchLen);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(j,  searchLen);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
44	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(i,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(i,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(i,  j);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
45	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(ch,  j);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(ch,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(ch,  j);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
46	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(i,  searchLen);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(i,  searchLen);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
47	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
48	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
49	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
51	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  ';'  expected	116	None	replace
52	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
53	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
54	[BUG]  [BUGGY]  ||  searchChars[j]!=  ch)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  ch)  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
55	[BUG]  [BUGGY]  ||(searchChars[j]  ==  ch)&&(cs.charAt(j)!=  '-'  ||  cs.charAt(j)  ==  '-'))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchChars[j]  ==  ch)&&(cs.charAt(j)!=  '-'  ||  cs.charAt(j)  ==  '-'))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchChars[j]  ==  ch)&&(cs.charAt(j)!=  '-'  ||  cs.charAt(j)  ==  '-'))  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
56	[BUG]  [BUGGY]  ||(searchChars[j]  ==  ch)&&(cs.charAt(j)  ==  '-'  ||  cs.charAt(j)!=  '-'))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchChars[j]  ==  ch)&&(cs.charAt(j)  ==  '-'  ||  cs.charAt(j)!=  '-'))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchChars[j]  ==  ch)&&(cs.charAt(j)  ==  '-'  ||  cs.charAt(j)!=  '-'))  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
57	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
58	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(j);	  Integer    str1    =    cs.getSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
59	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(i);	  Integer    str1    =    cs.getSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
60	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(ch);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(ch);	  Integer    str1    =    cs.getSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
61	[BUG]  [BUGGY]  CharacterIterator  it  =  searchChars.iterator();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharacterIterator  it  =  searchChars.iterator();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharacterIterator  it  =  searchChars.iterator();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
62	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i);  j++)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i);  j++)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i);  j++)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  ';'  expected	135	None	replace
63	[BUG]  [BUGGY]  allowSequence(cs.length(),  searchLen);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(cs.length(),  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowSequence(cs.length(),  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
65	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
66	[BUG]  [BUGGY]  ||  searchChars[j]!=  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ch)  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  ch)  {  return  true;  }	  ||    searchChars[j]    ==    ch)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
67	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchChars[j]);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchChars[j]);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  searchChars[j]);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
68	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  j);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  searchLen,  j);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
69	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  ch,  searchLen);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  ch,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(cs,  ch,  searchLen);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
70	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  csLen);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  csLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  searchLen,  csLen);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
71	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
72	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
73	[BUG]  [BUGGY]  ||  j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
74	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
75	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
76	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
77	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
78	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
79	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
80	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]!=  ch)return  true;  }	  if(searchChars[j]!=    ch)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
81	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)return  true;  }	  if(searchChars[j]!=    ch)return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
82	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
83	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false    	non-compiled	[CE]  ';'  expected	107	None	replace
84	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
85	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
86	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
87	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
88	[BUG]  [BUGGY]  if(searchChars[j]!=  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]!=  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  ||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
90	[BUG]  [BUGGY]  ||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
92	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    	non-compiled	[CE]  '.class'  expected	72	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).toCharArray();  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).toCharArray();  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).toCharArray();  if(searchChars[j]  ==  ch)  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
94	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  ';'  expected	87	None	replace
95	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
96	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
97	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
98	[BUG]  [BUGGY]  allowFallThrough(cs.length(),  searchLen);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowFallThrough(cs.length(),  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowFallThrough(cs.length(),  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
99	[BUG]  [BUGGY]  CHAR  ch  =  searchChars[j];  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  searchChars[j];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  searchChars[j];	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
100	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charSequence(searchChars[j]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charSequence(searchChars[j]);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charSequence(searchChars[j]);	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
101	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charAt(i);	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
102	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
103	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
104	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
105	[BUG]  [BUGGY]  ||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  ==  0  &&  searchChars[j]!=  ch))  {  return  false;	  ||(searchLen    ==    0    &&    searchChars[j]!=    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  ||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  ==  0  &&  searchChars[j]!=  ch))  {  return  false;	  ||(searchLen    ==    0    &&    searchChars[j]!=    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
108	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  '.class'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  '.class'  expected	88	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  ';'  expected	88	None	replace
110	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  '.class'  expected	110	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  break;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
112	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	43	None	replace
113	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	43	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
115	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
116	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
117	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
118	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
119	[BUG]  [BUGGY]  ||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
120	[BUG]  [BUGGY]  ||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]!=  ')'  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  null. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  null. ");	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
122	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  If(searchChars[j]  ==  ' "+searchChars[j]+ ") ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  If(searchChars[j]  ==  ' "+searchChars[j]+ ") ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  If(searchChars[j]  ==  ' "+searchChars[j]+ ") ");	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not   "  +  searchChars[j]);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not   "  +  searchChars[j]);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not   "  +  searchChars[j]);	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
124	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
125	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
126	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
127	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
128	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
129	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
130	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
131	[BUG]  [BUGGY]  ||  searchChars[j]  >=  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  >=  ch)  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]  >=  ch)  {  return  false;  }	  ||    searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
132	[BUG]  [BUGGY]  ||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }	  ||(searchLen    >    0    &&    searchChars[j]!=    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  ||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  >  0  &&  searchChars[j]!=  ch))  {  return  false;  }	  ||(searchLen    >    0    &&    searchChars[j]!=    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
134	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
135	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
136	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
137	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
138	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
139	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
140	[BUG]  [BUGGY]  cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
141	[BUG]  [BUGGY]  Cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
142	[BUG]  [BUGGY]  cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }	  cearcă    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
143	[BUG]  [BUGGY]  cearc  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(searchChars[j]  ==  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(searchChars[j]  ==  ch)  {  return  true;  }	  cearcă    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
144	[BUG]  [BUGGY]  cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }	  if(searchLen    >    0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
145	[BUG]  [BUGGY]  cearcă  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  if(searchChars[j]!=  ch)  {  return  false;  }	  if(searchLen    >    0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
146	[BUG]  [BUGGY]  cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)return  false;  }	  if(searchLen    >    0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
147	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	128	None	replace
148	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	128	None	replace
149	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	128	None	replace
150	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    	non-compiled	[CE]  not  a  statement	45	None	replace
151	[BUG]  [BUGGY]  Character(cs,  ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(cs,  ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(cs,  ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    	non-compiled	[CE]  not  a  statement	45	None	replace
152	[BUG]  [BUGGY]  ||  ch  ==  searchChars[j])  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  searchChars[j])  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  ch  ==  searchChars[j])  {  return  true;	  ||    searchChars[j]    ==    ch)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
153	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
154	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
156	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
157	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].length()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].length()  +  1;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].length()  +  1;	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].length();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
158	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].trim();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].trim();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].trim();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].length();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
159	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i  +  1,  searchLen);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i  +  1,  searchLen);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i  +  1,  searchLen);	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].length();    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
160	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
161	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
162	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
163	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
164	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
165	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
166	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  ';'  expected	125	None	replace
167	[BUG]  [BUGGY]  ||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;	  ||(searchLen    >    0    &&    searchChars[j]    ==    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
168	[BUG]  [BUGGY]  ||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;	  ||(searchLen    >    0    &&    searchChars[j]    ==    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
169	[BUG]  [BUGGY]  if(j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(j  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  ';'  expected	122	None	replace
170	[BUG]  [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  ';'  expected	122	None	replace
171	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
172	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
173	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
175	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
176	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  continue  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  ';'  expected	80	None	replace
177	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '    	non-compiled	[CE]  not  a  statement	46	None	replace
178	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '    	non-compiled	[CE]  not  a  statement	46	None	replace
179	[BUG]  [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  searchChars[i])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!='}	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '    	non-compiled	[CE]  not  a  statement	46	None	replace
180	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i).charAt(j);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
181	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i).charAt(j);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i).charAt(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i).charAt(j);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
182	[BUG]  [BUGGY]  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
184	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars[j]));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars[j]));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars[j]));	  throw    new    IllegalArgumentException(   "   ".equals(searchChars[j]));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  searchChars[j]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  searchChars[j]);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  searchChars[j]);	  throw    new    IllegalArgumentException(   "   ".equals(searchChars[j]));    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
186	[BUG]  [BUGGY]  cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
187	[BUG]  [BUGGY]  Cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  if(j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
188	[BUG]  [BUGGY]  cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
189	[BUG]  [BUGGY]  Cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
190	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(j);	  result[j]    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
191	[BUG]  [BUGGY]  j]  =  cs.charAt(j);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  j]  =  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	j]  =  cs.charAt(j);	  result[j]    =    cs.charAt(j);    	non-compiled	[CE]  not  a  statement	49	None	replace
192	[BUG]  [BUGGY]  ch[j]  =  cs.charAt(j);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ch[j]  =  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	ch[j]  =  cs.charAt(j);	  result[j]    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
193	[BUG]  [BUGGY]  result[j]  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  result[j]  =  cs.charAt(i);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	result[j]  =  cs.charAt(i);	  result[j]    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
194	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
195	[BUG]  [BUGGY]  ||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
196	[BUG]  [BUGGY]  ||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
197	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
198	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(ch));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( " ".equals(ch));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( " ".equals(ch));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
199	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  find  char  ' "  +  ch  + "'. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( "Failed  to  find  char  ' "  +  ch  + "'. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( "Failed  to  find  char  ' "  +  ch  + "'. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
200	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  char  ' "  +  ch  + "'. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  char  ' "  +  ch  + "'. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( "Failed  to  parse  char  ' "  +  ch  + "'. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
203	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
204	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
205	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
206	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
207	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
208	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;  }	  if(searchLen    >    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
209	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  return  true;	  if(searchLen    >    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
210	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;  }	  if(searchLen    >    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
211	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  return  true;	  if(searchLen    >    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
212	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  ';'  expected	25	None	replace
213	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false    	non-compiled	[CE]  ';'  expected	83	None	replace
214	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
215	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
216	[BUG]  [BUGGY]  Integer  searchLen  =  cs.indexOf(searchLen,  j);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.indexOf(searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.indexOf(searchLen,  j);	  Integer    searchLen    =    cs.indexOf(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
217	[BUG]  [BUGGY]  Integer  searchLen  =  cs.indexOf(ch);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.indexOf(ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.indexOf(ch);	  Integer    searchLen    =    cs.indexOf(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
218	[BUG]  [BUGGY]  Integer  searchLen  =  cs.indexOf(searchLen,  i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.indexOf(searchLen,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.indexOf(searchLen,  i);	  Integer    searchLen    =    cs.indexOf(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
219	[BUG]  [BUGGY]  Integer  searchLen  =  cs.lastIndexOf(searchLen);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.lastIndexOf(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.lastIndexOf(searchLen);	  Integer    searchLen    =    cs.indexOf(searchLen);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
220	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
221	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
222	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
223	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
224	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
225	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
226	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
227	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
228	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]!=  ch))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]!=  ch))  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
229	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[j]  ==  ch))  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
230	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
231	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars[i]!=  ch))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars[i]!=  ch))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars[i]!=  ch))  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
232	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
233	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i).charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
234	[BUG]  [BUGGY]  Char  ch  =  cs.charAt(i).charAt(i);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  cs.charAt(i).charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  cs.charAt(i).charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
235	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(i);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i).charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i).charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
236	[BUG]  [BUGGY]  ||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
237	[BUG]  [BUGGY]  ||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  ==  0  &&  searchChars[j]  ==  ch))  {  return  false;	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
238	[BUG]  [BUGGY]  Integer  str1  =  cs.getValue(j,  searchLen);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getValue(j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getValue(j,  searchLen);	  Integer    str1    =    cs.getValue(i,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
239	[BUG]  [BUGGY]  Integer  str1  =  cs.getValue(i,  j);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getValue(i,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getValue(i,  j);	  Integer    str1    =    cs.getValue(i,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
240	[BUG]  [BUGGY]  Integer  str1  =  cs.getValue(j,  i);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getValue(j,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getValue(j,  i);	  Integer    str1    =    cs.getValue(i,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
241	[BUG]  [BUGGY]  Integer  str1  =  cs.getValue(ch,  searchLen);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getValue(ch,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getValue(ch,  searchLen);	  Integer    str1    =    cs.getValue(i,    searchLen);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
242	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
243	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
244	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
245	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
246	[BUG]  [BUGGY]  return  ch;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
247	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  return  EMPTY;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  return  EMPTY;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  return  EMPTY;  }	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
248	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  return  EMPTY;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  return  EMPTY;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]!=  ch)  {  return  EMPTY;  }	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
249	[BUG]  [BUGGY]  Integer  searchLen  =  ch;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  ch;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  ch;	  Integer    searchLen    =    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
250	[BUG]  [BUGGY]  Integer  searchLen  =  searchChars.length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  searchChars.length  -  1;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  searchChars.length  -  1;	  Integer    searchLen    =    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
251	[BUG]  [BUGGY]  Integer  searchLen  =  cs.length;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.length;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.length;	  Integer    searchLen    =    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
252	[BUG]  [BUGGY]  Integer  searchLen  =  searchChars.length  +  j;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  searchChars.length  +  j;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  searchChars.length  +  j;	  Integer    searchLen    =    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	108	None	replace
254	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]!=  ch)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]!=  ch)  {  return  false;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]!=  ch)  {  return  false;	  ||    searchLen    >    0    ||    searchChars[j]    ==    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
255	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  true;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  true;	  ||    searchLen    >    0    ||    searchChars[j]    ==    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
256	[BUG]  [BUGGY]  ||  j  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  j  >  0  ||  searchChars[j]  ==  ch)  {  return  false;	  ||    searchLen    >    0    ||    searchChars[j]    ==    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
257	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  PAD_LIMIT;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  PAD_LIMIT;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  EMPTY?  INDEX_NOT_FOUND  :  PAD_LIMIT;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
258	[BUG]  [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  j  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  j  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  INDEX_NOT_FOUND?  j  :  null;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
259	[BUG]  [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  searchChars[j]  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  searchChars[j]  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  INDEX_NOT_FOUND?  searchChars[j]  :  null;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
260	[BUG]  [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
261	[BUG]  [BUGGY]  return  j  ==  EMPTY?  INDEX_NOT_FOUND  :  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  ==  EMPTY?  INDEX_NOT_FOUND  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  j  ==  EMPTY?  INDEX_NOT_FOUND  :  cs.charAt(j);	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
262	[BUG]  [BUGGY]  return  ch  ==  INDEX_NOT_FOUND  :  cs.charAt(j);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  INDEX_NOT_FOUND  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  INDEX_NOT_FOUND  :  cs.charAt(j);	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  	118	None	replace
263	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
264	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
265	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  '.'  &&  searchChars[j]!=  '+'))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  '.'  &&  searchChars[j]!=  '+'))  {  return  true;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  '.'  &&  searchChars[j]!=  '+'))  {  return  true;	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
266	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]!=  '.'  &&  searchChars[j]!=  '+'))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]!=  '.'  &&  searchChars[j]!=  '+'))  {  return  true;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]!=  '.'  &&  searchChars[j]!=  '+'))  {  return  true;	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
267	[BUG]  [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  >  0  &&  searchChars.length  >  0)||(searchChars[j]  ==  ch))  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
268	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "String  error: "  +  cs.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "String  error: "  +  cs.getMessage());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "String  error: "  +  cs.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  cs.getName()  + "'  does  not  exist. ");  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "String  ' "  +  cs.getName()  + "'  does  not  exist. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "String  ' "  +  cs.getName()  + "'  does  not  exist. ");	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
270	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  j);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
271	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  JSON_NOT_FOUND);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  JSON_NOT_FOUND);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  JSON_NOT_FOUND);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
272	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  searchLen,  j);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  searchLen,  j);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
273	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(j,  ch);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(j,  ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(j,  ch);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
274	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
275	[BUG]  [BUGGY]  Char  ch  =  searchChars[j].charAt(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  searchChars[j].charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  searchChars[j].charAt(i);	  Char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
276	[BUG]  [BUGGY]  Char  ch  =  searchChars[j].charAt(j);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  searchChars[j].charAt(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  searchChars[j].charAt(j);	  Char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
277	[BUG]  [BUGGY]  Char  ch  =  searchChars[j].trim();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  searchChars[j].trim();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  searchChars[j].trim();	  Char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
278	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  this  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  this  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  this  :  null;	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
279	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  this  :  EMPTY;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  this  :  EMPTY;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  this  :  EMPTY;	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
280	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  true  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  true  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  true  :  null;	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
281	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(csLen));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(csLen));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  ch.equals(csLen));	  throw    new    IllegalArgumentException(   "   ".equals(ch));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
282	[BUG]  [BUGGY]  ||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }	  ||(searchLen    >    0    &&    searchChars[j]    ==    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
283	[BUG]  [BUGGY]  ||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(i  >  0  &&  searchChars[j]  ==  ch))  {  return  false;  }	  ||(searchLen    >    0    &&    searchChars[j]    ==    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
284	[BUG]  [BUGGY]  CharSequence  cs  =  ch.charSequence();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  ch.charSequence();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  ch.charSequence();	  CharSequence    cs    =    cs.charSequence();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
285	[BUG]  [BUGGY]  char  cs  =  cs.charSequence();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  cs  =  cs.charSequence();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  cs  =  cs.charSequence();	  CharSequence    cs    =    cs.charSequence();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
286	[BUG]  [BUGGY]  CharSequence  cs  =  chars.charAt(j);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  chars.charAt(j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  chars.charAt(j);	  CharSequence    cs    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
287	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charAt(j  +  1);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charAt(j  +  1);	  CharSequence    cs    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
288	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j];  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs.charAt(j];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs.charAt(j];	  char    ch    =    searchChars[j];    	non-compiled	[CE]  	30	None	replace
289	[BUG]  [BUGGY]  char  ch  =  cs[j];  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  cs[j];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  cs[j];	  char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
290	[BUG]  [BUGGY]  char  ch  =  str.charAt(j];  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  str.charAt(j];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  str.charAt(j];	  char    ch    =    searchChars[j];    	non-compiled	[CE]  	30	None	replace
291	[BUG]  [BUGGY]  ||  ch  ==  searchChars[j])  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  ch  ==  searchChars[j])  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  ch  ==  searchChars[j])  {  return  false;  }	  ||    searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
292	[BUG]  [BUGGY]  Character(cs.charAt(i),  cs.charAt(j));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(cs.charAt(i),  cs.charAt(j));  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(cs.charAt(i),  cs.charAt(j));	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
293	[BUG]  [BUGGY]  Character(cs.charAt(i),  cs.charAt(i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(cs.charAt(i),  cs.charAt(i));  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(cs.charAt(i),  cs.charAt(i));	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
294	[BUG]  [BUGGY]  CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CHAR  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
295	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
296	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
297	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
298	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
299	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  	120	None	replace
300	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
301	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]!=  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
302	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	131	None	replace
303	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	131	None	replace
304	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	131	None	replace
305	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	131	None	replace
306	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;  }	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
307	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  ==  0  &&  searchChars[j]!=  ch))  {  return  true;	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
308	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;  }	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
309	[BUG]  [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(searchLen  ==  0  &&  searchChars[j]  ==  ch))  {  return  true;	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
310	[BUG]  [BUGGY]  if(searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]!=  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  	15	None	replace
311	[BUG]  [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  	15	None	replace
312	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
313	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  ==  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
314	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toUpperCase();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toUpperCase();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toUpperCase();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
315	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toLowerCase()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toLowerCase()  +  1;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].toLowerCase()  +  1;	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
316	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].toLowerCase();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].toLowerCase();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[i].toLowerCase();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
317	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  continue  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
318	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
319	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
320	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
321	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch]  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
322	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].longValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].longValue();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].longValue();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].intValue();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
323	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].intValue()  +  1;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].intValue()  +  1;	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].intValue();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
324	[BUG]  [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  1)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
325	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
326	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
327	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
328	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(j);  if(ch  <  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
329	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  }	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
330	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
331	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
332	[BUG]  [BUGGY]  Integer  searchLen  =  searchChars.length();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  searchChars.length();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  searchChars.length();	  Integer    searchLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
333	[BUG]  [BUGGY]  Integer  searchLen  =  cs.length()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.length()  +  1;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.length()  +  1;	  Integer    searchLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
334	[BUG]  [BUGGY]  Integer  searchLen  =  cs.length()  +  j;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.length()  +  j;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.length()  +  j;	  Integer    searchLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
335	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charSequence(searchLen,  j);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charSequence(searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charSequence(searchLen,  j);	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
336	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    	non-compiled	[CE]  not  a  statement	24	None	replace
337	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    	non-compiled	[CE]  not  a  statement	24	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
341	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
342	[BUG]  [BUGGY]  return  ch  ==  0?  INDEX_NOT_FOUND  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  0?  INDEX_NOT_FOUND  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  0?  INDEX_NOT_FOUND  :  null;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
343	[BUG]  [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  0  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  INDEX_NOT_FOUND?  0  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  INDEX_NOT_FOUND?  0  :  null;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
344	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
345	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
346	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	130	None	replace
347	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)return  false;	  if(searchChars[j]!=    ch)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
348	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	125	None	replace
349	[BUG]  [BUGGY]  if(!Character.isDigit(ch)||!Character.isLetter(ch))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(!Character.isDigit(ch)||!Character.isLetter(ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(!Character.isDigit(ch)||!Character.isLetter(ch))  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
350	[BUG]  [BUGGY]  if(!Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(!Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(!Character.isDigit(ch)||!Character.isJavaIdentifierPart(ch))  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
351	[BUG]  [BUGGY]  if(!Character.isDigit(ch)||  cs.charAt(j)!=  '-')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(!Character.isDigit(ch)||  cs.charAt(j)!=  '-')  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(!Character.isDigit(ch)||  cs.charAt(j)!=  '-')  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
352	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
353	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
354	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
355	[BUG]  [BUGGY]  Integer  searchLen  =  cs.intValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.intValue();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.intValue();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
356	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)return  true;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)return  true;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)return  true;	  if(searchChars[j]    ==    ch)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
357	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  return  true;  }	  if(searchLen    >    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
358	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
359	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	23	None	replace
360	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
361	[BUG]  [BUGGY]  Integer  found  =  cs.indexOf(searchLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  found  =  cs.indexOf(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  found  =  cs.indexOf(searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
362	[BUG]  [BUGGY]  Integer  searchLen  =  cs.getIntValue();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  cs.getIntValue();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  cs.getIntValue();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
363	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j];  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j];	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
364	[BUG]  [BUGGY]  Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    	non-compiled	[CE]  	45	None	replace
365	[BUG]  [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    	non-compiled	[CE]  not  a  statement	45	None	replace
366	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  true  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(ch!=  '+')  {  return  true	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  	88	None	replace
367	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  >  expected	85	None	replace
368	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  >  expected	85	None	replace
369	[BUG]  [BUGGY]  ||  searchChars[j].equals(ch))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j].equals(ch))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j].equals(ch))  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
370	[BUG]  [BUGGY]  ||  searchChars[j]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  ==  0)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]  ==  0)  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
371	[BUG]  [BUGGY]  allowNonEmpty(cs.length(),  searchLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonEmpty(cs.length(),  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowNonEmpty(cs.length(),  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
372	[BUG]  [BUGGY]  allowNonSequence(searchLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonSequence(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowNonSequence(searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
373	[BUG]  [BUGGY]  allowNonEmpty(searchLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonEmpty(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowNonEmpty(searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
374	[BUG]  [BUGGY]  allowNonSequence(searchLen,  csLast);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowNonSequence(searchLen,  csLast);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowNonSequence(searchLen,  csLast);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
375	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	34	None	replace
376	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	34	None	replace
377	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  For(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	For(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	34	None	replace
378	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
379	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
380	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
381	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  	103	None	replace
382	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
383	[BUG]  [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	100	None	replace
384	[BUG]  [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	100	None	replace
385	[BUG]  [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	100	None	replace
386	[BUG]  [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkState(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	100	None	replace
387	[BUG]  [BUGGY]  ||  searchLen  >  0  &&  searchChars[j]  ==  ch)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  &&  searchChars[j]  ==  ch)  {  return  false;  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  &&  searchChars[j]  ==  ch)  {  return  false;	  ||    searchLen    >    0    ||    searchChars[j]    ==    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
388	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
389	[BUG]  [BUGGY]  côte  edge  =  cs.getBounds(i,  searchLen);  [CE]  illegal  character:  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  côte  edge  =  cs.getBounds(i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	côte  edge  =  cs.getBounds(i,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  character:  	97	None	replace
390	[BUG]  [BUGGY]  côte  edge  =  cs.charAt(i);  [CE]  illegal  character:  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  côte  edge  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	côte  edge  =  cs.charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  illegal  character:  	97	None	replace
391	[BUG]  [BUGGY]  Integer  str1  =  cs.getLength();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getLength();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getLength();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
392	[BUG]  [BUGGY]  pendSequence(cs,  i,  searchLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendSequence(cs,  i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	pendSequence(cs,  i,  searchLen);	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
393	[BUG]  [BUGGY]  pendSequence(cs,  i,  searchLen,  searchChars);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  pendSequence(cs,  i,  searchLen,  searchChars);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	pendSequence(cs,  i,  searchLen,  searchChars);	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
394	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  i);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
395	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
396	[BUG]  [BUGGY]  CharSequence  js  =  cs.charAt(i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  js  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  js  =  cs.charAt(i);	  CharSequence    cs    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
397	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
398	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  searchLen,  j);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  cs.length(),  searchLen,  j);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
399	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  j,  searchLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  cs.length(),  j,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
400	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  searchLen,  ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  cs.length(),  searchLen,  ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  cs.length(),  searchLen,  ch);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
401	[BUG]  [BUGGY]  Context.checkState(searchLen  >  0);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkState(searchLen  >  0);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkState(searchLen  >  0);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
402	[BUG]  [BUGGY]  Context.codeBug();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.codeBug();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.codeBug();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
403	[BUG]  [BUGGY]  Context.checkNotNull(searchLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Context.checkNotNull(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Context.checkNotNull(searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
404	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    >=    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
405	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
406	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
407	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
408	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
409	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequenceLength();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequenceLength();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequenceLength();	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
410	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  >  expected	138	None	replace
411	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  >  expected	138	None	replace
412	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  >  expected	102	None	replace
413	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  >  expected	102	None	replace
414	[BUG]  [BUGGY]  ||  searchLen  ==  0)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  ==  0)  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  ==  0)  {  return  true;  }	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
415	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  >  expected	78	None	replace
416	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  >  expected	75	None	replace
417	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  >  expected	75	None	replace
418	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
419	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i).charAt(j);  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i).charAt(j);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i).charAt(j);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
420	[BUG]  [BUGGY]  return  searchLen;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  searchLen;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  searchLen;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
421	[BUG]  [BUGGY]  return  j  >  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  >  0;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  j  >  0;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
422	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  ch.equals(searchChars));	  throw    new    IllegalArgumentException(   "   ".equals(ch));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
423	[BUG]  [BUGGY]  Cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  if(searchChars[j]!=  ch)  {  return  false;  }	  cearcă    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	36	None	replace
424	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[i]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    	non-compiled	[CE]  	2	None	replace
425	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]!=  ch)  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  >  expected	73	None	replace
426	[BUG]  [BUGGY]  CharSequence  cs  =  searchChars.charSequence();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  searchChars.charSequence();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  searchChars.charSequence();	  CharSequence    cs    =    cs.charSequence();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
427	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  csLen,  searchLen,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  csLen,  searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  csLen,  searchLen,  j);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
428	[BUG]  [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
429	[BUG]  [BUGGY]  Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  	44	None	replace
430	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  true  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  true	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	108	None	replace
431	[BUG]  [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(searchLen)  ==  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '    	non-compiled	[CE]  not  a  statement	46	None	replace
432	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  >  expected	70	None	replace
433	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
434	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].intValue();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].intValue();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[i].intValue();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].intValue();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
435	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalStateException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
436	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(ch));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(ch));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(ch));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
437	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
438	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  j  :  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  j  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  EMPTY?  j  :  cs.charAt(j);	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
439	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  0  :  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  0  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  EMPTY?  0  :  cs.charAt(j);	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
440	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	122	None	replace
441	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	122	None	replace
442	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  cs.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  cs.getMessage());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  cs.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
443	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Search  ' "  +  cs.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Search  ' "  +  cs.getMessage());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Search  ' "  +  cs.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
444	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  >  expected	94	None	replace
445	[BUG]  [BUGGY]  char  ch  =  searchChars[j].charAt(i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  searchChars[j].charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  searchChars[j].charAt(i);	  char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
446	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(searchLen,  j,  i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(searchLen,  j,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(searchLen,  j,  i);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
447	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
448	[BUG]  [BUGGY]  Integer  str1  =  cs.getValue(i,  searchLen,  j);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getValue(i,  searchLen,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getValue(i,  searchLen,  j);	  Integer    str1    =    cs.getValue(i,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
449	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  i  + "] ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  i  + "] ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  i  + "] ");	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
450	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "] ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "] ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "] ");	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
451	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch!=  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch!=  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch!=  ch)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
452	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
453	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs[i];  if(ch  ==  ch)  {  return  true;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
454	[BUG]  [BUGGY]  côte  edge  =  cs.getBounds(i);  [CE]  illegal  character:  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  côte  edge  =  cs.getBounds(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	côte  edge  =  cs.getBounds(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  character:  	95	None	replace
455	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
456	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
457	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
458	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  csLen,  searchChars);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  csLen,  searchChars);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  csLen,  searchChars);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
459	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[i].length();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[i].length();	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].length();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
460	[BUG]  [BUGGY]  Integer  searchLen  =  searchChars.indexOf(searchLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  searchLen  =  searchChars.indexOf(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  searchLen  =  searchChars.indexOf(searchLen);	  Integer    searchLen    =    cs.indexOf(searchLen);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
461	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  j);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  j);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  j);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
462	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  i);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  i);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
463	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(ch,  searchLen,  i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(ch,  searchLen,  i);	  aughtExceptionHandler.handleMissingSource(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
464	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  instantiate  search  string: "  +  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( "Failed  to  instantiate  search  string: "  +  ch);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( "Failed  to  instantiate  search  string: "  +  ch);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
465	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]!=  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break    	non-compiled	[CE]  	21	None	replace
466	[BUG]  [BUGGY]  cearcă  {  if(searchLen  >=  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  if(searchLen  >=  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  if(searchLen  >=  0)  {  if(searchChars[j]!=  ch)  {  return  false;  }	  if(searchLen    >    0)    {    if(searchChars[j]!=    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	98	None	replace
467	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1);  if(searchChars[j]  ==  ch)  {  continue	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	110	None	replace
468	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  search  char[ "  +  searchChars[j]  + "] ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Invalid  search  char[ "  +  searchChars[j]  + "] ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Invalid  search  char[ "  +  searchChars[j]  + "] ");	  throw    new    IllegalArgumentException(   "   ".equals(searchChars[j]));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
469	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Search  ' "  +  searchChars[j]  + "'  has  conflicting  values. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Search  ' "  +  searchChars[j]  + "'  has  conflicting  values. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Search  ' "  +  searchChars[j]  + "'  has  conflicting  values. ");	  throw    new    IllegalArgumentException(   "   ".equals(searchChars[j]));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
470	[BUG]  [BUGGY]  nisipToInt(searchLen)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  nisipToInt(searchLen)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	nisipToInt(searchLen)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	1	None	replace
471	[BUG]  [BUGGY]  nisipToInt(searchLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  nisipToInt(searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	nisipToInt(searchLen);	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
472	[BUG]  [BUGGY]  nisipToLastChar(searchLen)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  nisipToLastChar(searchLen)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	nisipToLastChar(searchLen)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	1	None	replace
473	[BUG]  [BUGGY]  nisipToInt(searchLen,  csLast)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  nisipToInt(searchLen,  csLast)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	nisipToInt(searchLen,  csLast)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	1	None	replace
474	[BUG]  [BUGGY]  Cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  if(i  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
475	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingName(cs,  i,  searchLen);	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
476	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  i,  searchLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingSource(cs,  i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingSource(cs,  i,  searchLen);	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
477	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen,  searchChars[j]));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingName(cs,  i,  searchLen,  searchChars[j]));  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingName(cs,  i,  searchLen,  searchChars[j]));	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  	22	None	replace
478	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	127	None	replace
479	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  String  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false    	non-compiled	[CE]  	83	None	replace
480	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
481	[BUG]  [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
482	[BUG]  [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    {    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	142	None	replace
483	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	143	None	replace
484	[BUG]  [BUGGY]  if(searchLen[j]!=  ch)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen[j]!=  ch)  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen[j]!=  ch)  {  return  true;  }	  if(searchChars[j]!=    ch)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
485	[BUG]  [BUGGY]  ||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
486	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  PAD_LIMIT  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  PAD_LIMIT  :  null;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  EMPTY?  PAD_LIMIT  :  null;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    null;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
487	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
488	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
489	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
490	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
491	[BUG]  [BUGGY]  return  j  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  j  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  j  ==  INDEX_NOT_FOUND?  cs.charAt(j):  ch;	  return    ch    ==    EMPTY?    INDEX_NOT_FOUND    :    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
492	[BUG]  [BUGGY]  char  ch  =  this.searchChars[j];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  char  ch  =  this.searchChars[j];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	char  ch  =  this.searchChars[j];	  char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
493	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	145	None	replace
494	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  	101	None	replace
495	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
496	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '-')  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '-')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '-')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
497	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  continue  false;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
498	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  break;  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
499	[BUG]  [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
500	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt[i].charAt(j);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt[i].charAt(j);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt[i].charAt(j);  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    }    	non-compiled	[CE]  not  a  statement	136	None	replace
501	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	131	None	replace
502	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  	88	None	replace
503	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(ch));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( " "  +  ch.equals(ch));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( " "  +  ch.equals(ch));	  throw    new    IllegalArgumentException(   "   ".equals(ch));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
504	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  ch;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  ch;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  ch;  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
505	[BUG]  [BUGGY]  allowSequence(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  allowSequence(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	allowSequence(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	1	None	replace
506	[BUG]  [BUGGY]  cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearc  {  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  cearcă    {    if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	35	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1,  j]);  if(searchChars[j]  ==  ch)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1,  j]);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i  +  1,  j]);  if(searchChars[j]  ==  ch)  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    	non-compiled	[CE]  	72	None	replace
508	[BUG]  [BUGGY]  CharSequence  cs  =  cs.charSequence(ch);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  cs.charSequence(ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  cs.charSequence(ch);	  CharSequence    cs    =    cs.charSequence(searchLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
509	[BUG]  [BUGGY]  ||  j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  j  >  0)  {  if(searchChars[j]  ==  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
510	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  instantiate  search  char  ' "  +  ch  + "' ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  instantiate  search  char  ' "  +  ch  + "' ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  instantiate  search  char  ' "  +  ch  + "' ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	7	None	replace
511	[BUG]  [BUGGY]  return  ch  ==  '.'?  EMPTY  :  ch;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  '.'?  EMPTY  :  ch;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  '.'?  EMPTY  :  ch;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
512	[BUG]  [BUGGY]  return  ch  ==  'n'?  EMPTY  :  DECOMPOSE;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  'n'?  EMPTY  :  DECOMPOSE;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  'n'?  EMPTY  :  DECOMPOSE;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
513	[BUG]  [BUGGY]  return  ch  ==  'n'?  EMPTY  :  DECOMPOSED;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  'n'?  EMPTY  :  DECOMPOSED;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  'n'?  EMPTY  :  DECOMPOSED;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
514	[BUG]  [BUGGY]  return  ch  ==  '.'?  EMPTY  :  DECOMPOSE;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  '.'?  EMPTY  :  DECOMPOSE;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  '.'?  EMPTY  :  DECOMPOSE;	  return    EMPTY;    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
515	[BUG]  [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return(searchChars[j]  ==  ch)?  null  :  searchChars[j].substring(i);	  return(searchChars[j]    ==    ch)?    null    :    searchChars[j].intValue();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
516	[BUG]  [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    	non-compiled	[CE]  not  a  statement	45	None	replace
517	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
518	[BUG]  [BUGGY]  ||  searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  MAX_NOT_FOUND)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
519	[BUG]  [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '-')  {  return  false;  }  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '-')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
520	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "]. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "]. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "Failed  to  find  char  ' "  +  ch  + "'.  Please  check  that  the  searchChars  are  not  in  the  range  [ "  +  j  + "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    find    char    '   "    +    ch    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
521	[BUG]  [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    ch)    {    return    false    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
522	[BUG]  [BUGGY]  ||  searchChars[j]  ==  ch)return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchChars[j]  ==  ch)return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchChars[j]  ==  ch)return  false;	  ||    searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
523	[BUG]  [BUGGY]  if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  '.')  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
524	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
525	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
526	[BUG]  [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch    	non-compiled	[CE]  	51	None	replace
527	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	80	None	replace
528	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ' "  +  cs.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalArgumentException( "The  ' "  +  cs.getMessage());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalArgumentException( "The  ' "  +  cs.getMessage());	  throw    new    IllegalArgumentException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
529	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  j++)  {  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  j++)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  j++)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  not  a  statement	135	None	replace
530	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  j++)  {  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  j++)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  j++)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  not  a  statement	135	None	replace
531	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  j++)  {  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  j++)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  j++)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  not  a  statement	135	None	replace
532	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i,  j);  j++)  {  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i,  j);  j++)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i,  j);  j++)  {  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    j++)    {    }    	non-compiled	[CE]  not  a  statement	135	None	replace
533	[BUG]  [BUGGY]  if(csLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	122	None	replace
534	[BUG]  [BUGGY]  if(searchChars[i]  ==  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[i]  ==  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[i]  ==  null)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	110	None	replace
535	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  	109	None	replace
536	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  >  expected	109	None	replace
537	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    	non-compiled	[CE]  	2	None	replace
538	[BUG]  [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  >  expected	108	None	replace
539	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	108	None	replace
540	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false    	non-compiled	[CE]  	107	None	replace
541	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
542	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
543	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
544	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  true;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
545	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(cs,  i,  searchLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingClass(cs,  i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingClass(cs,  i,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
546	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  ch);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  ch);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
547	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
548	[BUG]  [BUGGY]  if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
549	[BUG]  [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	25	None	replace
550	[BUG]  [BUGGY]  if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[j]  ==  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars[j]!=    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
551	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
552	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
553	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
554	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  break;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	82	None	replace
555	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  null);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(cs,  i,  searchLen,  null);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
556	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
557	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
558	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
559	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
560	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch]  ==  ch)  {  return  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
561	[BUG]  [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	43	None	replace
562	[BUG]  [BUGGY]  Integer  str1  =  cs.getSequence(searchLen,  j  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Integer  str1  =  cs.getSequence(searchLen,  j  +  1);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Integer  str1  =  cs.getSequence(searchLen,  j  +  1);	  Integer    str1    =    cs.getSequence(searchLen,    j);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
563	[BUG]  [BUGGY]  cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	32	None	replace
564	[BUG]  [BUGGY]  cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndFix(searchChars[j])  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }	  if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  	32	None	replace
565	[BUG]  [BUGGY]  Char  ch  =  searchChars[j],  csLen);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  searchChars[j],  csLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  searchChars[j],  csLen);	  Char    ch    =    searchChars[j];    	non-compiled	[CE]  	28	None	replace
566	[BUG]  [BUGGY]  Char  ch  =  searchChars[i];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Char  ch  =  searchChars[i];  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Char  ch  =  searchChars[i];	  Char    ch    =    searchChars[j];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
567	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  continue  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
568	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
569	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
570	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
571	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
572	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  i,  csLen,  searchChars[j]));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  i,  csLen,  searchChars[j]));  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  i,  csLen,  searchChars[j]));	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  	79	None	replace
573	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  i,  csLen,  searchChars);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  i,  csLen,  searchChars);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  i,  csLen,  searchChars);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
574	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  csLen,  j,  searchLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  csLen,  j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  csLen,  j,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
575	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
576	[BUG]  [BUGGY]  if(searchChars[i]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchChars[i]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchChars[i]  ==  '.')  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
577	[BUG]  [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  MAX_LIMIT)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
578	[BUG]  [BUGGY]  côte  edge  =  cs.charAt(i).charAt(i);  [CE]  illegal  character:  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  côte  edge  =  cs.charAt(i).charAt(i);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	côte  edge  =  cs.charAt(i).charAt(i);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(i);    if(searchChars[j]    ==    ch)    {    }    	non-compiled	[CE]  illegal  character:  	77	None	replace
579	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	106	None	replace
580	[BUG]  [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false    	non-compiled	[CE]  	3	None	replace
581	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false  }	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false    	non-compiled	[CE]  	3	None	replace
582	[BUG]  [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Cearc  {  for(int  i  =  0;  j  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  continue  false;  }	  cearcă    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    ch)    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
583	[BUG]  [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0  ||  searchChars[j]  ==  ch)  {  return  false;  }	  ||    searchLen    >    0    ||    searchChars[j]    ==    ch)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
584	[BUG]  [BUGGY]  return  ch!=  EMPTY?  this  :  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch!=  EMPTY?  this  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch!=  EMPTY?  this  :  cs.charAt(j);	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
585	[BUG]  [BUGGY]  return  ch!=  EMPTY?  this  :  cs.charAt(i);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch!=  EMPTY?  this  :  cs.charAt(i);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch!=  EMPTY?  this  :  cs.charAt(i);	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
586	[BUG]  [BUGGY]  return  ch  ==  EMPTY?  this  :  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  return  ch  ==  EMPTY?  this  :  cs.charAt(j);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	return  ch  ==  EMPTY?  this  :  cs.charAt(j);	  return    this;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
587	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
588	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=' "')  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=' "')  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=' "')  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
589	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  continue  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '   "')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
590	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  }	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
591	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
592	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
593	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
594	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	for(int  i  =  0;  i  <  searchLen;  i++)  {  Char  ch  =  cs.charAt(i);  }	  if(searchChars[j]!=    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
595	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  j,  searchLen,  csLast);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  j,  searchLen,  csLast);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  j,  searchLen,  csLast);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
596	[BUG]  [BUGGY]  cearcăAndFix(cs.charAt(i),  j,  searchLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndFix(cs.charAt(i),  j,  searchLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndFix(cs.charAt(i),  j,  searchLen);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
597	[BUG]  [BUGGY]  cearcăAndSet(searchChars,  j,  csLen,  searchChars);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcăAndSet(searchChars,  j,  csLen,  searchChars);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcăAndSet(searchChars,  j,  csLen,  searchChars);	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
598	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  }	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
599	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  }  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  break;  }  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  not  a  statement	97	None	replace
600	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  break;  }  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break;    }    }    	non-compiled	[CE]  not  a  statement	97	None	replace
601	[BUG]  [BUGGY]  Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)  ==  cs[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  true	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
602	[BUG]  [BUGGY]  ||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  <  0  &&  searchChars[j]  ==  ch))  {  return  false;	  ||(searchLen    ==    0    &&    searchChars[j]    ==    ch))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
603	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i).charAt(j);    if(ch!=    '+')    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
604	[BUG]  [BUGGY]  if(j  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(j  ==  0)  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(j  ==  0)  {  return  true;  }	  if(searchLen    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
605	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  JsonStringEncoder.getInstance());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  JsonStringEncoder.getInstance());  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  JsonStringEncoder.getInstance());	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
606	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  searchLen,  csLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  aughtExceptionHandler.handleMissingChar(ch,  searchLen,  csLen);  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	aughtExceptionHandler.handleMissingChar(ch,  searchLen,  csLen);	  aughtExceptionHandler.handleMissingChar(ch,    searchLen);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
607	[BUG]  [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	Character(ch)!=  searchChars[j])  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '	  Character(ch)    ==    searchChars[j])    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '    	non-compiled	[CE]  not  a  statement	46	None	replace
608	[BUG]  [BUGGY]  j]  =  cs.charAt(i);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  j]  =  cs.charAt(i);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	j]  =  cs.charAt(i);	  result[j]    =    cs.charAt(j);    	non-compiled	[CE]  not  a  statement	49	None	replace
609	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  instantiate  searchChars. ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( "Failed  to  instantiate  searchChars. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( "Failed  to  instantiate  searchChars. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
610	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Search  ' "  +  cs.charAt(j)+ "'  does  not  exist. ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  throw  new  IllegalStateException( "Search  ' "  +  cs.charAt(j)+ "'  does  not  exist. ");  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	throw  new  IllegalStateException( "Search  ' "  +  cs.charAt(j)+ "'  does  not  exist. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
611	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  return  false;  }  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
612	[BUG]  [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [CE]  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	23	None	replace
613	[BUG]  [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    	non-compiled	[CE]  	23	None	replace
614	[BUG]  [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(csLen  >  0)  {  if(searchChars[j]  ==  ch)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    break    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
615	[BUG]  [BUGGY]  ||(j  <  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||(j  <  0  &&  searchChars[j]!=  ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||(j  <  0  &&  searchChars[j]!=  ch))  {  return  false;  }	  ||(searchLen    ==    0    &&    searchChars[j]!=    ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
616	[BUG]  [BUGGY]  CharSequence  cs  =  charSequence.charSequence();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  CharSequence  cs  =  charSequence.charSequence();  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	CharSequence  cs  =  charSequence.charSequence();	  CharSequence    cs    =    cs.charSequence();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
617	[BUG]  [BUGGY]  ||  cs.charAt(j]  ==  ch)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  cs.charAt(j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  cs.charAt(j]  ==  ch)  {	  ||    searchChars[j]    ==    ch)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
618	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  false;  }  }	  for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    false;    }    	non-compiled	[CE]  	78	None	replace
619	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	123	None	replace
620	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	123	None	replace
621	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  continue  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  0)  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	123	None	replace
622	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  <  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch  <  0)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    <    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	123	None	replace
623	[BUG]  [BUGGY]  if(!Character.isDigit(ch)||!Character.isDigit(ch))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(!Character.isDigit(ch)||!Character.isDigit(ch))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(!Character.isDigit(ch)||!Character.isDigit(ch))  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
624	[BUG]  [BUGGY]  if(!Character.isDigit(ch)||  cs.charAt(j)!=  '0')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(!Character.isDigit(ch)||  cs.charAt(j)!=  '0')  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(!Character.isDigit(ch)||  cs.charAt(j)!=  '0')  {  return  false;  }	  if(!Character.isDigit(ch))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
625	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {	  if(searchLen    >    0)    {    if(searchChars[j]    ==    ch)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
626	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(searchChars[j]  ==  ch)  {  continue  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	116	None	replace
627	[BUG]  [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	if(searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(searchChars[j]  ==  ch)  {  continue  true	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(searchChars[j]    ==    ch)    {    continue    true    	non-compiled	[CE]  	116	None	replace
628	[BUG]  [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  ||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	||  searchLen  >  0)  {  for(int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  ||    searchLen    >    0)    {    for(int    i    =    0;    i    <    csLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
629	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  continue  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i).charAt(j);  if(ch!=  '+')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	141	None	replace
630	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  continue  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	141	None	replace
631	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  continue  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  >=  '+')  {  continue  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    continue    false;    }    	non-compiled	[CE]  not  a  statement	141	None	replace
632	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  true;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  true;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
633	[BUG]  [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {        [BUGGY]  cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  return  true;  }  [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1685	1685	10	replace	cearcă  {  for(int  i  =  0;  i  <  searchLen;  i++)  {  CharSequence  cs  =  cs.charAt(i);  if(cs!=  null)  {  return  false;  }	  if(searchLen    >    0)    {    for(int    i    =    0;    i    <    searchLen;    i++)    {    char    ch    =    cs.charAt(i);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
