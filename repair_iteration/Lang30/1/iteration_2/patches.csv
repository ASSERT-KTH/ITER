bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  ch  =  cs.charAt(j  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(j  +  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(j  +  1);	  char    ch    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
3	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
4	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
5	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs  ==  null)return  false;  }	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars  ==  null)return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars  ==  null)return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars  ==  null)return  true;  }	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)return  false;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs  ==  null)return  false;	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  If  (searchChars  ==  null  ||  cs  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  If  (searchChars  ==  null  ||  cs  ==  null)  {  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	If  (searchChars  ==  null  ||  cs  ==  null)  {	  if    (searchChars    ==    null    ||    cs    ==    null)    {    If    (searchChars    ==    null    ||    cs    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchChars.length  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchChars.length  -  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(searchChars.length  -  1);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchChars.length  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchChars.length  +  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(searchChars.length  +  1);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  -  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(0,  searchChars.length  -  1);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
12	[BUG]  [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(0,  searchChars.length  +  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(0,  searchChars.length  +  1);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
14	[BUG]  [BUGGY]  char  ch  =  cs[i];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs[i];  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs[i];	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i].charAt(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i].charAt(i);  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i].charAt(i);  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  Char  ch  =  cs[i];  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  Char  ch  =  cs[i];  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  Char  ch  =  cs[i];  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
17	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
18	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
19	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
20	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
21	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getSearchChars(searchChars);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getSearchChars(searchChars);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getSearchChars(searchChars);	  char[]    searchChars    =    cs.getSearchChars();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
22	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length()  -  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length()  -  1;	  int    searchLen    =    searchChars.length();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
23	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs  ==  null)  {  return  true;  }	  if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
25	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
26	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '%')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
27	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
28	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
29	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
30	[BUG]  [BUGGY]  if(searchChars!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  return  false;  }	          if(searchChars    ==    null)    {    return    true;    }    if(searchChars    >=    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  ||  searchChars  ==  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||  searchChars  ==  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||  searchChars  ==  null)  {  return  true;  }	          if(searchChars    ==    null)    {    return    true;    }    if(searchChars    {    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
32	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
33	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
34	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
35	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
36	[BUG]  [BUGGY]  Integer  searchLen  =  cs.length();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Integer  searchLen  =  cs.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Integer  searchLen  =  cs.length();	  int    searchLen    =    cs.length()    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
37	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
38	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  2)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  2)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  2)  {  return  true;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
39	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars!=  null)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars!=  null)  {  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars!=  null)  {	  if    (searchChars    ==    null    ||    cs    ==    null)    {    if    (searchChars    ==    null    ||    cs!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
41	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
42	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
43	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length  -  4;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length  -  4;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length  -  4;	  int    searchLen    =    searchChars.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
44	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length  /  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length  /  2;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length  /  2;	  int    searchLen    =    searchChars.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
45	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
46	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs  ==  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;	          if(searchChars    ==    null)    {    return    false;    }    If(searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
49	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  null))  {  return  false;  }	          if(searchChars    ==    null)    {    return    false;    }    If(searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
50	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars!=  null  &&  searchChars[0].length()  ==  0))  {  return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars!=  null  &&  searchChars[0].length()  ==  0))  {  return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars!=  null  &&  searchChars[0].length()  ==  0))  {  return  false;	          if(searchChars    ==    null)    {    return    false;    }    If(searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length  -  3;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length  -  3;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length  -  3;	  int    searchLen    =    searchChars.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
52	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)    ==    '/'))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  ||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)  ==  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)    ==    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
54	[BUG]  [BUGGY]  int  searchLen  =  this.searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  this.searchChars.length  -  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  this.searchChars.length  -  1;	  int    searchLen    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
55	[BUG]  [BUGGY]  int  searchLen  =  this.searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  this.searchChars.length  -  2;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  this.searchChars.length  -  2;	  int    searchLen    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
56	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(i  +  1);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  1,  searchChars.length);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(i  +  1,  searchChars.length);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs!=  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs!=  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs!=  null)  {  return  false;  }	  if(cs!=    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
59	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars  ==  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs    {    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
60	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars.length()  ==  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
62	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length()  ==  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
65	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
67	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
68	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
69	[BUG]  [BUGGY]  Integer  csLen  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Integer  csLen  =  searchChars.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Integer  csLen  =  searchChars.length();	  Integer    csLen    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
70	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length  /  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length  /  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length  /  1;	  int    searchLen    =    searchChars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
71	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length  +  2;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length  +  2;	  int    searchLen    =    searchChars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
72	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {	          if(searchChars    ==    null)    {    return    true;    }    If(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
73	[BUG]  [BUGGY]  int  csLen  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  searchChars.length  -  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  searchChars.length  -  1;	  int    csLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
74	[BUG]  [BUGGY]  int  csLen  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  searchChars.length  +  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  searchChars.length  +  1;	  int    csLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
75	[BUG]  [BUGGY]  int  csLen  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  searchChars.length  -  2;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  searchChars.length  -  2;	  int    csLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
77	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
78	[BUG]  [BUGGY]  char  searchLen  =  cs.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  searchLen  =  cs.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  searchLen  =  cs.length;	  int    searchLen    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
79	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '   "')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
81	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==' "')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '   "')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
82	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  true;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
83	[BUG]  [BUGGY]  ||  searchChars  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||  searchChars  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||  searchChars  ==  null)  {  return  false;  }	          if(searchChars    ==    null)    {    return    false;    }    if(searchChars!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
84	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getSequenceChars(searchChars);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getSequenceChars(searchChars);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getSequenceChars(searchChars);	  char[]    searchChars    =    cs.getSequenceChars();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  int  csLen  =  searchChars.length()  +  cs.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  searchChars.length()  +  cs.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  searchChars.length()  +  cs.length;	  int    csLen    =    cs.length()    +    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
86	[BUG]  [BUGGY]  int  csLen  =  cs.length()  *  searchChars.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  cs.length()  *  searchChars.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  cs.length()  *  searchChars.length;	  int    csLen    =    cs.length()    +    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
87	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getQualifiedName();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getQualifiedName();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getQualifiedName();	  char[]    searchChars    =    cs.getString();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
88	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(searchChars.length    >    0))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
89	[BUG]  [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  ||  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  false;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(searchChars.length    >    0))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
90	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.length  >  0))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(searchChars.length    >    0))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  false;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
93	[BUG]  [BUGGY]  ||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(cs  ==  null  &&  searchChars.length  >  0)||(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
94	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars!=  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  return  false;  }  if(cs  ==  null  ||  searchChars!=  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs    ==    null    ||    searchChars!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
96	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
97	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
98	[BUG]  [BUGGY]  int  csLen  =  searchChars.length()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  searchChars.length()  +  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  searchChars.length()  +  1;	  int    csLen    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
99	[BUG]  [BUGGY]  char  csLen  =  searchChars.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  csLen  =  searchChars.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  csLen  =  searchChars.length();	  int    csLen    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
100	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    true;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
101	[BUG]  [BUGGY]  char  ch  =  cs.charAt(index  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(index  +  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(index  +  1);	  char    ch    =    cs.charAt(index);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
102	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  searchChars.charAt(i);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  searchChars.charAt(i);	  char    ch    =    searchChars.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  char  ch  =  cs.charAt(1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(1);	  char    ch    =    searchChars.charAt(0);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
105	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
106	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  int  searchLen  =  searchChars.length()  +  cs.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  searchChars.length()  +  cs.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  searchChars.length()  +  cs.length;	  int    searchLen    =    cs.length()    +    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
108	[BUG]  [BUGGY]  int  searchLen  =  cs.length()  *  searchChars.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  cs.length()  *  searchChars.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  cs.length()  *  searchChars.length;	  int    searchLen    =    cs.length()    +    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
109	[BUG]  [BUGGY]  int  searchLen  =  cs.length()  +  searchChars.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  cs.length()  +  searchChars.length  +  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  cs.length()  +  searchChars.length  +  1;	  int    searchLen    =    cs.length()    +    searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
110	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  0);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getChars(searchChars,  0);	  char[]    searchChars    =    cs.getChars(searchChars);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  true);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getChars(searchChars,  true);	  char[]    searchChars    =    cs.getChars(searchChars);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  false);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getChars(searchChars,  false);	  char[]    searchChars    =    cs.getChars(searchChars);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getChars(searchChars,  1);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getChars(searchChars,  1);	  char[]    searchChars    =    cs.getChars(searchChars);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
114	[BUG]  [BUGGY]  String  csLen  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  csLen  =  cs.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  csLen  =  cs.length();	  char    csLen    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
115	[BUG]  [BUGGY]  Char  csLen  =  cs.length();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Char  csLen  =  cs.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Char  csLen  =  cs.length();	  char    csLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
116	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
117	[BUG]  [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars!=  null  &&  searchChars.length  >  0)||(searchChars.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
118	[BUG]  [BUGGY]  Context.checkState(searchChars  ==  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Context.checkState(searchChars  ==  null);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Context.checkState(searchChars  ==  null);	          if(searchChars    ==    null)    {    return    true;    }    if(searchChars    >=    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
119	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {	  if    (searchChars    ==    null    ||    cs    ==    null)    {    If    (searchChars    ==    null    ||    cs    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
121	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
122	[BUG]  [BUGGY]  Integer  csLen  =  searchChars.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Integer  csLen  =  searchChars.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Integer  csLen  =  searchChars.length;	  Integer    csLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
123	[BUG]  [BUGGY]  if(searchChars!=  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  return  true;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    true;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  if(!containsNone(cs,  searchChars))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!containsNone(cs,  searchChars))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(!containsNone(cs,  searchChars))  {  return  true;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    true;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
125	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length()!=  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
126	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
127	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getSearchChars(searchChars,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getSearchChars(searchChars,  false);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getSearchChars(searchChars,  false);	  char[]    searchChars    =    cs.getSearchChars();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
128	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)return  false;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars  ==  null)return  false;	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
129	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars  ==  null)return  true;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(cs  ==  null  ||  searchChars  ==  null)return  true;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(cs  ==  null  ||  searchChars  ==  null)return  true;	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
130	[BUG]  [BUGGY]  if(!containsNone(cs,  searchChars))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(!containsNone(cs,  searchChars))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(!containsNone(cs,  searchChars))  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    If(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
132	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
133	[BUG]  [BUGGY]  char  ch  =  cs.charAt(searchChars);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(searchChars);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(searchChars);	  char    ch    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
134	[BUG]  [BUGGY]  int  searchLen  =  cs.length  -  searchChars.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  cs.length  -  searchChars.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  cs.length  -  searchChars.length;	  int    searchLen    =    cs.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
135	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
136	[BUG]  [BUGGY]  if(searchChars!=  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  return  false;  }  if(cs!=  null  ||  searchChars  ==  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
137	[BUG]  [BUGGY]  char  searchLen  =  cs.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  searchLen  =  cs.length();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  searchLen  =  cs.length();	  int    searchLen    =    cs.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
138	[BUG]  [BUGGY]  char  ch  =  searchChars.charAt(cs.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  searchChars.charAt(cs.length);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  searchChars.charAt(cs.length);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
139	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  else  if(searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  else  if(searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  return  false;  }  else  if(searchChars.length  ==  0)  {  return  false;  }	          if(searchChars    ==    null)    {    return    false;    }    If(searchChars    ==    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
140	[BUG]  [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char  ch  =  cs.charAt(i  +  searchChars.length);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char  ch  =  cs.charAt(i  +  searchChars.length);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
141	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getSequenceChars2();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  char[]  searchChars  =  cs.getSequenceChars2();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	char[]  searchChars  =  cs.getSequenceChars2();	  char[]    searchChars    =    cs.getSequenceChars();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
142	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
143	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
144	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  true;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
145	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars!=  null)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  return  false;  }  if(cs!=  null  ||  searchChars!=  null)  {  return  false;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    false;    }    if(cs    ==    null    ||    searchChars!=    null)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
146	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {	  if    (searchChars    ==    null    ||    cs    ==    null)    {    if    (searchChars!=    null    ||    cs    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
147	[BUG]  [BUGGY]  int  searchLen  =  this.searchChars.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  this.searchChars.length  +  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  this.searchChars.length  +  1;	  int    searchLen    =    this.searchChars.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
148	[BUG]  [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs[i];  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
149	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  cs.length;  i++)  {  char  ch  =  cs[i];  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  cs.length;  i++)  {  char  ch  =  cs[i];  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  cs.length;  i++)  {  char  ch  =  cs[i];  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs[i];    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
150	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars!=  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars!=  null)  {  if(cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    true;    }    if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
151	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars  ==  null)  {  return  true;  }	          if(cs    ==    null    ||    searchChars    ==    null)    {    return    true;    }    if(cs    {    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
152	[BUG]  [BUGGY]  String  ch  =  cs.charAt(i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  ch  =  cs.charAt(i);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  ch  =  cs.charAt(i);	  char    ch    =    cs.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
153	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  null)return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars  ==  null)return  false;  }	  if(cs    ==    null    ||    searchChars    ==    null)return    false;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
154	[BUG]  [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)&&(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)&&(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  ||  searchChars.length  >  0)&&(cs.charAt(searchChars.length  -  1)!=  '/'))  {  return  true;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(cs.charAt(searchChars.length    -    1)!=    '/'))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
155	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '+')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
156	[BUG]  [BUGGY]  String  ch  =  cs.charAt(j);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  ch  =  cs.charAt(j);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  ch  =  cs.charAt(j);	  char    ch    =    cs.charAt(j);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
157	[BUG]  [BUGGY]  int  searchLen  =  cs.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  searchLen  =  cs.length  -  1;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  searchLen  =  cs.length  -  1;	  int    searchLen    =    searchChars.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
158	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)return  false;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)return  false;	  if(searchChars    ==    null    ||    searchChars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
159	[BUG]  [BUGGY]  CharSequence  cs  =  cs.getSequenceChars();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  CharSequence  cs  =  cs.getSequenceChars();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	CharSequence  cs  =  cs.getSequenceChars();	  char[]    searchChars    =    cs.getSequenceChars();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
160	[BUG]  [BUGGY]  Integer  csLen  =  cs.length()  +  searchChars.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  Integer  csLen  =  cs.length()  +  searchChars.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	Integer  csLen  =  cs.length()  +  searchChars.length;	  Integer    csLen    =    cs.length();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
161	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
162	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  0)  {  return  true;  }	  if(searchChars    ==    null    ||    cs.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
163	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
164	[BUG]  [BUGGY]  String  ch  =  cs.charAt(index);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  ch  =  cs.charAt(index);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  ch  =  cs.charAt(index);	  char    ch    =    cs.charAt(index);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
165	[BUG]  [BUGGY]  String  ch  =  cs.charAt(searchChars.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  ch  =  cs.charAt(searchChars.length);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  ch  =  cs.charAt(searchChars.length);	  char    ch    =    cs.charAt(searchChars.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
166	[BUG]  [BUGGY]  String  ch  =  cs.charAt(0,  searchChars.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  String  ch  =  cs.charAt(0,  searchChars.length);  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	String  ch  =  cs.charAt(0,  searchChars.length);	  char    ch    =    cs.charAt(0,    searchChars.length);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
167	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    EMPTY)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
168	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
169	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
170	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  <  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
171	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
172	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  {  ch)  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    ch)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
173	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  true;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  true;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
174	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch  ==  '%')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '%')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
175	[BUG]  [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)&&(searchChars.length  >  0))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  ||(searchChars  ==  null  ||  searchChars.length  >  0)&&(searchChars.length  >  0))  {  return  false;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	||(searchChars  ==  null  ||  searchChars.length  >  0)&&(searchChars.length  >  0))  {  return  false;  }	  ||(searchChars    ==    null    &&    searchChars.length    >    0)||(searchChars.length    >    0))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
176	[BUG]  [BUGGY]  CharSequence  cs  =  cs.getSearchChars();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  CharSequence  cs  =  cs.getSearchChars();  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	CharSequence  cs  =  cs.getSearchChars();	  char[]    searchChars    =    cs.getSearchChars();    	non-compiled	[CE]  <identifier>  expected	57	None	replace
177	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs!=  null)  {  return  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  cs!=  null)  {  return  true;  }  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  cs!=  null)  {  return  true;  }	  if(cs!=    null    ||    searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
178	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)return  false;	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
179	[BUG]  [BUGGY]  int  csLen  =  cs.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  int  csLen  =  cs.length;  [BUGGY]      if  (cs  ==  null  ||  searchChars  ==  null)  {  return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	int  csLen  =  cs.length;	  int    csLen    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
180	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  Collections.EMPTY_LIST)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars  ==  Collections.EMPTY_LIST)  {  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars  ==  Collections.EMPTY_LIST)  {	  if    (searchChars    ==    null    ||    searchChars    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
181	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=' "')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch    ==    '   "')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
182	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
183	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
184	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  '+')  {  return  false;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    '+')    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
185	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsNone(CharSequence  cs,  char[]  searchChars)  {      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }  [BUGGY]      return  true;  }  int  csLen  =  cs.length();  int  searchLen  =  searchChars.length;  for  (int  i  =  0;  i  <  csLen;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLen;  j++)  {  if  (searchChars[j]  ==  ch)  {    [CLASS]  StringUtils  [METHOD]  containsNone  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  validChars  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.5163977794943222	1674	1674	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  2)  {  for(int  i  =  0;  i  <  searchChars.length;  i++)  {  char  ch  =  cs.charAt(i);  if(ch!=  EMPTY)  {  return  true;  }	  if(searchChars    ==    null)    {    for(int    i    =    0;    i    <    searchChars.length;    i++)    {    char    ch    =    cs.charAt(i);    if(ch!=    EMPTY)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
