bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty()    ||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
2	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty()    ||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
3	[BUG]  [BUGGY]  if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.isEmpty()  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty()    ||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
4	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
5	[BUG]  [BUGGY]  if(searchChars.length  ==  0)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars.length  ==  0)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars.length  ==  0)  {  if(cs.length()  ==  searchChars.length)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
6	[BUG]  [BUGGY]  if(cs!=  null)  {  if(!cs.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null)  {  if(!cs.isEmpty())  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null)  {  if(!cs.isEmpty())  {  return  false;  }	  if(searchChars!=    null)    {    if(!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||  searchChars.length  ==  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
8	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
9	[BUG]  [BUGGY]  Integer  j  =  searchChars.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  j  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  j  =  searchChars.length();	  Integer    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
10	[BUG]  [BUGGY]  Integer  j  =  cs.length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  j  =  cs.length()  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  j  =  cs.length()  +  1;	  Integer    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
11	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
12	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)  {  return  true;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
13	[BUG]  [BUGGY]  if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
14	[BUG]  [BUGGY]  if(cs!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||  cs.length()!=  searchChars.length)  {  return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
15	[BUG]  [BUGGY]  int  csLimit  =  searchChars.length  /  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLimit  =  searchChars.length  /  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLimit  =  searchChars.length  /  1;	  int    csLimit    =    searchChars.length    +    1;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
16	[BUG]  [BUGGY]  if(cs!=  null  ||!cs.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||!cs.isEmpty())  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||!cs.isEmpty())  {  return  false;  }	  if(cs    ==    null    ||!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
17	[BUG]  [BUGGY]  if(cs  ==  null  ||!cs.isEmpty())return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||!cs.isEmpty())return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||!cs.isEmpty())return  false;  }	  if(cs    ==    null    ||!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
18	[BUG]  [BUGGY]  if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)  {  return  false;  }	  if(searchChars.length    ==    0)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  char  searchLength  =  cs.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  searchLength  =  cs.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  searchLength  =  cs.length;	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
20	[BUG]  [BUGGY]  int  searchLength  -=  cs.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  -=  cs.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  -=  cs.length;	  int    searchLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
21	[BUG]  [BUGGY]  char  csLength  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLength  =  searchChars.length  -  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLength  =  searchChars.length  -  1;	  char    csLength    =    cs.length    -    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
22	[BUG]  [BUGGY]  String  csLength  =  cs.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLength  =  cs.length  -  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLength  =  cs.length  -  1;	  char    csLength    =    cs.length    -    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
23	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
24	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
25	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||  searchChars.length()!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
26	[BUG]  [BUGGY]  int  searchLimit  =  searchChars.length  /  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  searchChars.length  /  2;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  searchChars.length  /  2;	  int    searchLimit    =    searchChars.length    -    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  String  csLength  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLength  =  searchChars.length();  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLength  =  searchChars.length();	  char    csLength    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  Integer  csLimit  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLimit  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLimit  =  searchChars.length();	  int    csLimit    =    searchChars.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
29	[BUG]  [BUGGY]  char  csLimit  =  searchChars.length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLimit  =  searchChars.length()  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLimit  =  searchChars.length()  +  1;	  char    csLimit    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
30	[BUG]  [BUGGY]  String  csLimit  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLimit  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLimit  =  searchChars.length();	  char    csLimit    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
31	[BUG]  [BUGGY]  char  csLimit  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLimit  =  searchChars.length  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLimit  =  searchChars.length  -  1;	  char    csLimit    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	67	None	replace
32	[BUG]  [BUGGY]  char  csLength  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLength  =  searchChars.length  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLength  =  searchChars.length  +  1;	  char    csLength    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  String  searchLength  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  searchLength  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  searchLength  =  cs.length();	  char    searchLength    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  char  searchLength  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  searchLength  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  searchLength  =  searchChars.length();	  char    searchLength    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  if(!cs.contains(searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.contains(searchChars))  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.contains(searchChars))  {  return  true;  }	  if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
36	[BUG]  [BUGGY]  int  csLength  =  searchChars.length  /  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLength  =  searchChars.length  /  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLength  =  searchChars.length  /  1;	  int    csLength    =    searchChars.length    +    1;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
37	[BUG]  [BUGGY]  char  csLimit  =  cs.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLimit  =  cs.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLimit  =  cs.length;	  int    csLimit    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
38	[BUG]  [BUGGY]  Integer  csLimit  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLimit  =  searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLimit  =  searchChars.length;	  int    csLimit    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
39	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  searchChars.length  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  searchChars.length  +  1;	  int    searchLength    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[cs.size()  +  1];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[cs.size()  +  1];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[cs.size()  +  1];	  char[]    searchChars    =    new    char[cs.size()    ];    	non-compiled	[CE]  <identifier>  expected	62	None	replace
41	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[cs.size()  -  1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[cs.size()  -  1];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[cs.size()  -  1];	  char[]    searchChars    =    new    char[cs.size()    ];    	non-compiled	[CE]  <identifier>  expected	62	None	replace
42	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
43	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||  searchChars.length  <  2)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
44	[BUG]  [BUGGY]  char[]  searchChars  =  searchChars.toString();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  searchChars.toString();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  searchChars.toString();	  char[]    searchChars    =    cs.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
45	[BUG]  [BUGGY]  int  searchLimit  =  this.searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  this.searchChars.length  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  this.searchChars.length  -  1;	  int    searchLimit    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
46	[BUG]  [BUGGY]  int  searchLimit  =  cs.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  cs.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  cs.length;	  int    searchLimit    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
47	[BUG]  [BUGGY]  if(!cs.isEmpty())return  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.isEmpty())return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.isEmpty())return  false;	  if(searchChars    ==    null)    {    if(!cs.isEmpty())return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
48	[BUG]  [BUGGY]  if(cs  ==  null  ||!cs.isEmpty())return  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||!cs.isEmpty())return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||!cs.isEmpty())return  false;	  if(searchChars    ==    null)    {    if(!cs.isEmpty())return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
49	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty())return  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty())return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||!cs.isEmpty())return  false;	  if(searchChars    ==    null)    {    if(!cs.isEmpty())return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
50	[BUG]  [BUGGY]  if(cs!=  null  ||!cs.isEmpty())return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||!cs.isEmpty())return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||!cs.isEmpty())return  false;	  if(searchChars    ==    null)    {    if(!cs.isEmpty())return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
51	[BUG]  [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  if(cs  ==  null)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
54	[BUG]  [BUGGY]  char  j  =  cs.length()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  j  =  cs.length()  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  j  =  cs.length()  +  1;	  char    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
55	[BUG]  [BUGGY]  String  j  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  j  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  j  =  cs.length();	  char    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
56	[BUG]  [BUGGY]  char  j  =  cs.charAt(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  j  =  cs.charAt(0);  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  j  =  cs.charAt(0);	  char    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
57	[BUG]  [BUGGY]  Integer  searchLimit  =  searchChars.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  searchLimit  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  searchLimit  =  searchChars.length();	  int    searchLimit    =    searchChars.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
58	[BUG]  [BUGGY]  Integer  searchLength  =  cs.length();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  searchLength  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  searchLength  =  cs.length();	  int    searchLength    =    cs.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
59	[BUG]  [BUGGY]  int  csLimit  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLimit  =  searchChars.length  -  2;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLimit  =  searchChars.length  -  2;	  int    csLimit    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
60	[BUG]  [BUGGY]  int  csLimit  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLimit  =  searchChars.length  -  1  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLimit  =  searchChars.length  -  1  +  1;	  int    csLimit    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
61	[BUG]  [BUGGY]  if(searchChars!=  null  ||!cs.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||!cs.isEmpty())  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||!cs.isEmpty())  {  return  false;  }	  if(searchChars    ==    null    ||!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
62	[BUG]  [BUGGY]  if(!cs.isEmpty())  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.isEmpty())  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.isEmpty())  {  return  false;  }	  if(searchChars    ==    null    ||!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
63	[BUG]  [BUGGY]  int  csLength  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLength  =  searchChars.length  -  1  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLength  =  searchChars.length  -  1  +  1;	  int    csLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
64	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
65	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length  >=  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
66	[BUG]  [BUGGY]  int  searchLength  =  this.searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  this.searchChars.length  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  this.searchChars.length  -  1;	  int    searchLength    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
67	[BUG]  [BUGGY]  int  searchLength  =  this.searchChars.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  this.searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  this.searchChars.length();	  int    searchLength    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
68	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[cs.length()  +  1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[cs.length()  +  1];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[cs.length()  +  1];	  char[]    searchChars    =    new    char[cs.length()    ];    	non-compiled	[CE]  <identifier>  expected	39	None	replace
69	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[searchChars.length()  ];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[searchChars.length()  ];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[searchChars.length()  ];	  char[]    searchChars    =    new    char[cs.length()    ];    	non-compiled	[CE]  <identifier>  expected	39	None	replace
70	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[cs.length()  -  1];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[cs.length()  -  1];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[cs.length()  -  1];	  char[]    searchChars    =    new    char[cs.length()    ];    	non-compiled	[CE]  <identifier>  expected	39	None	replace
71	[BUG]  [BUGGY]  if(searchChars!=  null  ||!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||!cs.contains(searchChars))  {  return  false;  }	  if(cs    ==    null    ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
72	[BUG]  [BUGGY]  if(cs!=  null  ||!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||!cs.contains(searchChars))  {  return  false;  }	  if(cs    ==    null    ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
73	[BUG]  [BUGGY]  Integer  csLength  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLength  =  searchChars.length  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLength  =  searchChars.length  +  1;	  Integer    csLength    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
74	[BUG]  [BUGGY]  char  searchLimit  =  cs.length();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  searchLimit  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  searchLimit  =  cs.length();	  int    searchLimit    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
75	[BUG]  [BUGGY]  String  csLength  =  cs.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLength  =  cs.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLength  =  cs.length;	  char    csLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
76	[BUG]  [BUGGY]  Char  csLength  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Char  csLength  =  searchChars.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Char  csLength  =  searchChars.length;	  char    csLength    =    cs.length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
77	[BUG]  [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  cs[0]))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  ||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  cs[0]))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	||(searchChars  ==  null  &&  searchChars.length  >  0)||(searchChars[0]  ==  cs[0]))  {  return  false;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
78	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length!=  0)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
79	[BUG]  [BUGGY]  char[]  searchChars  =  this.searchChars.toCharArray();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  this.searchChars.toCharArray();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  this.searchChars.toCharArray();	  char[]    searchChars    =    searchChars.toCharArray();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  char[]  searchChars  =  findChars.toCharArray();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  findChars.toCharArray();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  findChars.toCharArray();	  char[]    searchChars    =    searchChars.toCharArray();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
81	[BUG]  [BUGGY]  int  j  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  searchChars.length  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  searchChars.length  -  1;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
82	[BUG]  [BUGGY]  int  j  =  this.searchChars.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  this.searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  this.searchChars.length();	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
83	[BUG]  [BUGGY]  int  j  =  searchChars.length()  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  searchChars.length()  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  searchChars.length()  +  1;	  int    j    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
84	[BUG]  [BUGGY]  int  j  =  searchChars.length()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  searchChars.length()  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  searchChars.length()  -  1;	  int    j    =    cs.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
85	[BUG]  [BUGGY]  int  searchLimit  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  searchChars.length  -  1  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  searchChars.length  -  1  +  1;	  int    searchLimit    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
86	[BUG]  [BUGGY]  int  searchLimit  =  searchChars.length  -  3;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  searchChars.length  -  3;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  searchChars.length  -  3;	  int    searchLimit    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
87	[BUG]  [BUGGY]  char  csLimit  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLimit  =  searchChars.length  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLimit  =  searchChars.length  +  1;	  char    csLimit    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
88	[BUG]  [BUGGY]  Integer  csLength  =  searchChars.length()  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLength  =  searchChars.length()  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLength  =  searchChars.length()  +  1;	  Integer    csLength    =    searchChars.length();    	non-compiled	[CE]  <identifier>  expected	36	None	replace
89	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharSequence(searchChars);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  cs.toCharSequence(searchChars);  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  cs.toCharSequence(searchChars);	  char[]    searchChars    =    cs.toCharSequence();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  int  len  =  searchChars.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  len  =  searchChars.length  -  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  len  =  searchChars.length  -  1;	  int    len    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
91	[BUG]  [BUGGY]  int  len  =  cs.length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  len  =  cs.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  len  =  cs.length;	  int    len    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
92	[BUG]  [BUGGY]  int  len  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  len  =  searchChars.length  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  len  =  searchChars.length  +  1;	  int    len    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
93	[BUG]  [BUGGY]  int  len  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  len  =  searchChars.length  -  2;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  len  =  searchChars.length  -  2;	  int    len    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
94	[BUG]  [BUGGY]  if(cs.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs.length()!=  searchChars.length)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  if(cs.length()  ==  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs.length()  ==  searchChars.length)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs.length()  ==  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
96	[BUG]  [BUGGY]  if(searchChars.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars.length()!=  searchChars.length)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
97	[BUG]  [BUGGY]  if(cs.length()  >=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs.length()  >=  searchChars.length)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs.length()  >=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
98	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(!isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
99	[BUG]  [BUGGY]  String  csLength  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLength  =  searchChars.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLength  =  searchChars.length;	  String    csLength    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
100	[BUG]  [BUGGY]  int  j  =  cs.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  cs.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  cs.length;	  int    j    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
101	[BUG]  [BUGGY]  int  j  =  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  0;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  0;	  int    j    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
102	[BUG]  [BUGGY]  int  j  =  this.searchChars.length;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  this.searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  this.searchChars.length;	  int    j    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
103	[BUG]  [BUGGY]  ||!cs.contains(searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  ||!cs.contains(searchChars))  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	||!cs.contains(searchChars))  {  return  true;  }	  ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
104	[BUG]  [BUGGY]  ||  cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  ||  cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	||  cs.contains(searchChars))  {  return  false;  }	  ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
105	[BUG]  [BUGGY]  int  searchLimit  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  searchChars.length  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  searchChars.length  +  1;	  int    searchLimit    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
106	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  true);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  true);  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  cs.toCharArray(searchChars,  true);	  char[]    searchChars    =    cs.toCharArray(searchChars);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
107	[BUG]  [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  cs.toCharArray(searchChars,  false);  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  cs.toCharArray(searchChars,  false);	  char[]    searchChars    =    cs.toCharArray(searchChars);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
108	[BUG]  [BUGGY]  Integer  csLength  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLength  =  searchChars.length  -  2;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLength  =  searchChars.length  -  2;	  Integer    csLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
109	[BUG]  [BUGGY]  Integer  csLength  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLength  =  searchChars.length  -  1  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLength  =  searchChars.length  -  1  +  1;	  Integer    csLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
110	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  searchChars.length  -  2;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  searchChars.length  -  2;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
111	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  searchChars.length  -  1  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  searchChars.length  -  1  +  1;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
112	[BUG]  [BUGGY]  int  searchLength  =  searchChars.length  -  3;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  searchChars.length  -  3;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  searchChars.length  -  3;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
113	[BUG]  [BUGGY]  char  csLimit  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  csLimit  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  csLimit  =  cs.length();	  int    csLimit    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
114	[BUG]  [BUGGY]  Integer  csLimit  =  cs.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLimit  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLimit  =  cs.length();	  int    csLimit    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
115	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length  ==  0)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
116	[BUG]  [BUGGY]  if(searchChars!=  null)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  return  false;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
117	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(cs.length()!=  searchChars.length)return  false;  }	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
118	[BUG]  [BUGGY]  if(searchChars.length!=  0)return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars.length!=  0)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars.length!=  0)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
119	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[searchChars.size()  ];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[searchChars.size()  ];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[searchChars.size()  ];	  char[]    searchChars    =    searchChars.toCharArray();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
120	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(!cs.isEmpty())return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(!cs.isEmpty())return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(!cs.isEmpty())return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty())return    false;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
121	[BUG]  [BUGGY]  int  len  =  this.searchChars.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  len  =  this.searchChars.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  len  =  this.searchChars.length;	  int    len    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
122	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getSearchChars();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  cs.getSearchChars();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  cs.getSearchChars();	  char[]    searchChars    =    cs.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
123	[BUG]  [BUGGY]  char[]  searchChars  =  cs.getText();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  cs.getText();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  cs.getText();	  char[]    searchChars    =    cs.toString();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
124	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!cs.contains(searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||!cs.contains(searchChars))  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||!cs.contains(searchChars))  {  return  true;  }	  if(searchChars    ==    null    ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
125	[BUG]  [BUGGY]  if(cs!=  null)  {  if(!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null)  {  if(!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null)  {  if(!cs.contains(searchChars))  {  return  false;  }	  if(searchChars!=    null)    {    if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
126	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  true;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(!isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  true;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
127	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||  searchChars.length!=  0)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
128	[BUG]  [BUGGY]  if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
129	[BUG]  [BUGGY]  if(!cs.contains(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.contains(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.contains(searchChars)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
130	[BUG]  [BUGGY]  if(!cs.contains(searchChars)||!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.contains(searchChars)||!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.contains(searchChars)||!cs.contains(searchChars))  {  return  false;  }	  if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
131	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(isEmpty(cs)||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
132	[BUG]  [BUGGY]  &&!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  &&!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	&&!cs.contains(searchChars))  {  return  false;  }	  ||!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
133	[BUG]  [BUGGY]  char  j  =  searchChars.length();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  j  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  j  =  searchChars.length();	  char    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
134	[BUG]  [BUGGY]  String  csLength  =  cs.length()  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLength  =  cs.length()  +  1;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLength  =  cs.length()  +  1;	  String    csLength    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
135	[BUG]  [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null  ||  searchChars.length  <  1)  {  return  false;  }	  if(searchChars    ==    null    ||    searchChars.length    <    1)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
136	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(searchChars.length()  ==  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
137	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.mayHaveSideEffects(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.mayHaveSideEffects(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.mayHaveSideEffects(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty()    ||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
138	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isBlank(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isBlank(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(!cs.isEmpty()  ||  ArrayUtils.isBlank(searchChars))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!cs.isEmpty()    ||    ArrayUtils.isEmpty(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
139	[BUG]  [BUGGY]  if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null)  {  if(searchChars.length()!=  0)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
140	[BUG]  [BUGGY]  Integer  csLength  =  cs.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  csLength  =  cs.length;  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  csLength  =  cs.length;	  Integer    csLength    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
141	[BUG]  [BUGGY]  int  j  =  searchChars.length  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  j  =  searchChars.length  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  j  =  searchChars.length  +  1;	  int    j    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	74	None	replace
142	[BUG]  [BUGGY]  int  searchLimit  =  cs.length()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  cs.length()  +  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  cs.length()  +  1;	  int    searchLimit    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
143	[BUG]  [BUGGY]  if(cs!=  null  ||!cs.isEmpty())  {  return  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||!cs.isEmpty())  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||!cs.isEmpty())  {  return  true;  }	  if(cs    ==    null    ||!cs.isEmpty())    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
144	[BUG]  [BUGGY]  if(!cs.containsKey(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!cs.containsKey(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!cs.containsKey(searchChars))  {  return  false;  }	  if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
145	[BUG]  [BUGGY]  Char  j  =  cs.charAt(0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Char  j  =  cs.charAt(0);  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Char  j  =  cs.charAt(0);	  char    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
146	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty())return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||!cs.isEmpty())return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||!cs.isEmpty())return  false;  }	  if(searchChars    ==    null    ||!cs.isEmpty())    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
147	[BUG]  [BUGGY]  if(cs.length  ==  0)  {  if(!cs.contains(searchChars))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs.length  ==  0)  {  if(!cs.contains(searchChars))  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs.length  ==  0)  {  if(!cs.contains(searchChars))  {  return  false;  }	  if(searchChars!=    null)    {    if(!cs.contains(searchChars))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
148	[BUG]  [BUGGY]  int  csLimit  =  searchChars.length  -  4;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  csLimit  =  searchChars.length  -  4;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  csLimit  =  searchChars.length  -  4;	  int    csLimit    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
149	[BUG]  [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||!isEmpty(cs))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||!isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
150	[BUG]  [BUGGY]  if(!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(!isEmpty(cs))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(!isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
151	[BUG]  [BUGGY]  Integer  j  =  searchChars.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  j  =  searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  j  =  searchChars.length;	  Integer    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
152	[BUG]  [BUGGY]  Integer  j  =  cs.length()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Integer  j  =  cs.length()  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Integer  j  =  cs.length()  -  1;	  Integer    j    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
153	[BUG]  [BUGGY]  String  csLimit  =  searchChars.length;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  String  csLimit  =  searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	String  csLimit  =  searchChars.length;	  char    csLimit    =    searchChars.length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
154	[BUG]  [BUGGY]  Int  j  =  cs.length();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Int  j  =  cs.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Int  j  =  cs.length();	  int    j    =    cs.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
155	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(searchChars.length!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
156	[BUG]  [BUGGY]  if(cs!=  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null)  {  if(searchChars.length!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null)  {  if(searchChars.length!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
157	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(searchChars.length!=  0)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(searchChars.length!=  0)return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
158	[BUG]  [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||  searchChars.length!=  0)  {  return  false;  }	  if(cs    ==    null)    {    if(searchChars.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
159	[BUG]  [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
160	[BUG]  [BUGGY]  if(searchChars!=  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars!=  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars!=  null)  {  if(cs.length()  ==  searchChars.length)return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
161	[BUG]  [BUGGY]  if(cs!=  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs!=  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs!=  null  ||  cs.length()  ==  searchChars.length)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()    ==    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
162	[BUG]  [BUGGY]  if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars.length!=  0)  {  if(cs.length()!=  searchChars.length)return  false;  }	  if(searchChars.length    ==    0)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
163	[BUG]  [BUGGY]  char[]  searchChars  =  new  char[searchChars.length];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char[]  searchChars  =  new  char[searchChars.length];  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char[]  searchChars  =  new  char[searchChars.length];	  char[]    searchChars    =    searchChars.toCharArray();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
164	[BUG]  [BUGGY]  char  searchLength  =  searchChars.length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  char  searchLength  =  searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	char  searchLength  =  searchChars.length;	  char    searchLength    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
165	[BUG]  [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||  cs.length()!=  searchChars.length)return  false;  }	  if(cs    ==    null    ||    cs.length()!=    searchChars.length)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
166	[BUG]  [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null)  {  if(searchChars.length()!=  searchChars.length)  {  return  false;  }	  if(searchChars!=    null)    {    if(cs.length()!=    searchChars.length)    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
167	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  searchChars.length  <  1)  {  return  true;  }	  if(searchChars    ==    null)    {    return    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
168	[BUG]  [BUGGY]  int  searchLength  =  cs.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  =  cs.length  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  =  cs.length  -  1;	  int    searchLength    =    searchChars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
169	[BUG]  [BUGGY]  int  searchLimit  =  cs.length()  -  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLimit  =  cs.length()  -  1;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLimit  =  cs.length()  -  1;	  int    searchLimit    =    cs.length();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
170	[BUG]  [BUGGY]  int  searchLength  -=  this.searchChars.length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  int  searchLength  -=  this.searchChars.length;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	int  searchLength  -=  this.searchChars.length;	  int    searchLength    =    this.searchChars.length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
171	[BUG]  [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null  ||  cs.length()!=  searchChars.length)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
172	[BUG]  [BUGGY]  if(searchChars  ==  null)return  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(searchChars  ==  null)return  false;  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(searchChars  ==  null)return  false;	  if(searchChars    ==    null)    {    if(cs.length()!=    searchChars.length)return    false;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
173	[BUG]  [BUGGY]  if(cs  ==  null  ||!isEmpty(cs))  {  return  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  if(cs  ==  null  ||!isEmpty(cs))  {  return  false;  }  [BUGGY]      int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	if(cs  ==  null  ||!isEmpty(cs))  {  return  false;  }	  if(searchChars    ==    null)    {    if(!isEmpty(cs))    {    return    false;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
174	[BUG]  [BUGGY]  Int  csLimit  =  searchChars.length();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  containsAny(CharSequence  cs,  char[]  searchChars)  {  if  (isEmpty(cs)  ||  ArrayUtils.isEmpty(searchChars))  {  return  false;  }      [BUGGY]  Int  csLimit  =  searchChars.length();  [BUGGY]      int  csLength  =  cs.length();  int  searchLength  =  searchChars.length;  int  csLast  =  csLength  -  1;  int  searchLast  =  searchLength  -  1;  for  (int  i  =  0;  i  <  csLength;  i++)  {  char  ch  =  cs.charAt(i);  for  (int  j  =  0;  j  <  searchLength;  j++)  {  if  (searchChars[j]  ==  ch)  {  if  (i  <  csLast  &&  j  <  searchLast  &&  ch  >=  Character.MIN_HIGH_SURROGATE  &&  ch  <=  Character.MAX_HIGH_SURROGATE)  {  if  (searchChars[j  +  1]  ==  cs.charAt(i  +  1))  {  [CLASS]  StringUtils  [METHOD]  containsAny  [RETURN_TYPE]  boolean  CharSequence  cs  char[]  searchChars  [VARIABLES]  CharSequence  cs  char  ch  String  EMPTY  decomposed  input  searchChars  searchStr  str  str1  str2  stripChars  ts  boolean  int  INDEX_NOT_FOUND  PAD_LIMIT  csLast  csLen  csLength  end  endLimit  found  i  index  j  len  max  ordinal  searchLast  searchLen  searchLength  start  startPos  strLen  strsLen  char[]  searchChars  	projects/Lang30/src/main/java/org/apache/commons/lang3/StringUtils.java	0.2581988897471611	1447	1447	10	replace	Int  csLimit  =  searchChars.length();	  int    csLimit    =    searchChars.length()    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
